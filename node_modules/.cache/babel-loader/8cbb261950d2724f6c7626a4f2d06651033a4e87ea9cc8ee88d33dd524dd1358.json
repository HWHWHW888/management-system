{"ast":null,"code":"// API Client for connecting frontend to backend server\nimport { tokenManager } from '../auth/tokenManager';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nclass ApiClient {\n  constructor(baseUrl = API_BASE_URL) {\n    this.baseUrl = void 0;\n    this.token = null;\n    this.baseUrl = baseUrl;\n    this.initializeToken();\n  }\n  async initializeToken() {\n    // Don't initialize token on construction - it causes async issues\n    // Token will be retrieved when needed in request()\n    console.log('üîß ApiClient: Constructor completed, token will be loaded on first request');\n  }\n  setToken(token) {\n    this.token = token;\n    tokenManager.setToken(token);\n    console.log('üîë ApiClient: Token set explicitly:', token ? 'YES' : 'NO');\n  }\n  async refreshToken() {\n    console.log('üîÑ ApiClient: Refreshing token...');\n    const token = await tokenManager.getToken();\n    if (token) {\n      this.token = token;\n      console.log('üîë ApiClient: Token refreshed successfully');\n      return true;\n    }\n    console.log('‚ùå ApiClient: Token refresh failed - no token available');\n    return false;\n  }\n  async request(endpoint, options = {}, customToken) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n\n    // Get token with priority: customToken > instance token > centralized token manager\n    let token = customToken || this.token;\n    if (!token) {\n      console.log('üîç ApiClient: No token in instance, checking TokenManager...');\n      console.log('üîç ApiClient: Current instance token:', this.token);\n      token = (await tokenManager.getToken()) || null;\n      if (token) {\n        this.token = token;\n        console.log('üîë ApiClient: Got token from TokenManager and cached it');\n      } else {\n        console.log('‚ùå ApiClient: TokenManager returned no token');\n      }\n    } else {\n      console.log('üîë ApiClient: Using existing token (custom or instance)');\n    }\n    if (!token) {\n      console.error('‚ùå ApiClient: No authentication token available from any source');\n      console.log('üîç Debug info:', {\n        customToken: !!customToken,\n        instanceToken: !!this.token,\n        localStorage: !!localStorage.getItem('casinoUser')\n      });\n      return {\n        success: false,\n        error: 'Authentication required - please login first'\n      };\n    }\n    headers['Authorization'] = `Bearer ${token}`;\n    console.log(`üîë Making request to ${endpoint} with token:`, token.substring(0, 20) + '...');\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        // Handle 401 Unauthorized - token might be expired\n        if (response.status === 401) {\n          console.warn('üîÑ Token expired, attempting refresh...');\n          const refreshed = await this.refreshToken();\n          if (refreshed && this.token !== token) {\n            // Retry with new token\n            headers['Authorization'] = `Bearer ${this.token}`;\n            const retryResponse = await fetch(url, {\n              ...options,\n              headers\n            });\n            const retryData = await retryResponse.json();\n            if (retryResponse.ok) {\n              return retryData;\n            }\n          }\n        }\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error(`API request failed: ${endpoint}`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  // Auth endpoints - login doesn't need token\n  async login(username, password) {\n    const url = `${this.baseUrl}/auth/login`;\n    try {\n      var _data$data;\n      console.log('üîê ApiClient: Making login request to:', url);\n      console.log('üîê ApiClient: Login data:', {\n        username,\n        password: '***'\n      });\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      console.log('üîê ApiClient: Response status:', response.status);\n      const data = await response.json();\n      console.log('üîê ApiClient: Response data:', data);\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n\n      // Store token after successful login\n      if (data.success && (_data$data = data.data) !== null && _data$data !== void 0 && _data$data.token) {\n        console.log('üîë ApiClient: Storing token after successful login');\n        this.setToken(data.data.token);\n        tokenManager.setToken(data.data.token);\n      }\n      return {\n        success: true,\n        data: data\n      };\n    } catch (error) {\n      console.error(`Login request failed:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n\n  // Users endpoints\n  async getUsers() {\n    return this.request('/users');\n  }\n  async createUser(userData) {\n    return this.request('/users', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async updateUser(id, userData) {\n    return this.request(`/users/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(userData)\n    });\n  }\n  async deleteUser(id) {\n    return this.request(`/users/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Customers endpoints\n  async getCustomers(customToken) {\n    return this.request('/customers', {}, customToken);\n  }\n  async createCustomer(customerData, customToken) {\n    return this.request('/customers', {\n      method: 'POST',\n      body: JSON.stringify(customerData)\n    }, customToken);\n  }\n  async updateCustomer(id, customerData, customToken) {\n    return this.request(`/customers/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(customerData)\n    }, customToken);\n  }\n  async deleteCustomer(id, customToken) {\n    return this.request(`/customers/${id}`, {\n      method: 'DELETE'\n    }, customToken);\n  }\n\n  // Agents endpoints\n  async getAgents(customToken) {\n    return this.request('/agents', {}, customToken);\n  }\n  async createAgent(agentData, customToken) {\n    return this.request('/agents', {\n      method: 'POST',\n      body: JSON.stringify(agentData)\n    }, customToken);\n  }\n  async updateAgent(id, agentData, customToken) {\n    return this.request(`/agents/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(agentData)\n    }, customToken);\n  }\n  async deleteAgent(id, customToken) {\n    return this.request(`/agents/${id}`, {\n      method: 'DELETE'\n    }, customToken);\n  }\n\n  // Trips endpoints\n  async getTrips() {\n    return this.request('/trips');\n  }\n  async getTripsWithSharing() {\n    console.log('üîÑ ApiClient: Fetching trips with sharing data...');\n    const response = await this.request('/trips');\n    console.log('üìä ApiClient: Trips with sharing data loaded:', Array.isArray(response.data) ? response.data.length : 0);\n    return response;\n  }\n  async createTrip(tripData) {\n    return this.request('/trips', {\n      method: 'POST',\n      body: JSON.stringify(tripData)\n    });\n  }\n  async updateTrip(id, tripData) {\n    return this.request(`/trips/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(tripData)\n    });\n  }\n  async deleteTrip(id) {\n    return this.request(`/trips/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Transactions endpoints\n  async getTransactions() {\n    return this.request('/transactions');\n  }\n  async createTransaction(transactionData) {\n    return this.request('/transactions', {\n      method: 'POST',\n      body: JSON.stringify(transactionData)\n    });\n  }\n  async updateTransaction(id, transactionData) {\n    return this.request(`/transactions/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(transactionData)\n    });\n  }\n  async deleteTransaction(id) {\n    return this.request(`/transactions/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Reports endpoints\n  async getReports() {\n    return this.request('/reports');\n  }\n  async getDashboardStats() {\n    return this.request('/reports/dashboard');\n  }\n  async getCustomerReport(customerId) {\n    return this.request(`/reports/customer/${customerId}`);\n  }\n  async getAgentReport(agentId) {\n    return this.request(`/reports/agent/${agentId}`);\n  }\n  async getTripReport(tripId) {\n    return this.request(`/reports/trip/${tripId}`);\n  }\n\n  // Customer Details endpoints\n  async getCustomerDetails(customerId) {\n    return this.request(`/customers/${customerId}/details`);\n  }\n  async createCustomerDetails(customerId, detailsData) {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'POST',\n      body: JSON.stringify(detailsData)\n    });\n  }\n  async updateCustomerDetails(customerId, detailsData) {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'PUT',\n      body: JSON.stringify(detailsData)\n    });\n  }\n  async deleteCustomerDetails(customerId) {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Customer file attachment methods\n  async uploadCustomerAttachments(customerId, attachments) {\n    return this.request(`/customers/${customerId}/attachments`, {\n      method: 'POST',\n      body: JSON.stringify({\n        attachments\n      })\n    });\n  }\n  async getCustomerAttachments(customerId) {\n    return this.request(`/customers/${customerId}/attachments`);\n  }\n  async deleteCustomerAttachment(customerId, attachmentId) {\n    return this.request(`/customers/${customerId}/attachments/${attachmentId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Staff endpoints\n  async getStaffs() {\n    return this.request('/staffs');\n  }\n  async getStaff(id) {\n    return this.request(`/staffs/${id}`);\n  }\n  async createStaff(staffData) {\n    return this.request('/staffs', {\n      method: 'POST',\n      body: JSON.stringify(staffData)\n    });\n  }\n  async updateStaff(id, staffData) {\n    return this.request(`/staffs/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(staffData)\n    });\n  }\n  async deleteStaff(id) {\n    return this.request(`/staffs/${id}`, {\n      method: 'DELETE'\n    });\n  }\n  async staffCheckIn(id, checkInData) {\n    return this.request(`/staffs/${id}/check-in`, {\n      method: 'POST',\n      body: JSON.stringify(checkInData)\n    });\n  }\n  async staffCheckOut(id, checkOutData) {\n    return this.request(`/staffs/${id}/check-out`, {\n      method: 'POST',\n      body: JSON.stringify(checkOutData)\n    });\n  }\n  async getStaffShifts(id, params) {\n    const queryString = params ? new URLSearchParams(params).toString() : '';\n    return this.request(`/staffs/${id}/shifts${queryString ? `?${queryString}` : ''}`);\n  }\n  async getStaffRollingRecords(id, params) {\n    const queryString = params ? new URLSearchParams(params).toString() : '';\n    return this.request(`/staffs/${id}/rolling-records${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Generic HTTP methods for flexible API calls\n  async get(endpoint, customToken) {\n    return this.request(endpoint, {\n      method: 'GET'\n    }, customToken);\n  }\n  async post(endpoint, data, customToken) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined\n    }, customToken);\n  }\n  async put(endpoint, data, customToken) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined\n    }, customToken);\n  }\n  async delete(endpoint, customToken) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    }, customToken);\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["tokenManager","API_BASE_URL","process","env","REACT_APP_API_URL","ApiClient","constructor","baseUrl","token","initializeToken","console","log","setToken","refreshToken","getToken","request","endpoint","options","customToken","url","headers","error","instanceToken","localStorage","getItem","success","substring","response","fetch","data","json","ok","status","warn","refreshed","retryResponse","retryData","Error","message","login","username","password","_data$data","method","body","JSON","stringify","register","userData","getUsers","createUser","updateUser","id","deleteUser","getCustomers","createCustomer","customerData","updateCustomer","deleteCustomer","getAgents","createAgent","agentData","updateAgent","deleteAgent","getTrips","getTripsWithSharing","Array","isArray","length","createTrip","tripData","updateTrip","deleteTrip","getTransactions","createTransaction","transactionData","updateTransaction","deleteTransaction","getReports","getDashboardStats","getCustomerReport","customerId","getAgentReport","agentId","getTripReport","tripId","getCustomerDetails","createCustomerDetails","detailsData","updateCustomerDetails","deleteCustomerDetails","uploadCustomerAttachments","attachments","getCustomerAttachments","deleteCustomerAttachment","attachmentId","getStaffs","getStaff","createStaff","staffData","updateStaff","deleteStaff","staffCheckIn","checkInData","staffCheckOut","checkOutData","getStaffShifts","params","queryString","URLSearchParams","toString","getStaffRollingRecords","get","post","undefined","put","delete","apiClient"],"sources":["/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/src/utils/api/apiClient.ts"],"sourcesContent":["// API Client for connecting frontend to backend server\nimport { tokenManager } from '../auth/tokenManager';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\ninterface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  error?: string;\n}\n\nclass ApiClient {\n  private baseUrl: string;\n  private token: string | null = null;\n\n  constructor(baseUrl: string = API_BASE_URL) {\n    this.baseUrl = baseUrl;\n    this.initializeToken();\n  }\n\n  private async initializeToken() {\n    // Don't initialize token on construction - it causes async issues\n    // Token will be retrieved when needed in request()\n    console.log('üîß ApiClient: Constructor completed, token will be loaded on first request');\n  }\n\n  setToken(token: string) {\n    this.token = token;\n    tokenManager.setToken(token);\n    console.log('üîë ApiClient: Token set explicitly:', token ? 'YES' : 'NO');\n  }\n\n  async refreshToken(): Promise<boolean> {\n    console.log('üîÑ ApiClient: Refreshing token...');\n    const token = await tokenManager.getToken();\n    if (token) {\n      this.token = token;\n      console.log('üîë ApiClient: Token refreshed successfully');\n      return true;\n    }\n    console.log('‚ùå ApiClient: Token refresh failed - no token available');\n    return false;\n  }\n\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {},\n    customToken?: string\n  ): Promise<ApiResponse<T>> {\n    const url = `${this.baseUrl}${endpoint}`;\n    \n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...(options.headers as Record<string, string>),\n    };\n\n    // Get token with priority: customToken > instance token > centralized token manager\n    let token = customToken || this.token;\n    \n    if (!token) {\n      console.log('üîç ApiClient: No token in instance, checking TokenManager...');\n      console.log('üîç ApiClient: Current instance token:', this.token);\n      token = await tokenManager.getToken() || null;\n      if (token) {\n        this.token = token;\n        console.log('üîë ApiClient: Got token from TokenManager and cached it');\n      } else {\n        console.log('‚ùå ApiClient: TokenManager returned no token');\n      }\n    } else {\n      console.log('üîë ApiClient: Using existing token (custom or instance)');\n    }\n\n    if (!token) {\n      console.error('‚ùå ApiClient: No authentication token available from any source');\n      console.log('üîç Debug info:', {\n        customToken: !!customToken,\n        instanceToken: !!this.token,\n        localStorage: !!localStorage.getItem('casinoUser')\n      });\n      return {\n        success: false,\n        error: 'Authentication required - please login first'\n      };\n    }\n\n    headers['Authorization'] = `Bearer ${token}`;\n    console.log(`üîë Making request to ${endpoint} with token:`, token.substring(0, 20) + '...');\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // Handle 401 Unauthorized - token might be expired\n        if (response.status === 401) {\n          console.warn('üîÑ Token expired, attempting refresh...');\n          const refreshed = await this.refreshToken();\n          if (refreshed && this.token !== token) {\n            // Retry with new token\n            headers['Authorization'] = `Bearer ${this.token}`;\n            const retryResponse = await fetch(url, { ...options, headers });\n            const retryData = await retryResponse.json();\n            if (retryResponse.ok) {\n              return retryData;\n            }\n          }\n        }\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error(`API request failed: ${endpoint}`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  // Auth endpoints - login doesn't need token\n  async login(username: string, password: string) {\n    const url = `${this.baseUrl}/auth/login`;\n    \n    try {\n      console.log('üîê ApiClient: Making login request to:', url);\n      console.log('üîê ApiClient: Login data:', { username, password: '***' });\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      console.log('üîê ApiClient: Response status:', response.status);\n      const data = await response.json();\n      console.log('üîê ApiClient: Response data:', data);\n\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n\n      // Store token after successful login\n      if (data.success && data.data?.token) {\n        console.log('üîë ApiClient: Storing token after successful login');\n        this.setToken(data.data.token);\n        tokenManager.setToken(data.data.token);\n      }\n\n      return {\n        success: true,\n        data: data\n      };\n    } catch (error) {\n      console.error(`Login request failed:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  async register(userData: any) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  // Users endpoints\n  async getUsers() {\n    return this.request('/users');\n  }\n\n  async createUser(userData: any) {\n    return this.request('/users', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  async updateUser(id: string, userData: any) {\n    return this.request(`/users/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  async deleteUser(id: string) {\n    return this.request(`/users/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Customers endpoints\n  async getCustomers(customToken?: string) {\n    return this.request('/customers', {}, customToken);\n  }\n\n  async createCustomer(customerData: any, customToken?: string) {\n    return this.request('/customers', {\n      method: 'POST',\n      body: JSON.stringify(customerData),\n    }, customToken);\n  }\n\n  async updateCustomer(id: string, customerData: any, customToken?: string) {\n    return this.request(`/customers/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(customerData),\n    }, customToken);\n  }\n\n  async deleteCustomer(id: string, customToken?: string) {\n    return this.request(`/customers/${id}`, {\n      method: 'DELETE',\n    }, customToken);\n  }\n\n  // Agents endpoints\n  async getAgents(customToken?: string) {\n    return this.request('/agents', {}, customToken);\n  }\n\n  async createAgent(agentData: any, customToken?: string) {\n    return this.request('/agents', {\n      method: 'POST',\n      body: JSON.stringify(agentData),\n    }, customToken);\n  }\n\n  async updateAgent(id: string, agentData: any, customToken?: string) {\n    return this.request(`/agents/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(agentData),\n    }, customToken);\n  }\n\n  async deleteAgent(id: string, customToken?: string) {\n    return this.request(`/agents/${id}`, {\n      method: 'DELETE',\n    }, customToken);\n  }\n\n  // Trips endpoints\n  async getTrips() {\n    return this.request('/trips');\n  }\n\n  async getTripsWithSharing() {\n    console.log('üîÑ ApiClient: Fetching trips with sharing data...');\n    const response = await this.request('/trips');\n    console.log('üìä ApiClient: Trips with sharing data loaded:', Array.isArray(response.data) ? response.data.length : 0);\n    return response;\n  }\n\n  async createTrip(tripData: any) {\n    return this.request('/trips', {\n      method: 'POST',\n      body: JSON.stringify(tripData),\n    });\n  }\n\n  async updateTrip(id: string, tripData: any) {\n    return this.request(`/trips/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(tripData),\n    });\n  }\n\n  async deleteTrip(id: string) {\n    return this.request(`/trips/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Transactions endpoints\n  async getTransactions() {\n    return this.request('/transactions');\n  }\n\n  async createTransaction(transactionData: any) {\n    return this.request('/transactions', {\n      method: 'POST',\n      body: JSON.stringify(transactionData),\n    });\n  }\n\n  async updateTransaction(id: string, transactionData: any) {\n    return this.request(`/transactions/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(transactionData),\n    });\n  }\n\n  async deleteTransaction(id: string) {\n    return this.request(`/transactions/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Reports endpoints\n  async getReports() {\n    return this.request('/reports');\n  }\n\n  async getDashboardStats() {\n    return this.request('/reports/dashboard');\n  }\n\n  async getCustomerReport(customerId: string) {\n    return this.request(`/reports/customer/${customerId}`);\n  }\n\n  async getAgentReport(agentId: string) {\n    return this.request(`/reports/agent/${agentId}`);\n  }\n\n  async getTripReport(tripId: string) {\n    return this.request(`/reports/trip/${tripId}`);\n  }\n\n  // Customer Details endpoints\n  async getCustomerDetails(customerId: string) {\n    return this.request(`/customers/${customerId}/details`);\n  }\n\n  async createCustomerDetails(customerId: string, detailsData: any) {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'POST',\n      body: JSON.stringify(detailsData),\n    });\n  }\n\n\n  \n  async updateCustomerDetails(customerId: string, detailsData: any) {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'PUT',\n      body: JSON.stringify(detailsData),\n    });\n  }\n\n  async deleteCustomerDetails(customerId: string): Promise<ApiResponse<void>> {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Customer file attachment methods\n  async uploadCustomerAttachments(customerId: string, attachments: any[]): Promise<ApiResponse<any>> {\n    return this.request(`/customers/${customerId}/attachments`, {\n      method: 'POST',\n      body: JSON.stringify({ attachments })\n    });\n  }\n\n  async getCustomerAttachments(customerId: string): Promise<ApiResponse<any[]>> {\n    return this.request(`/customers/${customerId}/attachments`);\n  }\n\n  async deleteCustomerAttachment(customerId: string, attachmentId: string): Promise<ApiResponse<any>> {\n    return this.request(`/customers/${customerId}/attachments/${attachmentId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Staff endpoints\n  async getStaffs(): Promise<ApiResponse<any[]>> {\n    return this.request('/staffs');\n  }\n\n  async getStaff(id: string): Promise<ApiResponse<any>> {\n    return this.request(`/staffs/${id}`);\n  }\n\n  async createStaff(staffData: any): Promise<ApiResponse<any>> {\n    return this.request('/staffs', {\n      method: 'POST',\n      body: JSON.stringify(staffData)\n    });\n  }\n\n  async updateStaff(id: string, staffData: any): Promise<ApiResponse<any>> {\n    return this.request(`/staffs/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(staffData)\n    });\n  }\n\n  async deleteStaff(id: string): Promise<ApiResponse<any>> {\n    return this.request(`/staffs/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  async staffCheckIn(id: string, checkInData: any): Promise<ApiResponse<any>> {\n    return this.request(`/staffs/${id}/check-in`, {\n      method: 'POST',\n      body: JSON.stringify(checkInData)\n    });\n  }\n\n  async staffCheckOut(id: string, checkOutData: any): Promise<ApiResponse<any>> {\n    return this.request(`/staffs/${id}/check-out`, {\n      method: 'POST',\n      body: JSON.stringify(checkOutData)\n    });\n  }\n\n  async getStaffShifts(id: string, params?: any): Promise<ApiResponse<any[]>> {\n    const queryString = params ? new URLSearchParams(params).toString() : '';\n    return this.request(`/staffs/${id}/shifts${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async getStaffRollingRecords(id: string, params?: any): Promise<ApiResponse<any[]>> {\n    const queryString = params ? new URLSearchParams(params).toString() : '';\n    return this.request(`/staffs/${id}/rolling-records${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Generic HTTP methods for flexible API calls\n  async get<T = any>(endpoint: string, customToken?: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, { method: 'GET' }, customToken);\n  }\n\n  async post<T = any>(endpoint: string, data?: any, customToken?: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    }, customToken);\n  }\n\n  async put<T = any>(endpoint: string, data?: any, customToken?: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    }, customToken);\n  }\n\n  async delete<T = any>(endpoint: string, customToken?: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, { method: 'DELETE' }, customToken);\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient();\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}