{"ast":null,"code":"\"use client\";\n\n// src/dialog.tsx\nimport _objectSpread from \"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"__scopeDialog\"],\n  _excluded2 = [\"forceMount\"],\n  _excluded3 = [\"__scopeDialog\"],\n  _excluded4 = [\"forceMount\"],\n  _excluded5 = [\"__scopeDialog\", \"trapFocus\", \"onOpenAutoFocus\", \"onCloseAutoFocus\"],\n  _excluded6 = [\"__scopeDialog\"],\n  _excluded7 = [\"__scopeDialog\"],\n  _excluded8 = [\"__scopeDialog\"];\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContext, createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { hideOthers } from \"aria-hidden\";\nimport { createSlot } from \"@radix-ui/react-slot\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar DIALOG_NAME = \"Dialog\";\nvar [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\nvar [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);\nvar Dialog = props => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true\n  } = props;\n  const triggerRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen !== null && defaultOpen !== void 0 ? defaultOpen : false,\n    onChange: onOpenChange,\n    caller: DIALOG_NAME\n  });\n  return /* @__PURE__ */jsx(DialogProvider, {\n    scope: __scopeDialog,\n    triggerRef,\n    contentRef,\n    contentId: useId(),\n    titleId: useId(),\n    descriptionId: useId(),\n    open,\n    onOpenChange: setOpen,\n    onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n    modal,\n    children\n  });\n};\nDialog.displayName = DIALOG_NAME;\nvar TRIGGER_NAME = \"DialogTrigger\";\nvar DialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeDialog\n    } = props,\n    triggerProps = _objectWithoutProperties(props, _excluded);\n  const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n  return /* @__PURE__ */jsx(Primitive.button, _objectSpread(_objectSpread({\n    type: \"button\",\n    \"aria-haspopup\": \"dialog\",\n    \"aria-expanded\": context.open,\n    \"aria-controls\": context.contentId,\n    \"data-state\": getState(context.open)\n  }, triggerProps), {}, {\n    ref: composedTriggerRef,\n    onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n  }));\n});\nDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"DialogPortal\";\nvar [PortalProvider, usePortalContext] = createDialogContext(PORTAL_NAME, {\n  forceMount: void 0\n});\nvar DialogPortal = props => {\n  const {\n    __scopeDialog,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(PortalProvider, {\n    scope: __scopeDialog,\n    forceMount,\n    children: React.Children.map(children, child => /* @__PURE__ */jsx(Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */jsx(PortalPrimitive, {\n        asChild: true,\n        container,\n        children: child\n      })\n    }))\n  });\n};\nDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"DialogOverlay\";\nvar DialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n  const {\n      forceMount = portalContext.forceMount\n    } = props,\n    overlayProps = _objectWithoutProperties(props, _excluded2);\n  const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n  return context.modal ? /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: /* @__PURE__ */jsx(DialogOverlayImpl, _objectSpread(_objectSpread({}, overlayProps), {}, {\n      ref: forwardedRef\n    }))\n  }) : null;\n});\nDialogOverlay.displayName = OVERLAY_NAME;\nvar Slot = createSlot(\"DialogOverlay.RemoveScroll\");\nvar DialogOverlayImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeDialog\n    } = props,\n    overlayProps = _objectWithoutProperties(props, _excluded3);\n  const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n  return (\n    // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n    // ie. when `Overlay` and `Content` are siblings\n    /* @__PURE__ */\n    jsx(RemoveScroll, {\n      as: Slot,\n      allowPinchZoom: true,\n      shards: [context.contentRef],\n      children: /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n        \"data-state\": getState(context.open)\n      }, overlayProps), {}, {\n        ref: forwardedRef,\n        style: _objectSpread({\n          pointerEvents: \"auto\"\n        }, overlayProps.style)\n      }))\n    })\n  );\n});\nvar CONTENT_NAME = \"DialogContent\";\nvar DialogContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n  const {\n      forceMount = portalContext.forceMount\n    } = props,\n    contentProps = _objectWithoutProperties(props, _excluded4);\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: context.modal ? /* @__PURE__ */jsx(DialogContentModal, _objectSpread(_objectSpread({}, contentProps), {}, {\n      ref: forwardedRef\n    })) : /* @__PURE__ */jsx(DialogContentNonModal, _objectSpread(_objectSpread({}, contentProps), {}, {\n      ref: forwardedRef\n    }))\n  });\n});\nDialogContent.displayName = CONTENT_NAME;\nvar DialogContentModal = React.forwardRef((props, forwardedRef) => {\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return hideOthers(content);\n  }, []);\n  return /* @__PURE__ */jsx(DialogContentImpl, _objectSpread(_objectSpread({}, props), {}, {\n    ref: composedRefs,\n    trapFocus: context.open,\n    disableOutsidePointerEvents: true,\n    onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, event => {\n      var _context$triggerRef$c;\n      event.preventDefault();\n      (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();\n    }),\n    onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, event => {\n      const originalEvent = event.detail.originalEvent;\n      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n      if (isRightClick) event.preventDefault();\n    }),\n    onFocusOutside: composeEventHandlers(props.onFocusOutside, event => event.preventDefault())\n  }));\n});\nvar DialogContentNonModal = React.forwardRef((props, forwardedRef) => {\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  const hasInteractedOutsideRef = React.useRef(false);\n  const hasPointerDownOutsideRef = React.useRef(false);\n  return /* @__PURE__ */jsx(DialogContentImpl, _objectSpread(_objectSpread({}, props), {}, {\n    ref: forwardedRef,\n    trapFocus: false,\n    disableOutsidePointerEvents: false,\n    onCloseAutoFocus: event => {\n      var _props$onCloseAutoFoc;\n      (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);\n      if (!event.defaultPrevented) {\n        var _context$triggerRef$c2;\n        if (!hasInteractedOutsideRef.current) (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();\n        event.preventDefault();\n      }\n      hasInteractedOutsideRef.current = false;\n      hasPointerDownOutsideRef.current = false;\n    },\n    onInteractOutside: event => {\n      var _props$onInteractOuts, _context$triggerRef$c3;\n      (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);\n      if (!event.defaultPrevented) {\n        hasInteractedOutsideRef.current = true;\n        if (event.detail.originalEvent.type === \"pointerdown\") {\n          hasPointerDownOutsideRef.current = true;\n        }\n      }\n      const target = event.target;\n      const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);\n      if (targetIsTrigger) event.preventDefault();\n      if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n        event.preventDefault();\n      }\n    }\n  }));\n});\nvar DialogContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeDialog,\n      trapFocus,\n      onOpenAutoFocus,\n      onCloseAutoFocus\n    } = props,\n    contentProps = _objectWithoutProperties(props, _excluded5);\n  const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  useFocusGuards();\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(FocusScope, {\n      asChild: true,\n      loop: true,\n      trapped: trapFocus,\n      onMountAutoFocus: onOpenAutoFocus,\n      onUnmountAutoFocus: onCloseAutoFocus,\n      children: /* @__PURE__ */jsx(DismissableLayer, _objectSpread(_objectSpread({\n        role: \"dialog\",\n        id: context.contentId,\n        \"aria-describedby\": context.descriptionId,\n        \"aria-labelledby\": context.titleId,\n        \"data-state\": getState(context.open)\n      }, contentProps), {}, {\n        ref: composedRefs,\n        onDismiss: () => context.onOpenChange(false)\n      }))\n    }), /* @__PURE__ */jsxs(Fragment, {\n      children: [/* @__PURE__ */jsx(TitleWarning, {\n        titleId: context.titleId\n      }), /* @__PURE__ */jsx(DescriptionWarning, {\n        contentRef,\n        descriptionId: context.descriptionId\n      })]\n    })]\n  });\n});\nvar TITLE_NAME = \"DialogTitle\";\nvar DialogTitle = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeDialog\n    } = props,\n    titleProps = _objectWithoutProperties(props, _excluded6);\n  const context = useDialogContext(TITLE_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.h2, _objectSpread(_objectSpread({\n    id: context.titleId\n  }, titleProps), {}, {\n    ref: forwardedRef\n  }));\n});\nDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"DialogDescription\";\nvar DialogDescription = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeDialog\n    } = props,\n    descriptionProps = _objectWithoutProperties(props, _excluded7);\n  const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.p, _objectSpread(_objectSpread({\n    id: context.descriptionId\n  }, descriptionProps), {}, {\n    ref: forwardedRef\n  }));\n});\nDialogDescription.displayName = DESCRIPTION_NAME;\nvar CLOSE_NAME = \"DialogClose\";\nvar DialogClose = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeDialog\n    } = props,\n    closeProps = _objectWithoutProperties(props, _excluded8);\n  const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.button, _objectSpread(_objectSpread({\n    type: \"button\"\n  }, closeProps), {}, {\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))\n  }));\n});\nDialogClose.displayName = CLOSE_NAME;\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar TITLE_WARNING_NAME = \"DialogTitleWarning\";\nvar [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: \"dialog\"\n});\nvar TitleWarning = _ref => {\n  let {\n    titleId\n  } = _ref;\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n  const MESSAGE = \"`\".concat(titleWarningContext.contentName, \"` requires a `\").concat(titleWarningContext.titleName, \"` for the component to be accessible for screen reader users.\\n\\nIf you want to hide the `\").concat(titleWarningContext.titleName, \"`, you can wrap it with our VisuallyHidden component.\\n\\nFor more information, see https://radix-ui.com/primitives/docs/components/\").concat(titleWarningContext.docsSlug);\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n  return null;\n};\nvar DESCRIPTION_WARNING_NAME = \"DialogDescriptionWarning\";\nvar DescriptionWarning = _ref2 => {\n  let {\n    contentRef,\n    descriptionId\n  } = _ref2;\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = \"Warning: Missing `Description` or `aria-describedby={undefined}` for {\".concat(descriptionWarningContext.contentName, \"}.\");\n  React.useEffect(() => {\n    var _contentRef$current;\n    const describedById = (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.getAttribute(\"aria-describedby\");\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n  return null;\n};\nvar Root = Dialog;\nvar Trigger = DialogTrigger;\nvar Portal = DialogPortal;\nvar Overlay = DialogOverlay;\nvar Content = DialogContent;\nvar Title = DialogTitle;\nvar Description = DialogDescription;\nvar Close = DialogClose;\nexport { Close, Content, Description, Dialog, DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogTitle, DialogTrigger, Overlay, Portal, Root, Title, Trigger, WarningProvider, createDialogScope };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}