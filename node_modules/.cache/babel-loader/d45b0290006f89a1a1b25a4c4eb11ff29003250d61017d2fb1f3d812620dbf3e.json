{"ast":null,"code":"import _objectSpread from\"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// API Client for connecting frontend to backend server\nimport{tokenManager}from'../auth/tokenManager';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:3001/api';class ApiClient{constructor(){let baseUrl=arguments.length>0&&arguments[0]!==undefined?arguments[0]:API_BASE_URL;this.baseUrl=void 0;this.token=null;this.baseUrl=baseUrl;this.initializeToken();}async initializeToken(){// Don't initialize token on construction - it causes async issues\n// Token will be retrieved when needed in request()\nconsole.log('üîß ApiClient: Constructor completed, token will be loaded on first request');}setToken(token){this.token=token;tokenManager.setToken(token);console.log('üîë ApiClient: Token set explicitly:',token?'YES':'NO');}async refreshToken(){console.log('üîÑ ApiClient: Refreshing token...');const token=await tokenManager.getToken();if(token){this.token=token;console.log('üîë ApiClient: Token refreshed successfully');return true;}console.log('‚ùå ApiClient: Token refresh failed - no token available');return false;}async request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let customToken=arguments.length>2?arguments[2]:undefined;const url=\"\".concat(this.baseUrl).concat(endpoint);const headers=_objectSpread({'Content-Type':'application/json'},options.headers);// Get token with priority: customToken > instance token > centralized token manager\nlet token=customToken||this.token;if(!token){console.log('üîç ApiClient: No token in instance, checking TokenManager...');console.log('üîç ApiClient: Current instance token:',this.token);token=(await tokenManager.getToken())||null;if(token){this.token=token;console.log('üîë ApiClient: Got token from TokenManager and cached it');}else{console.log('‚ùå ApiClient: TokenManager returned no token');}}else{console.log('üîë ApiClient: Using existing token (custom or instance)');}if(!token){console.error('‚ùå ApiClient: No authentication token available from any source');console.log('üîç Debug info:',{customToken:!!customToken,instanceToken:!!this.token,localStorage:!!localStorage.getItem('casinoUser')});return{success:false,error:'Authentication required - please login first'};}headers['Authorization']=\"Bearer \".concat(token);console.log(\"\\uD83D\\uDD11 Making request to \".concat(endpoint,\" with token:\"),token.substring(0,20)+'...');try{const response=await fetch(url,_objectSpread(_objectSpread({},options),{},{headers}));const data=await response.json();if(!response.ok){// Handle 401 Unauthorized - token might be expired\nif(response.status===401){console.warn('üîÑ Token expired, attempting refresh...');const refreshed=await this.refreshToken();if(refreshed&&this.token!==token){// Retry with new token\nheaders['Authorization']=\"Bearer \".concat(this.token);const retryResponse=await fetch(url,_objectSpread(_objectSpread({},options),{},{headers}));const retryData=await retryResponse.json();if(retryResponse.ok){return retryData;}}}throw new Error(data.message||\"HTTP error! status: \".concat(response.status));}return data;}catch(error){console.error(\"API request failed: \".concat(endpoint),error);return{success:false,error:error instanceof Error?error.message:'Unknown error occurred'};}}// Auth endpoints - login doesn't need token\nasync login(username,password){const url=\"\".concat(this.baseUrl,\"/auth/login\");try{var _data$data;console.log('üîê ApiClient: Making login request to:',url);console.log('üîê ApiClient: Login data:',{username,password:'***'});const response=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password})});console.log('üîê ApiClient: Response status:',response.status);const data=await response.json();console.log('üîê ApiClient: Response data:',data);if(!response.ok){throw new Error(data.message||\"HTTP error! status: \".concat(response.status));}// Store token after successful login\nif(data.success&&(_data$data=data.data)!==null&&_data$data!==void 0&&_data$data.token){console.log('üîë ApiClient: Storing token after successful login');this.setToken(data.data.token);tokenManager.setToken(data.data.token);}return{success:true,data:data};}catch(error){console.error(\"Login request failed:\",error);return{success:false,error:error instanceof Error?error.message:'Unknown error occurred'};}}async register(userData){return this.request('/auth/register',{method:'POST',body:JSON.stringify(userData)});}// Users endpoints\nasync getUsers(){return this.request('/users');}async createUser(userData){return this.request('/users',{method:'POST',body:JSON.stringify(userData)});}async updateUser(id,userData){return this.request(\"/users/\".concat(id),{method:'PUT',body:JSON.stringify(userData)});}async deleteUser(id){return this.request(\"/users/\".concat(id),{method:'DELETE'});}// Customers endpoints\nasync getCustomers(customToken){return this.request('/customers',{},customToken);}async createCustomer(customerData,customToken){return this.request('/customers',{method:'POST',body:JSON.stringify(customerData)},customToken);}async updateCustomer(id,customerData,customToken){return this.request(\"/customers/\".concat(id),{method:'PUT',body:JSON.stringify(customerData)},customToken);}async deleteCustomer(id,customToken){return this.request(\"/customers/\".concat(id),{method:'DELETE'},customToken);}// Agents endpoints\nasync getAgents(customToken){return this.request('/agents',{},customToken);}async createAgent(agentData,customToken){return this.request('/agents',{method:'POST',body:JSON.stringify(agentData)},customToken);}async updateAgent(id,agentData,customToken){return this.request(\"/agents/\".concat(id),{method:'PUT',body:JSON.stringify(agentData)},customToken);}async deleteAgent(id,customToken){return this.request(\"/agents/\".concat(id),{method:'DELETE'},customToken);}// Trips endpoints\nasync getTrips(){return this.request('/trips');}async getTripsWithSharing(){console.log('üîÑ ApiClient: Fetching trips with sharing data...');const response=await this.request('/trips');console.log('üìä ApiClient: Trips with sharing data loaded:',Array.isArray(response.data)?response.data.length:0);return response;}async createTrip(tripData){return this.request('/trips',{method:'POST',body:JSON.stringify(tripData)});}async updateTrip(id,tripData){return this.request(\"/trips/\".concat(id),{method:'PUT',body:JSON.stringify(tripData)});}async deleteTrip(id){return this.request(\"/trips/\".concat(id),{method:'DELETE'});}// Transactions endpoints\nasync getTransactions(){return this.request('/transactions');}async createTransaction(transactionData){return this.request('/transactions',{method:'POST',body:JSON.stringify(transactionData)});}async updateTransaction(id,transactionData){return this.request(\"/transactions/\".concat(id),{method:'PUT',body:JSON.stringify(transactionData)});}async deleteTransaction(id){return this.request(\"/transactions/\".concat(id),{method:'DELETE'});}// Reports endpoints\nasync getReports(){return this.request('/reports');}async getDashboardStats(){return this.request('/reports/dashboard');}async getCustomerReport(customerId){return this.request(\"/reports/customer/\".concat(customerId));}async getAgentReport(agentId){return this.request(\"/reports/agent/\".concat(agentId));}async getTripReport(tripId){return this.request(\"/reports/trip/\".concat(tripId));}// Customer Details endpoints\nasync getCustomerDetails(customerId){return this.request(\"/customers/\".concat(customerId,\"/details\"));}async createCustomerDetails(customerId,detailsData){return this.request(\"/customers/\".concat(customerId,\"/details\"),{method:'POST',body:JSON.stringify(detailsData)});}async updateCustomerDetails(customerId,detailsData){return this.request(\"/customers/\".concat(customerId,\"/details\"),{method:'PUT',body:JSON.stringify(detailsData)});}async deleteCustomerDetails(customerId){return this.request(\"/customers/\".concat(customerId,\"/details\"),{method:'DELETE'});}// Customer file attachment methods\nasync uploadCustomerAttachments(customerId,attachments){return this.request(\"/customers/\".concat(customerId,\"/attachments\"),{method:'POST',body:JSON.stringify({attachments})});}async getCustomerAttachments(customerId){return this.request(\"/customers/\".concat(customerId,\"/attachments\"));}async deleteCustomerAttachment(customerId,attachmentId){return this.request(\"/customers/\".concat(customerId,\"/attachments/\").concat(attachmentId),{method:'DELETE'});}// Staff endpoints\nasync getStaffs(){return this.request('/staffs');}async getStaff(id){return this.request(\"/staffs/\".concat(id));}async createStaff(staffData){return this.request('/staffs',{method:'POST',body:JSON.stringify(staffData)});}async updateStaff(id,staffData){return this.request(\"/staffs/\".concat(id),{method:'PUT',body:JSON.stringify(staffData)});}async deleteStaff(id){return this.request(\"/staffs/\".concat(id),{method:'DELETE'});}async staffCheckIn(id,checkInData){return this.request(\"/staffs/\".concat(id,\"/check-in\"),{method:'POST',body:JSON.stringify(checkInData)});}async staffCheckOut(id,checkOutData){return this.request(\"/staffs/\".concat(id,\"/check-out\"),{method:'POST',body:JSON.stringify(checkOutData)});}async getStaffShifts(id,params){const queryString=params?new URLSearchParams(params).toString():'';return this.request(\"/staffs/\".concat(id,\"/shifts\").concat(queryString?\"?\".concat(queryString):''));}async getStaffRollingRecords(id,params){const queryString=params?new URLSearchParams(params).toString():'';return this.request(\"/staffs/\".concat(id,\"/rolling-records\").concat(queryString?\"?\".concat(queryString):''));}// Generic HTTP methods for flexible API calls\nasync get(endpoint,customToken){return this.request(endpoint,{method:'GET'},customToken);}async post(endpoint,data,customToken){return this.request(endpoint,{method:'POST',body:data?JSON.stringify(data):undefined},customToken);}async put(endpoint,data,customToken){return this.request(endpoint,{method:'PUT',body:data?JSON.stringify(data):undefined},customToken);}async delete(endpoint,customToken){return this.request(endpoint,{method:'DELETE'},customToken);}}// Export singleton instance\nexport const apiClient=new ApiClient();export default apiClient;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}