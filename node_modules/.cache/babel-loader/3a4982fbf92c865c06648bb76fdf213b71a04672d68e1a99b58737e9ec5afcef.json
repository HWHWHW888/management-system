{"ast":null,"code":"// Database wrapper that uses backend API instead of direct Supabase calls\nimport { apiClient } from './apiClient';\nimport { supabase } from '../supabase/supabaseClients';\nexport class DatabaseWrapper {\n  constructor() {\n    // Expose API client for direct access to customer methods\n    this.apiClient = apiClient;\n  }\n  async testConnection() {\n    try {\n      // Test backend API health\n      const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n      const response = await fetch(`${apiUrl === null || apiUrl === void 0 ? void 0 : apiUrl.replace('/api', '')}/health`);\n      const data = await response.json();\n      if (response.ok && data.status === 'OK') {\n        return {\n          success: true,\n          message: 'Connected successfully',\n          details: 'Backend API connection is healthy'\n        };\n      } else {\n        return {\n          success: false,\n          message: 'Connection failed',\n          details: 'Backend API is not responding'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Connection error',\n        details: error.message\n      };\n    }\n  }\n  async isHealthy() {\n    try {\n      const connectionTest = await this.testConnection();\n      return connectionTest.success;\n    } catch (err) {\n      console.error('❌ Database health check error:', err);\n      return false;\n    }\n  }\n  async get(table, filters = []) {\n    try {\n      let data = [];\n      switch (table) {\n        case 'users':\n          const usersResponse = await apiClient.getUsers();\n          data = usersResponse.success ? usersResponse.data || [] : [];\n          break;\n        case 'customers':\n          const customersResponse = await apiClient.getCustomers();\n          data = customersResponse.success ? customersResponse.data || [] : [];\n          break;\n        case 'agents':\n          const agentsResponse = await apiClient.getAgents();\n          data = agentsResponse.success ? agentsResponse.data || [] : [];\n          break;\n        case 'trips':\n          const tripsResponse = await apiClient.getTrips();\n          data = tripsResponse.success ? tripsResponse.data || [] : [];\n          break;\n        case 'transactions':\n          const transactionsResponse = await apiClient.getTransactions();\n          data = transactionsResponse.success ? transactionsResponse.data || [] : [];\n          break;\n        case 'staff':\n          const staffResponse = await apiClient.getStaffs();\n          data = staffResponse.success ? staffResponse.data || [] : [];\n          break;\n        case 'rolling_records':\n          const rollingResponse = await apiClient.get('/rolling-records');\n          data = rollingResponse.success ? rollingResponse.data || [] : [];\n          break;\n        default:\n          console.warn(`Table ${table} not supported in API wrapper`);\n          return [];\n      }\n\n      // Apply filters if provided\n      if (filters.length > 0) {\n        data = data.filter(item => {\n          return filters.every(filter => {\n            if (filter.column && filter.value !== undefined) {\n              return item[filter.column] === filter.value;\n            }\n            return true;\n          });\n        });\n      }\n      return data || [];\n    } catch (error) {\n      console.error(`Error fetching from ${table}:`, error);\n      return [];\n    }\n  }\n  async save(table, data) {\n    try {\n      // For now, we'll handle single record creation\n      // In a real implementation, you'd want batch operations\n      const results = [];\n      for (const record of data) {\n        let result;\n        switch (table) {\n          case 'users':\n            result = await apiClient.createUser(record);\n            break;\n          case 'customers':\n            result = await apiClient.createCustomer(record);\n            break;\n          case 'agents':\n            result = await apiClient.createAgent(record);\n            break;\n          case 'trips':\n            result = await apiClient.createTrip(record);\n            break;\n          case 'transactions':\n            result = await apiClient.createTransaction(record);\n            break;\n          default:\n            throw new Error(`Table ${table} not supported for save operation`);\n        }\n        results.push(result);\n      }\n      return {\n        success: true,\n        results\n      };\n    } catch (error) {\n      console.error(`Error saving to ${table}:`, error);\n      throw error;\n    }\n  }\n  async initializeTables() {\n    try {\n      console.log('🔄 Backend API handles table initialization...');\n      // Backend API handles table initialization\n      return true;\n    } catch (error) {\n      console.error('❌ Database initialization failed:', error);\n      throw error;\n    }\n  }\n  async initializeSampleDataIfNeeded() {\n    try {\n      // Create admin user directly via Supabase client (bypasses API token requirements)\n      const {\n        data: existingUser\n      } = await supabase.from('users').select('*').eq('username', 'admin').single();\n      if (!existingUser) {\n        var _authData$user;\n        // First create auth user\n        const {\n          data: authData,\n          error: authError\n        } = await supabase.auth.signUp({\n          email: 'admin@casino.com',\n          password: 'admin123',\n          options: {\n            data: {\n              username: 'admin',\n              role: 'admin'\n            }\n          }\n        });\n        if (authError && !authError.message.includes('already registered')) {\n          throw authError;\n        }\n\n        // Then create user profile\n        const userId = (authData === null || authData === void 0 ? void 0 : (_authData$user = authData.user) === null || _authData$user === void 0 ? void 0 : _authData$user.id) || 'admin-1';\n        const {\n          error: profileError\n        } = await supabase.from('users').insert([{\n          id: userId,\n          username: 'admin',\n          password: 'admin123',\n          role: 'admin'\n        }]);\n        if (profileError && !profileError.message.includes('duplicate')) {\n          console.warn('Profile creation failed:', profileError);\n        }\n        console.log('✅ Admin user initialized');\n      }\n    } catch (error) {\n      console.error('Error initializing sample data:', error);\n    }\n  }\n\n  // Login method for authentication\n  async login(username, password) {\n    try {\n      var _responseData$data;\n      console.log('🔐 DatabaseWrapper: Starting login process...');\n      const response = await apiClient.login(username, password);\n      console.log('🔐 DatabaseWrapper: Login response:', response);\n      if (!response.success) {\n        throw new Error(response.error || 'Login failed');\n      }\n\n      // ApiClient now handles token storage automatically\n      // Just extract the user data from the response\n      const responseData = response.data;\n      let user = null;\n      let token = null;\n      if (responseData !== null && responseData !== void 0 && (_responseData$data = responseData.data) !== null && _responseData$data !== void 0 && _responseData$data.user) {\n        user = responseData.data.user;\n        token = responseData.data.token;\n      } else if (responseData !== null && responseData !== void 0 && responseData.user) {\n        user = responseData.user;\n        token = responseData.token;\n      } else {\n        // Fallback - create user from response data\n        user = {\n          id: (responseData === null || responseData === void 0 ? void 0 : responseData.id) || 'admin-1',\n          username: (responseData === null || responseData === void 0 ? void 0 : responseData.username) || username,\n          role: (responseData === null || responseData === void 0 ? void 0 : responseData.role) || 'admin'\n        };\n      }\n      console.log('🔑 DatabaseWrapper: User extracted:', user);\n      console.log('🔑 DatabaseWrapper: Token present:', token ? 'YES' : 'NO');\n\n      // ApiClient already saved to localStorage and set tokens\n      // Just return the user object\n      return user;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Clear all data for fresh start\n  async clearAllDataForFreshStart() {\n    try {\n      console.log('⚠️ Clear data operation should be handled by backend API');\n      // This would need to be implemented as an admin endpoint\n      return true;\n    } catch (error) {\n      console.error('Error during fresh start:', error);\n      throw error;\n    }\n  }\n\n  // Export all data\n  async exportAllData() {\n    try {\n      const exportData = {};\n      const tables = ['users', 'agents', 'customers', 'trips', 'transactions'];\n      for (const table of tables) {\n        const data = await this.get(table, []);\n        exportData[table] = data || [];\n      }\n      return exportData;\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      throw error;\n    }\n  }\n\n  // Import all data\n  async importAllData(data) {\n    try {\n      const tables = ['users', 'agents', 'customers', 'trips', 'transactions'];\n      for (const table of tables) {\n        if (data[table] && Array.isArray(data[table]) && data[table].length > 0) {\n          await this.save(table, data[table]);\n        }\n      }\n      return true;\n    } catch (error) {\n      console.error('Error importing data:', error);\n      return false;\n    }\n  }\n\n  // Get database statistics\n  getStats() {\n    return {\n      mode: 'api',\n      healthy: true,\n      lastHealthCheck: new Date().toISOString(),\n      backupCount: 0\n    };\n  }\n\n  // Get available backups\n  getAvailableBackups() {\n    return [];\n  }\n\n  // Staff management methods\n  async getStaffs() {\n    try {\n      console.log('📋 DatabaseWrapper: Fetching all staff members...');\n      const response = await apiClient.getStaffs();\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to fetch staff members');\n      }\n      return response.data || [];\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error fetching staff:', error);\n      throw error;\n    }\n  }\n  async getStaff(id) {\n    try {\n      console.log(`📋 DatabaseWrapper: Fetching staff member: ${id}`);\n      const response = await apiClient.getStaff(id);\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to fetch staff member');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error fetching staff:', error);\n      throw error;\n    }\n  }\n  async createStaff(staffData) {\n    try {\n      console.log('👤 DatabaseWrapper: Creating staff member...');\n      const response = await apiClient.createStaff(staffData);\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to create staff member');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error creating staff:', error);\n      throw error;\n    }\n  }\n  async updateStaff(id, staffData) {\n    try {\n      console.log(`👤 DatabaseWrapper: Updating staff member: ${id}`);\n      const response = await apiClient.updateStaff(id, staffData);\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to update staff member');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error updating staff:', error);\n      throw error;\n    }\n  }\n  async deleteStaff(id) {\n    try {\n      console.log(`🗑️ DatabaseWrapper: Deleting staff member: ${id}`);\n      const response = await apiClient.deleteStaff(id);\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to delete staff member');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error deleting staff:', error);\n      throw error;\n    }\n  }\n  async staffCheckIn(id, checkInData) {\n    try {\n      console.log(`⏰ DatabaseWrapper: Staff check-in: ${id}`);\n      const response = await apiClient.staffCheckIn(id, checkInData);\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to check in staff member');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error checking in staff:', error);\n      throw error;\n    }\n  }\n  async staffCheckOut(id, checkOutData) {\n    try {\n      console.log(`⏰ DatabaseWrapper: Staff check-out: ${id}`);\n      const response = await apiClient.staffCheckOut(id, checkOutData);\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to check out staff member');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error checking out staff:', error);\n      throw error;\n    }\n  }\n  async getStaffShifts(id, params) {\n    try {\n      console.log(`📋 DatabaseWrapper: Fetching shifts for staff: ${id}`);\n      const response = await apiClient.getStaffShifts(id, params);\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to fetch staff shifts');\n      }\n      return response.data || [];\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error fetching staff shifts:', error);\n      throw error;\n    }\n  }\n  async getStaffRollingRecords(id, params) {\n    try {\n      console.log(`📋 DatabaseWrapper: Fetching rolling records for staff: ${id}`);\n      const response = await apiClient.getStaffRollingRecords(id, params);\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to fetch staff rolling records');\n      }\n      return response.data || [];\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error fetching staff rolling records:', error);\n      throw error;\n    }\n  }\n}\n\n// Export the wrapped database instance\nexport const db = new DatabaseWrapper();","map":{"version":3,"names":["apiClient","supabase","DatabaseWrapper","constructor","testConnection","apiUrl","process","env","REACT_APP_API_URL","response","fetch","replace","data","json","ok","status","success","message","details","error","isHealthy","connectionTest","err","console","get","table","filters","usersResponse","getUsers","customersResponse","getCustomers","agentsResponse","getAgents","tripsResponse","getTrips","transactionsResponse","getTransactions","staffResponse","getStaffs","rollingResponse","warn","length","filter","item","every","column","value","undefined","save","results","record","result","createUser","createCustomer","createAgent","createTrip","createTransaction","Error","push","initializeTables","log","initializeSampleDataIfNeeded","existingUser","from","select","eq","single","_authData$user","authData","authError","auth","signUp","email","password","options","username","role","includes","userId","user","id","profileError","insert","login","_responseData$data","responseData","token","clearAllDataForFreshStart","exportAllData","exportData","tables","importAllData","Array","isArray","getStats","mode","healthy","lastHealthCheck","Date","toISOString","backupCount","getAvailableBackups","getStaff","createStaff","staffData","updateStaff","deleteStaff","staffCheckIn","checkInData","staffCheckOut","checkOutData","getStaffShifts","params","getStaffRollingRecords","db"],"sources":["/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/src/utils/api/databaseWrapper.ts"],"sourcesContent":["// Database wrapper that uses backend API instead of direct Supabase calls\nimport { apiClient } from './apiClient';\nimport { supabase } from '../supabase/supabaseClients';\n\nexport class DatabaseWrapper {\n  // Expose API client for direct access to customer methods\n  public apiClient = apiClient;\n  async testConnection() {\n    try {\n      // Test backend API health\n      const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n      const response = await fetch(`${apiUrl?.replace('/api', '')}/health`);\n      const data = await response.json();\n      \n      if (response.ok && data.status === 'OK') {\n        return {\n          success: true,\n          message: 'Connected successfully',\n          details: 'Backend API connection is healthy'\n        };\n      } else {\n        return {\n          success: false,\n          message: 'Connection failed',\n          details: 'Backend API is not responding'\n        };\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        message: 'Connection error',\n        details: error.message\n      };\n    }\n  }\n\n  async isHealthy() {\n    try {\n      const connectionTest = await this.testConnection();\n      return connectionTest.success;\n    } catch (err) {\n      console.error('❌ Database health check error:', err);\n      return false;\n    }\n  }\n\n  async get(table: string, filters: Array<{column: string, value: any}> = []) {\n    try {\n      let data = [];\n      \n      switch (table) {\n        case 'users':\n          const usersResponse = await apiClient.getUsers();\n          data = usersResponse.success ? (usersResponse.data as any[]) || [] : [];\n          break;\n        case 'customers':\n          const customersResponse = await apiClient.getCustomers();\n          data = customersResponse.success ? (customersResponse.data as any[]) || [] : [];\n          break;\n        case 'agents':\n          const agentsResponse = await apiClient.getAgents();\n          data = agentsResponse.success ? (agentsResponse.data as any[]) || [] : [];\n          break;\n        case 'trips':\n          const tripsResponse = await apiClient.getTrips();\n          data = tripsResponse.success ? (tripsResponse.data as any[]) || [] : [];\n          break;\n        case 'transactions':\n          const transactionsResponse = await apiClient.getTransactions();\n          data = transactionsResponse.success ? (transactionsResponse.data as any[]) || [] : [];\n          break;\n        case 'staff':\n          const staffResponse = await apiClient.getStaffs();\n          data = staffResponse.success ? (staffResponse.data as any[]) || [] : [];\n          break;\n        case 'rolling_records':\n          const rollingResponse = await apiClient.get('/rolling-records');\n          data = rollingResponse.success ? (rollingResponse.data as any[]) || [] : [];\n          break;\n        default:\n          console.warn(`Table ${table} not supported in API wrapper`);\n          return [];\n      }\n\n      // Apply filters if provided\n      if (filters.length > 0) {\n        data = data.filter((item: any) => {\n          return filters.every(filter => {\n            if (filter.column && filter.value !== undefined) {\n              return item[filter.column] === filter.value;\n            }\n            return true;\n          });\n        });\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error(`Error fetching from ${table}:`, error);\n      return [];\n    }\n  }\n\n  async save(table: string, data: any[]) {\n    try {\n      // For now, we'll handle single record creation\n      // In a real implementation, you'd want batch operations\n      const results = [];\n      \n      for (const record of data) {\n        let result;\n        \n        switch (table) {\n          case 'users':\n            result = await apiClient.createUser(record);\n            break;\n          case 'customers':\n            result = await apiClient.createCustomer(record);\n            break;\n          case 'agents':\n            result = await apiClient.createAgent(record);\n            break;\n          case 'trips':\n            result = await apiClient.createTrip(record);\n            break;\n          case 'transactions':\n            result = await apiClient.createTransaction(record);\n            break;\n          default:\n            throw new Error(`Table ${table} not supported for save operation`);\n        }\n        \n        results.push(result);\n      }\n      \n      return { success: true, results };\n    } catch (error) {\n      console.error(`Error saving to ${table}:`, error);\n      throw error;\n    }\n  }\n\n  async initializeTables() {\n    try {\n      console.log('🔄 Backend API handles table initialization...');\n      // Backend API handles table initialization\n      return true;\n    } catch (error) {\n      console.error('❌ Database initialization failed:', error);\n      throw error;\n    }\n  }\n\n  async initializeSampleDataIfNeeded() {\n    try {\n      // Create admin user directly via Supabase client (bypasses API token requirements)\n      const { data: existingUser } = await supabase\n        .from('users')\n        .select('*')\n        .eq('username', 'admin')\n        .single();\n      \n      if (!existingUser) {\n        // First create auth user\n        const { data: authData, error: authError } = await supabase.auth.signUp({\n          email: 'admin@casino.com',\n          password: 'admin123',\n          options: {\n            data: {\n              username: 'admin',\n              role: 'admin'\n            }\n          }\n        });\n\n        if (authError && !authError.message.includes('already registered')) {\n          throw authError;\n        }\n\n        // Then create user profile\n        const userId = authData?.user?.id || 'admin-1';\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert([{\n            id: userId,\n            username: 'admin',\n            password: 'admin123',\n            role: 'admin'\n          }]);\n\n        if (profileError && !profileError.message.includes('duplicate')) {\n          console.warn('Profile creation failed:', profileError);\n        }\n        \n        console.log('✅ Admin user initialized');\n      }\n    } catch (error) {\n      console.error('Error initializing sample data:', error);\n    }\n  }\n\n  // Login method for authentication\n  async login(username: string, password: string) {\n    try {\n      console.log('🔐 DatabaseWrapper: Starting login process...');\n      const response = await apiClient.login(username, password);\n      console.log('🔐 DatabaseWrapper: Login response:', response);\n      \n      if (!response.success) {\n        throw new Error((response as any).error || 'Login failed');\n      }\n      \n      // ApiClient now handles token storage automatically\n      // Just extract the user data from the response\n      const responseData = response.data as any;\n      let user = null;\n      let token = null;\n      \n      if (responseData?.data?.user) {\n        user = responseData.data.user;\n        token = responseData.data.token;\n      } else if (responseData?.user) {\n        user = responseData.user;\n        token = responseData.token;\n      } else {\n        // Fallback - create user from response data\n        user = {\n          id: responseData?.id || 'admin-1',\n          username: responseData?.username || username,\n          role: responseData?.role || 'admin'\n        };\n      }\n      \n      console.log('🔑 DatabaseWrapper: User extracted:', user);\n      console.log('🔑 DatabaseWrapper: Token present:', token ? 'YES' : 'NO');\n      \n      // ApiClient already saved to localStorage and set tokens\n      // Just return the user object\n      return user;\n      \n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Clear all data for fresh start\n  async clearAllDataForFreshStart() {\n    try {\n      console.log('⚠️ Clear data operation should be handled by backend API');\n      // This would need to be implemented as an admin endpoint\n      return true;\n    } catch (error) {\n      console.error('Error during fresh start:', error);\n      throw error;\n    }\n  }\n\n  // Export all data\n  async exportAllData() {\n    try {\n      const exportData: any = {};\n      \n      const tables = ['users', 'agents', 'customers', 'trips', 'transactions'];\n      \n      for (const table of tables) {\n        const data = await this.get(table, []);\n        exportData[table] = data || [];\n      }\n      \n      return exportData;\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      throw error;\n    }\n  }\n\n  // Import all data\n  async importAllData(data: any) {\n    try {\n      const tables = ['users', 'agents', 'customers', 'trips', 'transactions'];\n      \n      for (const table of tables) {\n        if (data[table] && Array.isArray(data[table]) && data[table].length > 0) {\n          await this.save(table, data[table]);\n        }\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error importing data:', error);\n      return false;\n    }\n  }\n\n  // Get database statistics\n  getStats() {\n    return {\n      mode: 'api',\n      healthy: true,\n      lastHealthCheck: new Date().toISOString(),\n      backupCount: 0\n    };\n  }\n\n  // Get available backups\n  getAvailableBackups() {\n    return [];\n  }\n\n  // Staff management methods\n  async getStaffs() {\n    try {\n      console.log('📋 DatabaseWrapper: Fetching all staff members...');\n      const response = await apiClient.getStaffs();\n      \n      if (!response.success) {\n        throw new Error(response.error || 'Failed to fetch staff members');\n      }\n      \n      return response.data || [];\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error fetching staff:', error);\n      throw error;\n    }\n  }\n\n  async getStaff(id: string) {\n    try {\n      console.log(`📋 DatabaseWrapper: Fetching staff member: ${id}`);\n      const response = await apiClient.getStaff(id);\n      \n      if (!response.success) {\n        throw new Error(response.error || 'Failed to fetch staff member');\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error fetching staff:', error);\n      throw error;\n    }\n  }\n\n  async createStaff(staffData: any) {\n    try {\n      console.log('👤 DatabaseWrapper: Creating staff member...');\n      const response = await apiClient.createStaff(staffData);\n      \n      if (!response.success) {\n        throw new Error(response.error || 'Failed to create staff member');\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error creating staff:', error);\n      throw error;\n    }\n  }\n\n  async updateStaff(id: string, staffData: any) {\n    try {\n      console.log(`👤 DatabaseWrapper: Updating staff member: ${id}`);\n      const response = await apiClient.updateStaff(id, staffData);\n      \n      if (!response.success) {\n        throw new Error(response.error || 'Failed to update staff member');\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error updating staff:', error);\n      throw error;\n    }\n  }\n\n  async deleteStaff(id: string) {\n    try {\n      console.log(`🗑️ DatabaseWrapper: Deleting staff member: ${id}`);\n      const response = await apiClient.deleteStaff(id);\n      \n      if (!response.success) {\n        throw new Error(response.error || 'Failed to delete staff member');\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error deleting staff:', error);\n      throw error;\n    }\n  }\n\n  async staffCheckIn(id: string, checkInData: any) {\n    try {\n      console.log(`⏰ DatabaseWrapper: Staff check-in: ${id}`);\n      const response = await apiClient.staffCheckIn(id, checkInData);\n      \n      if (!response.success) {\n        throw new Error(response.error || 'Failed to check in staff member');\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error checking in staff:', error);\n      throw error;\n    }\n  }\n\n  async staffCheckOut(id: string, checkOutData: any) {\n    try {\n      console.log(`⏰ DatabaseWrapper: Staff check-out: ${id}`);\n      const response = await apiClient.staffCheckOut(id, checkOutData);\n      \n      if (!response.success) {\n        throw new Error(response.error || 'Failed to check out staff member');\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error checking out staff:', error);\n      throw error;\n    }\n  }\n\n  async getStaffShifts(id: string, params?: any) {\n    try {\n      console.log(`📋 DatabaseWrapper: Fetching shifts for staff: ${id}`);\n      const response = await apiClient.getStaffShifts(id, params);\n      \n      if (!response.success) {\n        throw new Error(response.error || 'Failed to fetch staff shifts');\n      }\n      \n      return response.data || [];\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error fetching staff shifts:', error);\n      throw error;\n    }\n  }\n\n  async getStaffRollingRecords(id: string, params?: any) {\n    try {\n      console.log(`📋 DatabaseWrapper: Fetching rolling records for staff: ${id}`);\n      const response = await apiClient.getStaffRollingRecords(id, params);\n      \n      if (!response.success) {\n        throw new Error(response.error || 'Failed to fetch staff rolling records');\n      }\n      \n      return response.data || [];\n    } catch (error) {\n      console.error('❌ DatabaseWrapper: Error fetching staff rolling records:', error);\n      throw error;\n    }\n  }\n}\n\n// Export the wrapped database instance\nexport const db = new DatabaseWrapper();\n"],"mappings":"AAAA;AACA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,QAAQ,QAAQ,6BAA6B;AAEtD,OAAO,MAAMC,eAAe,CAAC;EAAAC,YAAA;IAC3B;IAAA,KACOH,SAAS,GAAGA,SAAS;EAAA;EAC5B,MAAMI,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF;MACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;MACvE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEM,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,SAAS,CAAC;MACrE,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAElC,IAAIJ,QAAQ,CAACK,EAAE,IAAIF,IAAI,CAACG,MAAM,KAAK,IAAI,EAAE;QACvC,OAAO;UACLC,OAAO,EAAE,IAAI;UACbC,OAAO,EAAE,wBAAwB;UACjCC,OAAO,EAAE;QACX,CAAC;MACH,CAAC,MAAM;QACL,OAAO;UACLF,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE,mBAAmB;UAC5BC,OAAO,EAAE;QACX,CAAC;MACH;IACF,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnB,OAAO;QACLH,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,kBAAkB;QAC3BC,OAAO,EAAEC,KAAK,CAACF;MACjB,CAAC;IACH;EACF;EAEA,MAAMG,SAASA,CAAA,EAAG;IAChB,IAAI;MACF,MAAMC,cAAc,GAAG,MAAM,IAAI,CAACjB,cAAc,CAAC,CAAC;MAClD,OAAOiB,cAAc,CAACL,OAAO;IAC/B,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZC,OAAO,CAACJ,KAAK,CAAC,gCAAgC,EAAEG,GAAG,CAAC;MACpD,OAAO,KAAK;IACd;EACF;EAEA,MAAME,GAAGA,CAACC,KAAa,EAAEC,OAA4C,GAAG,EAAE,EAAE;IAC1E,IAAI;MACF,IAAId,IAAI,GAAG,EAAE;MAEb,QAAQa,KAAK;QACX,KAAK,OAAO;UACV,MAAME,aAAa,GAAG,MAAM3B,SAAS,CAAC4B,QAAQ,CAAC,CAAC;UAChDhB,IAAI,GAAGe,aAAa,CAACX,OAAO,GAAIW,aAAa,CAACf,IAAI,IAAc,EAAE,GAAG,EAAE;UACvE;QACF,KAAK,WAAW;UACd,MAAMiB,iBAAiB,GAAG,MAAM7B,SAAS,CAAC8B,YAAY,CAAC,CAAC;UACxDlB,IAAI,GAAGiB,iBAAiB,CAACb,OAAO,GAAIa,iBAAiB,CAACjB,IAAI,IAAc,EAAE,GAAG,EAAE;UAC/E;QACF,KAAK,QAAQ;UACX,MAAMmB,cAAc,GAAG,MAAM/B,SAAS,CAACgC,SAAS,CAAC,CAAC;UAClDpB,IAAI,GAAGmB,cAAc,CAACf,OAAO,GAAIe,cAAc,CAACnB,IAAI,IAAc,EAAE,GAAG,EAAE;UACzE;QACF,KAAK,OAAO;UACV,MAAMqB,aAAa,GAAG,MAAMjC,SAAS,CAACkC,QAAQ,CAAC,CAAC;UAChDtB,IAAI,GAAGqB,aAAa,CAACjB,OAAO,GAAIiB,aAAa,CAACrB,IAAI,IAAc,EAAE,GAAG,EAAE;UACvE;QACF,KAAK,cAAc;UACjB,MAAMuB,oBAAoB,GAAG,MAAMnC,SAAS,CAACoC,eAAe,CAAC,CAAC;UAC9DxB,IAAI,GAAGuB,oBAAoB,CAACnB,OAAO,GAAImB,oBAAoB,CAACvB,IAAI,IAAc,EAAE,GAAG,EAAE;UACrF;QACF,KAAK,OAAO;UACV,MAAMyB,aAAa,GAAG,MAAMrC,SAAS,CAACsC,SAAS,CAAC,CAAC;UACjD1B,IAAI,GAAGyB,aAAa,CAACrB,OAAO,GAAIqB,aAAa,CAACzB,IAAI,IAAc,EAAE,GAAG,EAAE;UACvE;QACF,KAAK,iBAAiB;UACpB,MAAM2B,eAAe,GAAG,MAAMvC,SAAS,CAACwB,GAAG,CAAC,kBAAkB,CAAC;UAC/DZ,IAAI,GAAG2B,eAAe,CAACvB,OAAO,GAAIuB,eAAe,CAAC3B,IAAI,IAAc,EAAE,GAAG,EAAE;UAC3E;QACF;UACEW,OAAO,CAACiB,IAAI,CAAC,SAASf,KAAK,+BAA+B,CAAC;UAC3D,OAAO,EAAE;MACb;;MAEA;MACA,IAAIC,OAAO,CAACe,MAAM,GAAG,CAAC,EAAE;QACtB7B,IAAI,GAAGA,IAAI,CAAC8B,MAAM,CAAEC,IAAS,IAAK;UAChC,OAAOjB,OAAO,CAACkB,KAAK,CAACF,MAAM,IAAI;YAC7B,IAAIA,MAAM,CAACG,MAAM,IAAIH,MAAM,CAACI,KAAK,KAAKC,SAAS,EAAE;cAC/C,OAAOJ,IAAI,CAACD,MAAM,CAACG,MAAM,CAAC,KAAKH,MAAM,CAACI,KAAK;YAC7C;YACA,OAAO,IAAI;UACb,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;MAEA,OAAOlC,IAAI,IAAI,EAAE;IACnB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,uBAAuBM,KAAK,GAAG,EAAEN,KAAK,CAAC;MACrD,OAAO,EAAE;IACX;EACF;EAEA,MAAM6B,IAAIA,CAACvB,KAAa,EAAEb,IAAW,EAAE;IACrC,IAAI;MACF;MACA;MACA,MAAMqC,OAAO,GAAG,EAAE;MAElB,KAAK,MAAMC,MAAM,IAAItC,IAAI,EAAE;QACzB,IAAIuC,MAAM;QAEV,QAAQ1B,KAAK;UACX,KAAK,OAAO;YACV0B,MAAM,GAAG,MAAMnD,SAAS,CAACoD,UAAU,CAACF,MAAM,CAAC;YAC3C;UACF,KAAK,WAAW;YACdC,MAAM,GAAG,MAAMnD,SAAS,CAACqD,cAAc,CAACH,MAAM,CAAC;YAC/C;UACF,KAAK,QAAQ;YACXC,MAAM,GAAG,MAAMnD,SAAS,CAACsD,WAAW,CAACJ,MAAM,CAAC;YAC5C;UACF,KAAK,OAAO;YACVC,MAAM,GAAG,MAAMnD,SAAS,CAACuD,UAAU,CAACL,MAAM,CAAC;YAC3C;UACF,KAAK,cAAc;YACjBC,MAAM,GAAG,MAAMnD,SAAS,CAACwD,iBAAiB,CAACN,MAAM,CAAC;YAClD;UACF;YACE,MAAM,IAAIO,KAAK,CAAC,SAAShC,KAAK,mCAAmC,CAAC;QACtE;QAEAwB,OAAO,CAACS,IAAI,CAACP,MAAM,CAAC;MACtB;MAEA,OAAO;QAAEnC,OAAO,EAAE,IAAI;QAAEiC;MAAQ,CAAC;IACnC,CAAC,CAAC,OAAO9B,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,mBAAmBM,KAAK,GAAG,EAAEN,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMwC,gBAAgBA,CAAA,EAAG;IACvB,IAAI;MACFpC,OAAO,CAACqC,GAAG,CAAC,gDAAgD,CAAC;MAC7D;MACA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOzC,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF;EAEA,MAAM0C,4BAA4BA,CAAA,EAAG;IACnC,IAAI;MACF;MACA,MAAM;QAAEjD,IAAI,EAAEkD;MAAa,CAAC,GAAG,MAAM7D,QAAQ,CAC1C8D,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,CACvBC,MAAM,CAAC,CAAC;MAEX,IAAI,CAACJ,YAAY,EAAE;QAAA,IAAAK,cAAA;QACjB;QACA,MAAM;UAAEvD,IAAI,EAAEwD,QAAQ;UAAEjD,KAAK,EAAEkD;QAAU,CAAC,GAAG,MAAMpE,QAAQ,CAACqE,IAAI,CAACC,MAAM,CAAC;UACtEC,KAAK,EAAE,kBAAkB;UACzBC,QAAQ,EAAE,UAAU;UACpBC,OAAO,EAAE;YACP9D,IAAI,EAAE;cACJ+D,QAAQ,EAAE,OAAO;cACjBC,IAAI,EAAE;YACR;UACF;QACF,CAAC,CAAC;QAEF,IAAIP,SAAS,IAAI,CAACA,SAAS,CAACpD,OAAO,CAAC4D,QAAQ,CAAC,oBAAoB,CAAC,EAAE;UAClE,MAAMR,SAAS;QACjB;;QAEA;QACA,MAAMS,MAAM,GAAG,CAAAV,QAAQ,aAARA,QAAQ,wBAAAD,cAAA,GAARC,QAAQ,CAAEW,IAAI,cAAAZ,cAAA,uBAAdA,cAAA,CAAgBa,EAAE,KAAI,SAAS;QAC9C,MAAM;UAAE7D,KAAK,EAAE8D;QAAa,CAAC,GAAG,MAAMhF,QAAQ,CAC3C8D,IAAI,CAAC,OAAO,CAAC,CACbmB,MAAM,CAAC,CAAC;UACPF,EAAE,EAAEF,MAAM;UACVH,QAAQ,EAAE,OAAO;UACjBF,QAAQ,EAAE,UAAU;UACpBG,IAAI,EAAE;QACR,CAAC,CAAC,CAAC;QAEL,IAAIK,YAAY,IAAI,CAACA,YAAY,CAAChE,OAAO,CAAC4D,QAAQ,CAAC,WAAW,CAAC,EAAE;UAC/DtD,OAAO,CAACiB,IAAI,CAAC,0BAA0B,EAAEyC,YAAY,CAAC;QACxD;QAEA1D,OAAO,CAACqC,GAAG,CAAC,0BAA0B,CAAC;MACzC;IACF,CAAC,CAAC,OAAOzC,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF;;EAEA;EACA,MAAMgE,KAAKA,CAACR,QAAgB,EAAEF,QAAgB,EAAE;IAC9C,IAAI;MAAA,IAAAW,kBAAA;MACF7D,OAAO,CAACqC,GAAG,CAAC,+CAA+C,CAAC;MAC5D,MAAMnD,QAAQ,GAAG,MAAMT,SAAS,CAACmF,KAAK,CAACR,QAAQ,EAAEF,QAAQ,CAAC;MAC1DlD,OAAO,CAACqC,GAAG,CAAC,qCAAqC,EAAEnD,QAAQ,CAAC;MAE5D,IAAI,CAACA,QAAQ,CAACO,OAAO,EAAE;QACrB,MAAM,IAAIyC,KAAK,CAAEhD,QAAQ,CAASU,KAAK,IAAI,cAAc,CAAC;MAC5D;;MAEA;MACA;MACA,MAAMkE,YAAY,GAAG5E,QAAQ,CAACG,IAAW;MACzC,IAAImE,IAAI,GAAG,IAAI;MACf,IAAIO,KAAK,GAAG,IAAI;MAEhB,IAAID,YAAY,aAAZA,YAAY,gBAAAD,kBAAA,GAAZC,YAAY,CAAEzE,IAAI,cAAAwE,kBAAA,eAAlBA,kBAAA,CAAoBL,IAAI,EAAE;QAC5BA,IAAI,GAAGM,YAAY,CAACzE,IAAI,CAACmE,IAAI;QAC7BO,KAAK,GAAGD,YAAY,CAACzE,IAAI,CAAC0E,KAAK;MACjC,CAAC,MAAM,IAAID,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEN,IAAI,EAAE;QAC7BA,IAAI,GAAGM,YAAY,CAACN,IAAI;QACxBO,KAAK,GAAGD,YAAY,CAACC,KAAK;MAC5B,CAAC,MAAM;QACL;QACAP,IAAI,GAAG;UACLC,EAAE,EAAE,CAAAK,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEL,EAAE,KAAI,SAAS;UACjCL,QAAQ,EAAE,CAAAU,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEV,QAAQ,KAAIA,QAAQ;UAC5CC,IAAI,EAAE,CAAAS,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAET,IAAI,KAAI;QAC9B,CAAC;MACH;MAEArD,OAAO,CAACqC,GAAG,CAAC,qCAAqC,EAAEmB,IAAI,CAAC;MACxDxD,OAAO,CAACqC,GAAG,CAAC,oCAAoC,EAAE0B,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC;;MAEvE;MACA;MACA,OAAOP,IAAI;IAEb,CAAC,CAAC,OAAO5D,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMoE,yBAAyBA,CAAA,EAAG;IAChC,IAAI;MACFhE,OAAO,CAACqC,GAAG,CAAC,0DAA0D,CAAC;MACvE;MACA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOzC,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMqE,aAAaA,CAAA,EAAG;IACpB,IAAI;MACF,MAAMC,UAAe,GAAG,CAAC,CAAC;MAE1B,MAAMC,MAAM,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,cAAc,CAAC;MAExE,KAAK,MAAMjE,KAAK,IAAIiE,MAAM,EAAE;QAC1B,MAAM9E,IAAI,GAAG,MAAM,IAAI,CAACY,GAAG,CAACC,KAAK,EAAE,EAAE,CAAC;QACtCgE,UAAU,CAAChE,KAAK,CAAC,GAAGb,IAAI,IAAI,EAAE;MAChC;MAEA,OAAO6E,UAAU;IACnB,CAAC,CAAC,OAAOtE,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMwE,aAAaA,CAAC/E,IAAS,EAAE;IAC7B,IAAI;MACF,MAAM8E,MAAM,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,cAAc,CAAC;MAExE,KAAK,MAAMjE,KAAK,IAAIiE,MAAM,EAAE;QAC1B,IAAI9E,IAAI,CAACa,KAAK,CAAC,IAAImE,KAAK,CAACC,OAAO,CAACjF,IAAI,CAACa,KAAK,CAAC,CAAC,IAAIb,IAAI,CAACa,KAAK,CAAC,CAACgB,MAAM,GAAG,CAAC,EAAE;UACvE,MAAM,IAAI,CAACO,IAAI,CAACvB,KAAK,EAAEb,IAAI,CAACa,KAAK,CAAC,CAAC;QACrC;MACF;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAON,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,KAAK;IACd;EACF;;EAEA;EACA2E,QAAQA,CAAA,EAAG;IACT,OAAO;MACLC,IAAI,EAAE,KAAK;MACXC,OAAO,EAAE,IAAI;MACbC,eAAe,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACzCC,WAAW,EAAE;IACf,CAAC;EACH;;EAEA;EACAC,mBAAmBA,CAAA,EAAG;IACpB,OAAO,EAAE;EACX;;EAEA;EACA,MAAM/D,SAASA,CAAA,EAAG;IAChB,IAAI;MACFf,OAAO,CAACqC,GAAG,CAAC,mDAAmD,CAAC;MAChE,MAAMnD,QAAQ,GAAG,MAAMT,SAAS,CAACsC,SAAS,CAAC,CAAC;MAE5C,IAAI,CAAC7B,QAAQ,CAACO,OAAO,EAAE;QACrB,MAAM,IAAIyC,KAAK,CAAChD,QAAQ,CAACU,KAAK,IAAI,+BAA+B,CAAC;MACpE;MAEA,OAAOV,QAAQ,CAACG,IAAI,IAAI,EAAE;IAC5B,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,MAAMA,KAAK;IACb;EACF;EAEA,MAAMmF,QAAQA,CAACtB,EAAU,EAAE;IACzB,IAAI;MACFzD,OAAO,CAACqC,GAAG,CAAC,8CAA8CoB,EAAE,EAAE,CAAC;MAC/D,MAAMvE,QAAQ,GAAG,MAAMT,SAAS,CAACsG,QAAQ,CAACtB,EAAE,CAAC;MAE7C,IAAI,CAACvE,QAAQ,CAACO,OAAO,EAAE;QACrB,MAAM,IAAIyC,KAAK,CAAChD,QAAQ,CAACU,KAAK,IAAI,8BAA8B,CAAC;MACnE;MAEA,OAAOV,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,MAAMA,KAAK;IACb;EACF;EAEA,MAAMoF,WAAWA,CAACC,SAAc,EAAE;IAChC,IAAI;MACFjF,OAAO,CAACqC,GAAG,CAAC,8CAA8C,CAAC;MAC3D,MAAMnD,QAAQ,GAAG,MAAMT,SAAS,CAACuG,WAAW,CAACC,SAAS,CAAC;MAEvD,IAAI,CAAC/F,QAAQ,CAACO,OAAO,EAAE;QACrB,MAAM,IAAIyC,KAAK,CAAChD,QAAQ,CAACU,KAAK,IAAI,+BAA+B,CAAC;MACpE;MAEA,OAAOV,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,MAAMA,KAAK;IACb;EACF;EAEA,MAAMsF,WAAWA,CAACzB,EAAU,EAAEwB,SAAc,EAAE;IAC5C,IAAI;MACFjF,OAAO,CAACqC,GAAG,CAAC,8CAA8CoB,EAAE,EAAE,CAAC;MAC/D,MAAMvE,QAAQ,GAAG,MAAMT,SAAS,CAACyG,WAAW,CAACzB,EAAE,EAAEwB,SAAS,CAAC;MAE3D,IAAI,CAAC/F,QAAQ,CAACO,OAAO,EAAE;QACrB,MAAM,IAAIyC,KAAK,CAAChD,QAAQ,CAACU,KAAK,IAAI,+BAA+B,CAAC;MACpE;MAEA,OAAOV,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,MAAMA,KAAK;IACb;EACF;EAEA,MAAMuF,WAAWA,CAAC1B,EAAU,EAAE;IAC5B,IAAI;MACFzD,OAAO,CAACqC,GAAG,CAAC,+CAA+CoB,EAAE,EAAE,CAAC;MAChE,MAAMvE,QAAQ,GAAG,MAAMT,SAAS,CAAC0G,WAAW,CAAC1B,EAAE,CAAC;MAEhD,IAAI,CAACvE,QAAQ,CAACO,OAAO,EAAE;QACrB,MAAM,IAAIyC,KAAK,CAAChD,QAAQ,CAACU,KAAK,IAAI,+BAA+B,CAAC;MACpE;MAEA,OAAOV,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,MAAMA,KAAK;IACb;EACF;EAEA,MAAMwF,YAAYA,CAAC3B,EAAU,EAAE4B,WAAgB,EAAE;IAC/C,IAAI;MACFrF,OAAO,CAACqC,GAAG,CAAC,sCAAsCoB,EAAE,EAAE,CAAC;MACvD,MAAMvE,QAAQ,GAAG,MAAMT,SAAS,CAAC2G,YAAY,CAAC3B,EAAE,EAAE4B,WAAW,CAAC;MAE9D,IAAI,CAACnG,QAAQ,CAACO,OAAO,EAAE;QACrB,MAAM,IAAIyC,KAAK,CAAChD,QAAQ,CAACU,KAAK,IAAI,iCAAiC,CAAC;MACtE;MAEA,OAAOV,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,MAAMA,KAAK;IACb;EACF;EAEA,MAAM0F,aAAaA,CAAC7B,EAAU,EAAE8B,YAAiB,EAAE;IACjD,IAAI;MACFvF,OAAO,CAACqC,GAAG,CAAC,uCAAuCoB,EAAE,EAAE,CAAC;MACxD,MAAMvE,QAAQ,GAAG,MAAMT,SAAS,CAAC6G,aAAa,CAAC7B,EAAE,EAAE8B,YAAY,CAAC;MAEhE,IAAI,CAACrG,QAAQ,CAACO,OAAO,EAAE;QACrB,MAAM,IAAIyC,KAAK,CAAChD,QAAQ,CAACU,KAAK,IAAI,kCAAkC,CAAC;MACvE;MAEA,OAAOV,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MACpE,MAAMA,KAAK;IACb;EACF;EAEA,MAAM4F,cAAcA,CAAC/B,EAAU,EAAEgC,MAAY,EAAE;IAC7C,IAAI;MACFzF,OAAO,CAACqC,GAAG,CAAC,kDAAkDoB,EAAE,EAAE,CAAC;MACnE,MAAMvE,QAAQ,GAAG,MAAMT,SAAS,CAAC+G,cAAc,CAAC/B,EAAE,EAAEgC,MAAM,CAAC;MAE3D,IAAI,CAACvG,QAAQ,CAACO,OAAO,EAAE;QACrB,MAAM,IAAIyC,KAAK,CAAChD,QAAQ,CAACU,KAAK,IAAI,8BAA8B,CAAC;MACnE;MAEA,OAAOV,QAAQ,CAACG,IAAI,IAAI,EAAE;IAC5B,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACvE,MAAMA,KAAK;IACb;EACF;EAEA,MAAM8F,sBAAsBA,CAACjC,EAAU,EAAEgC,MAAY,EAAE;IACrD,IAAI;MACFzF,OAAO,CAACqC,GAAG,CAAC,2DAA2DoB,EAAE,EAAE,CAAC;MAC5E,MAAMvE,QAAQ,GAAG,MAAMT,SAAS,CAACiH,sBAAsB,CAACjC,EAAE,EAAEgC,MAAM,CAAC;MAEnE,IAAI,CAACvG,QAAQ,CAACO,OAAO,EAAE;QACrB,MAAM,IAAIyC,KAAK,CAAChD,QAAQ,CAACU,KAAK,IAAI,uCAAuC,CAAC;MAC5E;MAEA,OAAOV,QAAQ,CAACG,IAAI,IAAI,EAAE;IAC5B,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,0DAA0D,EAAEA,KAAK,CAAC;MAChF,MAAMA,KAAK;IACb;EACF;AACF;;AAEA;AACA,OAAO,MAAM+F,EAAE,GAAG,IAAIhH,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}