{"ast":null,"code":"import{createClient}from'@supabase/supabase-js';// Supabase configuration\nconst supabaseUrl='https://rtjdqnuzeupbgbovbriy.supabase.co';const supabaseAnonKey='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ0amRxbnV6ZXVwYmdib3Zicml5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyNjYwOTUsImV4cCI6MjA3MTg0MjA5NX0.5oJes7rJykxuGX0BZFDt4LpTmRJAgoh0wHRpmJ8HTng';// Create Supabase client\nexport const supabase=createClient(supabaseUrl,supabaseAnonKey);// Database types based on existing schema\n// Type-safe table access\n// Convenience types for common tables\n// Database wrapper with custom methods\nclass DatabaseWrapper{constructor(){this.client=supabase;}async testConnection(){try{const{count,error}=await this.client.from('users').select('*',{count:'exact',head:true});if(error){return{success:false,message:'Connection failed',details:error.message};}return{success:true,message:'Connected successfully',details:\"Users table has \".concat(count,\" rows\")};}catch(error){return{success:false,message:'Connection error',details:error.message};}}async isHealthy(){try{// Test basic connection first\nconst{error}=await this.client.from('users').select('id').limit(1);if(error){console.error('❌ Database connection failed:',error.message);if(error.message.includes('permission denied')){console.error('❌ Permission denied - check Supabase RLS policies and API key');return false;}return false;}// Test if users table exists\nconst{error:usersError}=await this.client.from('users').select('id').limit(1);if(usersError&&usersError.message.includes('does not exist')){console.log('⚠️ Users table does not exist - manual table creation required');return false;}return true;}catch(err){console.error('❌ Database health check error:',err);return false;}}async get(table){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];try{let query=this.client.from(table).select('*');// Apply filters if provided\nfor(const filter of filters){if(filter.column&&filter.value){query=query.eq(filter.column,filter.value);}}const{data,error}=await query;if(error)throw error;return data||[];}catch(error){console.error(\"Error fetching from \".concat(table,\":\"),error);return[];}}async save(table,data){try{const{error}=await this.client.from(table).upsert(data);if(error)throw error;return{success:true};}catch(error){console.error(\"Error saving to \".concat(table,\":\"),error);throw error;}}async initializeTables(){try{console.log('🔄 Attempting to initialize database tables...');// First, try to check if we have basic read access\nconst{error:readError}=await this.client.from('users').select('id').limit(1);if(readError){console.error('❌ No read access to database:',readError.message);throw new Error(\"Database access denied: \".concat(readError.message));}// Try to create a simple test table to check write permissions\nconst{error:createError}=await this.client.rpc('exec_sql',{sql:'CREATE TABLE IF NOT EXISTS test_permissions (id SERIAL PRIMARY KEY);'});if(createError){console.error('❌ No write permissions:',createError.message);throw new Error(\"Database write access denied: \".concat(createError.message));}// Clean up test table\nawait this.client.rpc('exec_sql',{sql:'DROP TABLE IF EXISTS test_permissions;'});console.log('✅ Database permissions verified');}catch(error){console.error('❌ Database initialization failed:',error);throw error;}}async createTablesDirectly(){try{// Create users table with direct SQL if RPC fails\nconst{error}=await this.client.from('users').select('id').limit(1);if(error&&error.message.includes('does not exist')){console.log('⚠️ Tables do not exist. Please create them manually in Supabase.');console.log('📋 Required tables: users, agents, customers, staff, trips, rolling_records, buy_in_out_records, staff_shifts');}}catch(err){console.error('Direct table creation failed:',err);}}async initializeSampleDataIfNeeded(){try{// Check if admin user exists\nconst{data:users}=await this.client.from('users').select('*').eq('username','admin');if(!users||users.length===0){// Create admin user\nawait this.client.from('users').insert([{id:'admin-1',username:'admin',password:'admin123',email:'admin@casino.com',role:'admin',status:'active'}]);console.log('✅ Admin user created');}}catch(error){console.error('Error initializing sample data:',error);}}// Login method for authentication\nasync login(username,password){try{const{data:users,error}=await this.client.from('users').select('*').eq('username',username).eq('password',password).single();if(error||!users){throw new Error('Invalid username or password');}return users;}catch(error){console.error('Login error:',error);throw error;}}// Clear all data for fresh start\nasync clearAllDataForFreshStart(){try{// Clear all tables in order (respecting foreign key constraints)\nconst tables=['rolling_records','buy_in_out_records','staff_shifts','trip_customers','trip_expenses','trips','customers','agents','staff','users'];for(const table of tables){await this.client.from(table).delete().neq('id','');}// Recreate admin user\nawait this.client.from('users').insert([{id:'admin-1',username:'admin',password:'admin123',role:'admin',status:'active'}]);console.log('✅ Fresh start completed - all data cleared and admin recreated');}catch(error){console.error('Error during fresh start:',error);throw error;}}// Export all data\nasync exportAllData(){try{const tables=['users','agents','customers','staff','trips','rolling_records','buy_in_out_records','staff_shifts'];const exportData={};for(const table of tables){const{data,error}=await this.client.from(table).select('*');if(error)throw error;exportData[table]=data||[];}return exportData;}catch(error){console.error('Error exporting data:',error);throw error;}}// Import all data\nasync importAllData(data){try{const tables=['users','agents','customers','staff','trips','rolling_records','buy_in_out_records','staff_shifts'];for(const table of tables){if(data[table]&&Array.isArray(data[table])&&data[table].length>0){const{error}=await this.client.from(table).insert(data[table]);if(error)throw error;}}return true;}catch(error){console.error('Error importing data:',error);return false;}}// Restore from backup (placeholder implementation)\nasync restoreFromBackup(key,timestamp){try{// This is a placeholder - in a real implementation, you would restore from actual backup storage\nconst timestampNum=typeof timestamp==='string'?parseInt(timestamp):timestamp;console.log(\"Restoring from backup: \".concat(key,\" at \").concat(new Date(timestampNum).toISOString()));return true;}catch(error){console.error('Error restoring from backup:',error);return false;}}// Get database statistics\ngetStats(){return{mode:'production',healthy:true,lastHealthCheck:new Date().toISOString(),backupCount:2};}// Get available backups\ngetAvailableBackups(){return[{key:'backup_2024_01_01',timestamp:new Date(Date.now()-86400000).toISOString(),size:1200000,description:'Daily backup'},{key:'backup_2024_01_02',timestamp:new Date(Date.now()-43200000).toISOString(),size:1500000,description:'Manual backup'}];}// Expose the original supabase client for direct access\nget supabase(){return this.client;}}// Export the wrapped database instance\nexport const db=new DatabaseWrapper();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}