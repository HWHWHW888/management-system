{"ast":null,"code":"var _TokenManager;\n// Centralized token management for authentication\nimport { supabase } from '../supabase/supabaseClients';\nexport class TokenManager {\n  constructor() {\n    this.token = undefined;\n    this.refreshPromise = null;\n    this.initializeToken();\n  }\n  static getInstance() {\n    if (!TokenManager.instance) {\n      TokenManager.instance = new TokenManager();\n    }\n    return TokenManager.instance;\n  }\n  async initializeToken() {\n    await this.getToken();\n  }\n  async getToken() {\n    console.log('üîç TokenManager: Getting token...');\n\n    // If we have a cached token, return it\n    if (this.token) {\n      console.log('üîë TokenManager: Returning cached token');\n      return this.token;\n    }\n\n    // Check localStorage for different possible token storage formats\n    const storedUser = localStorage.getItem('casinoUser');\n    console.log('üîç TokenManager: localStorage data:', storedUser);\n    if (storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        console.log('üîç TokenManager: Parsed user data:', userData);\n        console.log('üîç TokenManager: userData keys:', Object.keys(userData));\n\n        // Check for token in different possible fields\n        const possibleTokenFields = ['token', 'access_token', 'jwt', 'authToken'];\n        for (const field of possibleTokenFields) {\n          if (userData[field]) {\n            this.token = userData[field];\n            console.log(`üîë TokenManager: Found token in localStorage field '${field}':`, userData[field].substring(0, 20) + '...');\n            return userData[field];\n          }\n        }\n        console.log('‚ùå TokenManager: No token field found in localStorage data');\n        console.log('‚ùå TokenManager: Available fields:', Object.keys(userData));\n      } catch (error) {\n        console.error('Error parsing stored user data:', error);\n      }\n    } else {\n      console.log('‚ùå TokenManager: No casinoUser in localStorage');\n    }\n\n    // Also check for direct token storage\n    const directToken = localStorage.getItem('token') || localStorage.getItem('authToken') || localStorage.getItem('jwt');\n    if (directToken) {\n      this.token = directToken;\n      console.log('üîë TokenManager: Found direct token in localStorage');\n      return directToken;\n    }\n\n    // Check Supabase session\n    const {\n      data: {\n        session\n      }\n    } = await supabase.auth.getSession();\n    if (session !== null && session !== void 0 && session.access_token) {\n      this.token = session.access_token;\n      console.log('üîë TokenManager: Found token in Supabase session');\n      return session.access_token;\n    }\n    console.log('‚ùå TokenManager: No token found anywhere');\n    return undefined;\n  }\n  setToken(token) {\n    this.token = token;\n    console.log('üîë TokenManager: Token set:', token ? 'YES' : 'NO');\n\n    // Don't modify localStorage here - let DatabaseWrapper handle it\n    // This prevents conflicts and ensures consistent data structure\n    console.log('üîë TokenManager: Token cached in memory');\n  }\n  clearToken() {\n    this.token = undefined;\n    console.log('üóëÔ∏è TokenManager: Token cleared');\n\n    // Clear from localStorage\n    const savedUser = localStorage.getItem('casinoUser');\n    if (savedUser) {\n      try {\n        const user = JSON.parse(savedUser);\n        delete user.token;\n        localStorage.setItem('casinoUser', JSON.stringify(user));\n      } catch (error) {\n        console.warn('TokenManager: Failed to clear token from localStorage');\n      }\n    }\n  }\n  isTokenValid() {\n    return this.token !== undefined && this.token !== null;\n  }\n}\n\n// Export singleton instance\n_TokenManager = TokenManager;\nTokenManager.instance = void 0;\nexport const tokenManager = TokenManager.getInstance();","map":{"version":3,"names":["supabase","TokenManager","constructor","token","undefined","refreshPromise","initializeToken","getInstance","instance","getToken","console","log","storedUser","localStorage","getItem","userData","JSON","parse","Object","keys","possibleTokenFields","field","substring","error","directToken","data","session","auth","getSession","access_token","setToken","clearToken","savedUser","user","setItem","stringify","warn","isTokenValid","_TokenManager","tokenManager"],"sources":["/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/src/utils/auth/tokenManager.ts"],"sourcesContent":["// Centralized token management for authentication\nimport { supabase } from '../supabase/supabaseClients';\n\nexport class TokenManager {\n  private static instance: TokenManager;\n  private token: string | undefined = undefined;\n  private refreshPromise: Promise<string | undefined> | null = null;\n\n  private constructor() {\n    this.initializeToken();\n  }\n\n  static getInstance(): TokenManager {\n    if (!TokenManager.instance) {\n      TokenManager.instance = new TokenManager();\n    }\n    return TokenManager.instance;\n  }\n\n  private async initializeToken() {\n    await this.getToken();\n  }\n\n  async getToken(): Promise<string | undefined> {\n    console.log('üîç TokenManager: Getting token...');\n    \n    // If we have a cached token, return it\n    if (this.token) {\n      console.log('üîë TokenManager: Returning cached token');\n      return this.token;\n    }\n    \n    // Check localStorage for different possible token storage formats\n    const storedUser = localStorage.getItem('casinoUser');\n    console.log('üîç TokenManager: localStorage data:', storedUser);\n    if (storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        console.log('üîç TokenManager: Parsed user data:', userData);\n        console.log('üîç TokenManager: userData keys:', Object.keys(userData));\n        \n        // Check for token in different possible fields\n        const possibleTokenFields = ['token', 'access_token', 'jwt', 'authToken'];\n        for (const field of possibleTokenFields) {\n          if (userData[field]) {\n            this.token = userData[field];\n            console.log(`üîë TokenManager: Found token in localStorage field '${field}':`, userData[field].substring(0, 20) + '...');\n            return userData[field];\n          }\n        }\n        \n        console.log('‚ùå TokenManager: No token field found in localStorage data');\n        console.log('‚ùå TokenManager: Available fields:', Object.keys(userData));\n      } catch (error) {\n        console.error('Error parsing stored user data:', error);\n      }\n    } else {\n      console.log('‚ùå TokenManager: No casinoUser in localStorage');\n    }\n    \n    // Also check for direct token storage\n    const directToken = localStorage.getItem('token') || localStorage.getItem('authToken') || localStorage.getItem('jwt');\n    if (directToken) {\n      this.token = directToken;\n      console.log('üîë TokenManager: Found direct token in localStorage');\n      return directToken;\n    }\n\n    // Check Supabase session\n    const { data: { session } } = await supabase.auth.getSession();\n    if (session?.access_token) {\n      this.token = session.access_token;\n      console.log('üîë TokenManager: Found token in Supabase session');\n      return session.access_token;\n    }\n\n    console.log('‚ùå TokenManager: No token found anywhere');\n    return undefined;\n  }\n\n  setToken(token: string) {\n    this.token = token;\n    console.log('üîë TokenManager: Token set:', token ? 'YES' : 'NO');\n    \n    // Don't modify localStorage here - let DatabaseWrapper handle it\n    // This prevents conflicts and ensures consistent data structure\n    console.log('üîë TokenManager: Token cached in memory');\n  }\n\n  clearToken() {\n    this.token = undefined;\n    console.log('üóëÔ∏è TokenManager: Token cleared');\n    \n    // Clear from localStorage\n    const savedUser = localStorage.getItem('casinoUser');\n    if (savedUser) {\n      try {\n        const user = JSON.parse(savedUser);\n        delete user.token;\n        localStorage.setItem('casinoUser', JSON.stringify(user));\n      } catch (error) {\n        console.warn('TokenManager: Failed to clear token from localStorage');\n      }\n    }\n  }\n\n  isTokenValid(): boolean {\n    return this.token !== undefined && this.token !== null;\n  }\n}\n\n// Export singleton instance\nexport const tokenManager = TokenManager.getInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}