{"ast":null,"code":"\"use client\";\n\n// src/collapsible.tsx\nimport _objectSpread from \"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"__scopeCollapsible\", \"open\", \"defaultOpen\", \"disabled\", \"onOpenChange\"],\n  _excluded2 = [\"__scopeCollapsible\"],\n  _excluded3 = [\"forceMount\"],\n  _excluded4 = [\"__scopeCollapsible\", \"present\", \"children\"];\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { jsx } from \"react/jsx-runtime\";\nvar COLLAPSIBLE_NAME = \"Collapsible\";\nvar [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\nvar [CollapsibleProvider, useCollapsibleContext] = createCollapsibleContext(COLLAPSIBLE_NAME);\nvar Collapsible = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange\n    } = props,\n    collapsibleProps = _objectWithoutProperties(props, _excluded);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen !== null && defaultOpen !== void 0 ? defaultOpen : false,\n    onChange: onOpenChange,\n    caller: COLLAPSIBLE_NAME\n  });\n  return /* @__PURE__ */jsx(CollapsibleProvider, {\n    scope: __scopeCollapsible,\n    disabled,\n    contentId: useId(),\n    open,\n    onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n    children: /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n      \"data-state\": getState(open),\n      \"data-disabled\": disabled ? \"\" : void 0\n    }, collapsibleProps), {}, {\n      ref: forwardedRef\n    }))\n  });\n});\nCollapsible.displayName = COLLAPSIBLE_NAME;\nvar TRIGGER_NAME = \"CollapsibleTrigger\";\nvar CollapsibleTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeCollapsible\n    } = props,\n    triggerProps = _objectWithoutProperties(props, _excluded2);\n  const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n  return /* @__PURE__ */jsx(Primitive.button, _objectSpread(_objectSpread({\n    type: \"button\",\n    \"aria-controls\": context.contentId,\n    \"aria-expanded\": context.open || false,\n    \"data-state\": getState(context.open),\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    disabled: context.disabled\n  }, triggerProps), {}, {\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n  }));\n});\nCollapsibleTrigger.displayName = TRIGGER_NAME;\nvar CONTENT_NAME = \"CollapsibleContent\";\nvar CollapsibleContent = React.forwardRef((props, forwardedRef) => {\n  const {\n      forceMount\n    } = props,\n    contentProps = _objectWithoutProperties(props, _excluded3);\n  const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: _ref => {\n      let {\n        present\n      } = _ref;\n      return /* @__PURE__ */jsx(CollapsibleContentImpl, _objectSpread(_objectSpread({}, contentProps), {}, {\n        ref: forwardedRef,\n        present\n      }));\n    }\n  });\n});\nCollapsibleContent.displayName = CONTENT_NAME;\nvar CollapsibleContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeCollapsible,\n      present,\n      children\n    } = props,\n    contentProps = _objectWithoutProperties(props, _excluded4);\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef(0);\n  const width = widthRef.current;\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef(void 0);\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationName: node.style.animationName\n      };\n      node.style.transitionDuration = \"0s\";\n      node.style.animationName = \"none\";\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration;\n        node.style.animationName = originalStylesRef.current.animationName;\n      }\n      setIsPresent(present);\n    }\n  }, [context.open, present]);\n  return /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n    \"data-state\": getState(context.open),\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    id: context.contentId,\n    hidden: !isOpen\n  }, contentProps), {}, {\n    ref: composedRefs,\n    style: _objectSpread({\n      [\"--radix-collapsible-content-height\"]: height ? \"\".concat(height, \"px\") : void 0,\n      [\"--radix-collapsible-content-width\"]: width ? \"\".concat(width, \"px\") : void 0\n    }, props.style),\n    children: isOpen && children\n  }));\n});\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar Root = Collapsible;\nvar Trigger = CollapsibleTrigger;\nvar Content = CollapsibleContent;\nexport { Collapsible, CollapsibleContent, CollapsibleTrigger, Content, Root, Trigger, createCollapsibleScope };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}