{"ast":null,"code":"// src/primitive.tsx\nvar canUseDOM = !!(typeof window !== \"undefined\" && window.document && window.document.createElement);\nfunction composeEventHandlers(originalEventHandler, ourEventHandler) {\n  let {\n    checkForDefaultPrevented = true\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return function handleEvent(event) {\n    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);\n    if (checkForDefaultPrevented === false || !event.defaultPrevented) {\n      return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);\n    }\n  };\n}\nfunction getOwnerWindow(element) {\n  var _element$ownerDocumen, _element$ownerDocumen2;\n  if (!canUseDOM) {\n    throw new Error(\"Cannot access window outside of the DOM\");\n  }\n  return (_element$ownerDocumen = element === null || element === void 0 || (_element$ownerDocumen2 = element.ownerDocument) === null || _element$ownerDocumen2 === void 0 ? void 0 : _element$ownerDocumen2.defaultView) !== null && _element$ownerDocumen !== void 0 ? _element$ownerDocumen : window;\n}\nfunction getOwnerDocument(element) {\n  var _element$ownerDocumen3;\n  if (!canUseDOM) {\n    throw new Error(\"Cannot access document outside of the DOM\");\n  }\n  return (_element$ownerDocumen3 = element === null || element === void 0 ? void 0 : element.ownerDocument) !== null && _element$ownerDocumen3 !== void 0 ? _element$ownerDocumen3 : document;\n}\nfunction getActiveElement(node) {\n  let activeDescendant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const {\n    activeElement\n  } = getOwnerDocument(node);\n  if (!(activeElement !== null && activeElement !== void 0 && activeElement.nodeName)) {\n    return null;\n  }\n  if (isFrame(activeElement) && activeElement.contentDocument) {\n    return getActiveElement(activeElement.contentDocument.body, activeDescendant);\n  }\n  if (activeDescendant) {\n    const id = activeElement.getAttribute(\"aria-activedescendant\");\n    if (id) {\n      const element = getOwnerDocument(activeElement).getElementById(id);\n      if (element) {\n        return element;\n      }\n    }\n  }\n  return activeElement;\n}\nfunction isFrame(element) {\n  return element.tagName === \"IFRAME\";\n}\nexport { canUseDOM, composeEventHandlers, getActiveElement, getOwnerDocument, getOwnerWindow, isFrame };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}