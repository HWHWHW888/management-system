{"ast":null,"code":"// API Client for connecting frontend to backend server\nimport { tokenManager } from '../auth/tokenManager';\n\n// Use relative URL in development to leverage proxy, absolute URL in production\nconst API_BASE_URL = process.env.NODE_ENV === 'development' ? '/api' // Relative URL for development (uses proxy)\n: process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nclass ApiClient {\n  constructor(baseUrl = API_BASE_URL) {\n    this.baseUrl = void 0;\n    this.token = null;\n    this.baseUrl = baseUrl;\n    this.initializeToken();\n  }\n  async initializeToken() {\n    // Load token from localStorage on initialization\n    try {\n      const savedUser = localStorage.getItem('casinoUser');\n      if (savedUser) {\n        const userData = JSON.parse(savedUser);\n        if (userData.token) {\n          this.token = userData.token;\n          console.log('üîë ApiClient: Token loaded from localStorage on init');\n        }\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è ApiClient: Failed to load token from localStorage:', error);\n    }\n  }\n  setToken(token) {\n    this.token = token;\n    tokenManager.setToken(token);\n    console.log('üîë ApiClient: Token set explicitly:', token ? 'YES' : 'NO');\n  }\n  async refreshToken() {\n    console.log('üîÑ ApiClient: Refreshing token...');\n    const token = await tokenManager.getToken();\n    if (token) {\n      this.token = token;\n      console.log('üîë ApiClient: Token refreshed successfully');\n      return true;\n    }\n    console.log('‚ùå ApiClient: Token refresh failed - no token available');\n    return false;\n  }\n\n  // Request interceptor - automatically adds token to all requests\n  async request(endpoint, options = {}, customToken) {\n    const url = `${this.baseUrl}${endpoint}`;\n\n    // Prepare headers with interceptor logic\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n\n    // Token interceptor: automatically get and attach token\n    let token = customToken || this.token;\n\n    // If no token in memory, try to get from localStorage\n    if (!token) {\n      try {\n        const savedUser = localStorage.getItem('casinoUser');\n        if (savedUser) {\n          const userData = JSON.parse(savedUser);\n          if (userData.token) {\n            token = userData.token;\n            this.token = token; // Cache in memory\n            console.log('üîë ApiClient Interceptor: Token retrieved from localStorage');\n          }\n        }\n      } catch (error) {\n        console.warn('‚ö†Ô∏è ApiClient Interceptor: Failed to parse localStorage user data');\n      }\n    }\n\n    // If still no token, try TokenManager as fallback\n    if (!token) {\n      token = (await tokenManager.getToken()) || null;\n      if (token) {\n        this.token = token;\n        console.log('üîë ApiClient Interceptor: Token retrieved from TokenManager');\n      }\n    }\n\n    // Skip auth for login endpoint\n    if (endpoint === '/auth/login') {\n      console.log('üîì ApiClient: Skipping auth for login endpoint');\n    } else if (!token) {\n      console.error('‚ùå ApiClient Interceptor: No authentication token available');\n      return {\n        success: false,\n        error: 'Authentication required - please login first'\n      };\n    } else {\n      // Add Authorization header with token\n      headers['Authorization'] = `Bearer ${token}`;\n      console.log(`üîë ApiClient Interceptor: Added auth header for ${endpoint}`);\n    }\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        // Handle 401 Unauthorized - token might be expired\n        if (response.status === 401 && token) {\n          console.warn('üîÑ Token expired, clearing stored tokens...');\n          this.token = null;\n          localStorage.removeItem('casinoUser');\n          tokenManager.clearToken();\n          return {\n            success: false,\n            error: 'Session expired - please login again'\n          };\n        }\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error(`API request failed: ${endpoint}`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  // Auth endpoints - login doesn't need token\n  async login(username, password) {\n    try {\n      var _responseData$data;\n      console.log('üîê ApiClient: Making login request...');\n\n      // Use the request method but it will skip auth for /auth/login\n      const response = await this.request('/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      console.log('üîê ApiClient: Login response:', response);\n      if (!response.success) {\n        throw new Error(response.error || 'Login failed');\n      }\n\n      // Extract and store token after successful login\n      let token = null;\n      let user = null;\n\n      // Handle nested response structure with proper type checking\n      const responseData = response.data;\n      if (responseData !== null && responseData !== void 0 && (_responseData$data = responseData.data) !== null && _responseData$data !== void 0 && _responseData$data.token) {\n        token = responseData.data.token;\n        user = responseData.data.user || {};\n      } else if (responseData !== null && responseData !== void 0 && responseData.token) {\n        token = responseData.token;\n        user = responseData.user || {};\n      }\n      if (token) {\n        console.log('üîë ApiClient: Storing token after successful login');\n\n        // Store token in memory\n        this.setToken(token);\n\n        // Create complete user object with token\n        const userWithToken = {\n          ...user,\n          token: token,\n          id: user.id || 'admin-1',\n          username: user.username || username,\n          role: user.role || 'admin'\n        };\n\n        // Store in localStorage\n        localStorage.setItem('casinoUser', JSON.stringify(userWithToken));\n        console.log('üîë ApiClient: Saved user with token to localStorage');\n\n        // Store in TokenManager\n        tokenManager.setToken(token);\n\n        // Return response with complete user data\n        return {\n          success: true,\n          data: {\n            ...(responseData || {}),\n            data: {\n              token: token,\n              user: userWithToken\n            }\n          }\n        };\n      }\n      return response;\n    } catch (error) {\n      console.error('Login request failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n\n  // Users endpoints\n  async getUsers() {\n    return this.request('/users');\n  }\n  async createUser(userData) {\n    return this.request('/users', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async updateUser(id, userData) {\n    return this.request(`/users/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(userData)\n    });\n  }\n  async deleteUser(id) {\n    return this.request(`/users/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Customers endpoints\n  async getCustomers(customToken) {\n    return this.request('/customers', {}, customToken);\n  }\n  async createCustomer(customerData, customToken) {\n    return this.request('/customers', {\n      method: 'POST',\n      body: JSON.stringify(customerData)\n    }, customToken);\n  }\n  async updateCustomer(id, customerData, customToken) {\n    return this.request(`/customers/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(customerData)\n    }, customToken);\n  }\n  async deleteCustomer(id, customToken) {\n    return this.request(`/customers/${id}`, {\n      method: 'DELETE'\n    }, customToken);\n  }\n\n  // Agents endpoints\n  async getAgents(customToken) {\n    return this.request('/agents', {}, customToken);\n  }\n  async createAgent(agentData, customToken) {\n    return this.request('/agents', {\n      method: 'POST',\n      body: JSON.stringify(agentData)\n    }, customToken);\n  }\n  async updateAgent(id, agentData, customToken) {\n    return this.request(`/agents/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(agentData)\n    }, customToken);\n  }\n  async deleteAgent(id, customToken) {\n    return this.request(`/agents/${id}`, {\n      method: 'DELETE'\n    }, customToken);\n  }\n\n  // Trips endpoints\n  async getTrips() {\n    return this.request('/trips');\n  }\n  async getTripsWithSharing() {\n    console.log('üîÑ ApiClient: Fetching trips with sharing data...');\n    const response = await this.request('/trips');\n    console.log('üìä ApiClient: Trips with sharing data loaded:', Array.isArray(response.data) ? response.data.length : 0);\n    return response;\n  }\n  async createTrip(tripData) {\n    return this.request('/trips', {\n      method: 'POST',\n      body: JSON.stringify(tripData)\n    });\n  }\n  async updateTrip(id, tripData) {\n    return this.request(`/trips/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(tripData)\n    });\n  }\n  async deleteTrip(id) {\n    return this.request(`/trips/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Transactions endpoints\n  async getTransactions() {\n    return this.request('/transactions');\n  }\n  async createTransaction(transactionData) {\n    return this.request('/transactions', {\n      method: 'POST',\n      body: JSON.stringify(transactionData)\n    });\n  }\n  async updateTransaction(id, transactionData) {\n    return this.request(`/transactions/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(transactionData)\n    });\n  }\n  async deleteTransaction(id) {\n    return this.request(`/transactions/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Reports endpoints\n  async getReports() {\n    return this.request('/reports');\n  }\n  async getDashboardStats() {\n    return this.request('/reports/dashboard');\n  }\n  async getCustomerReport(customerId) {\n    return this.request(`/reports/customer/${customerId}`);\n  }\n  async getAgentReport(agentId) {\n    return this.request(`/reports/agent/${agentId}`);\n  }\n  async getTripReport(tripId) {\n    return this.request(`/reports/trip/${tripId}`);\n  }\n\n  // Customer Details endpoints\n  async getCustomerDetails(customerId) {\n    return this.request(`/customers/${customerId}/details`);\n  }\n  async createCustomerDetails(customerId, detailsData) {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'POST',\n      body: JSON.stringify(detailsData)\n    });\n  }\n  async updateCustomerDetails(customerId, detailsData) {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'PUT',\n      body: JSON.stringify(detailsData)\n    });\n  }\n  async deleteCustomerDetails(customerId) {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Customer file attachment methods\n  async uploadCustomerAttachments(customerId, attachments) {\n    return this.request(`/customers/${customerId}/attachments`, {\n      method: 'POST',\n      body: JSON.stringify({\n        attachments\n      })\n    });\n  }\n  async getCustomerAttachments(customerId) {\n    return this.request(`/customers/${customerId}/attachments`);\n  }\n  async deleteCustomerAttachment(customerId, attachmentId) {\n    return this.request(`/customers/${customerId}/attachments/${attachmentId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Customer passport file upload\n  async uploadCustomerPassport(customerId, passportData) {\n    return this.request(`/customers/${customerId}/passport`, {\n      method: 'POST',\n      body: JSON.stringify(passportData)\n    });\n  }\n\n  // Staff endpoints\n  async getStaffs() {\n    return this.request('/staffs');\n  }\n  async getStaff(id) {\n    return this.request(`/staffs/${id}`);\n  }\n  async createStaff(staffData) {\n    return this.request('/staffs', {\n      method: 'POST',\n      body: JSON.stringify(staffData)\n    });\n  }\n  async updateStaff(id, staffData) {\n    return this.request(`/staffs/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(staffData)\n    });\n  }\n  async deleteStaff(id) {\n    return this.request(`/staffs/${id}`, {\n      method: 'DELETE'\n    });\n  }\n  async staffCheckIn(id, checkInData) {\n    return this.request(`/staffs/${id}/check-in`, {\n      method: 'POST',\n      body: JSON.stringify(checkInData)\n    });\n  }\n  async staffCheckOut(id, checkOutData) {\n    return this.request(`/staffs/${id}/check-out`, {\n      method: 'POST',\n      body: JSON.stringify(checkOutData)\n    });\n  }\n  async getStaffShifts(id, params) {\n    const queryString = params ? new URLSearchParams(params).toString() : '';\n    return this.request(`/staffs/${id}/shifts${queryString ? `?${queryString}` : ''}`);\n  }\n  async getStaffRollingRecords(id, params) {\n    const queryString = params ? new URLSearchParams(params).toString() : '';\n    return this.request(`/staffs/${id}/rolling-records${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Generic HTTP methods for flexible API calls\n  async get(endpoint, customToken) {\n    return this.request(endpoint, {\n      method: 'GET'\n    }, customToken);\n  }\n  async post(endpoint, data, customToken) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined\n    }, customToken);\n  }\n  async put(endpoint, data, customToken) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined\n    }, customToken);\n  }\n  async delete(endpoint, customToken) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    }, customToken);\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["tokenManager","API_BASE_URL","process","env","NODE_ENV","REACT_APP_API_URL","ApiClient","constructor","baseUrl","token","initializeToken","savedUser","localStorage","getItem","userData","JSON","parse","console","log","error","warn","setToken","refreshToken","getToken","request","endpoint","options","customToken","url","headers","success","response","fetch","data","json","ok","status","removeItem","clearToken","Error","message","login","username","password","_responseData$data","method","body","stringify","user","responseData","userWithToken","id","role","setItem","register","getUsers","createUser","updateUser","deleteUser","getCustomers","createCustomer","customerData","updateCustomer","deleteCustomer","getAgents","createAgent","agentData","updateAgent","deleteAgent","getTrips","getTripsWithSharing","Array","isArray","length","createTrip","tripData","updateTrip","deleteTrip","getTransactions","createTransaction","transactionData","updateTransaction","deleteTransaction","getReports","getDashboardStats","getCustomerReport","customerId","getAgentReport","agentId","getTripReport","tripId","getCustomerDetails","createCustomerDetails","detailsData","updateCustomerDetails","deleteCustomerDetails","uploadCustomerAttachments","attachments","getCustomerAttachments","deleteCustomerAttachment","attachmentId","uploadCustomerPassport","passportData","getStaffs","getStaff","createStaff","staffData","updateStaff","deleteStaff","staffCheckIn","checkInData","staffCheckOut","checkOutData","getStaffShifts","params","queryString","URLSearchParams","toString","getStaffRollingRecords","get","post","undefined","put","delete","apiClient"],"sources":["/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/src/utils/api/apiClient.ts"],"sourcesContent":["// API Client for connecting frontend to backend server\nimport { tokenManager } from '../auth/tokenManager';\n\n// Use relative URL in development to leverage proxy, absolute URL in production\nconst API_BASE_URL = process.env.NODE_ENV === 'development' \n  ? '/api'  // Relative URL for development (uses proxy)\n  : (process.env.REACT_APP_API_URL || 'http://localhost:3001/api');\n\ninterface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  error?: string;\n}\n\nclass ApiClient {\n  private baseUrl: string;\n  private token: string | null = null;\n\n  constructor(baseUrl: string = API_BASE_URL) {\n    this.baseUrl = baseUrl;\n    this.initializeToken();\n  }\n\n  private async initializeToken() {\n    // Load token from localStorage on initialization\n    try {\n      const savedUser = localStorage.getItem('casinoUser');\n      if (savedUser) {\n        const userData = JSON.parse(savedUser);\n        if (userData.token) {\n          this.token = userData.token;\n          console.log('üîë ApiClient: Token loaded from localStorage on init');\n        }\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è ApiClient: Failed to load token from localStorage:', error);\n    }\n  }\n\n  setToken(token: string) {\n    this.token = token;\n    tokenManager.setToken(token);\n    console.log('üîë ApiClient: Token set explicitly:', token ? 'YES' : 'NO');\n  }\n\n  async refreshToken(): Promise<boolean> {\n    console.log('üîÑ ApiClient: Refreshing token...');\n    const token = await tokenManager.getToken();\n    if (token) {\n      this.token = token;\n      console.log('üîë ApiClient: Token refreshed successfully');\n      return true;\n    }\n    console.log('‚ùå ApiClient: Token refresh failed - no token available');\n    return false;\n  }\n\n  // Request interceptor - automatically adds token to all requests\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {},\n    customToken?: string\n  ): Promise<ApiResponse<T>> {\n    const url = `${this.baseUrl}${endpoint}`;\n    \n    // Prepare headers with interceptor logic\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...(options.headers as Record<string, string>),\n    };\n\n    // Token interceptor: automatically get and attach token\n    let token = customToken || this.token;\n    \n    // If no token in memory, try to get from localStorage\n    if (!token) {\n      try {\n        const savedUser = localStorage.getItem('casinoUser');\n        if (savedUser) {\n          const userData = JSON.parse(savedUser);\n          if (userData.token) {\n            token = userData.token;\n            this.token = token; // Cache in memory\n            console.log('üîë ApiClient Interceptor: Token retrieved from localStorage');\n          }\n        }\n      } catch (error) {\n        console.warn('‚ö†Ô∏è ApiClient Interceptor: Failed to parse localStorage user data');\n      }\n    }\n\n    // If still no token, try TokenManager as fallback\n    if (!token) {\n      token = await tokenManager.getToken() || null;\n      if (token) {\n        this.token = token;\n        console.log('üîë ApiClient Interceptor: Token retrieved from TokenManager');\n      }\n    }\n\n    // Skip auth for login endpoint\n    if (endpoint === '/auth/login') {\n      console.log('üîì ApiClient: Skipping auth for login endpoint');\n    } else if (!token) {\n      console.error('‚ùå ApiClient Interceptor: No authentication token available');\n      return {\n        success: false,\n        error: 'Authentication required - please login first'\n      };\n    } else {\n      // Add Authorization header with token\n      headers['Authorization'] = `Bearer ${token}`;\n      console.log(`üîë ApiClient Interceptor: Added auth header for ${endpoint}`);\n    }\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // Handle 401 Unauthorized - token might be expired\n        if (response.status === 401 && token) {\n          console.warn('üîÑ Token expired, clearing stored tokens...');\n          this.token = null;\n          localStorage.removeItem('casinoUser');\n          tokenManager.clearToken();\n          return {\n            success: false,\n            error: 'Session expired - please login again'\n          };\n        }\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error(`API request failed: ${endpoint}`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  // Auth endpoints - login doesn't need token\n  async login(username: string, password: string) {\n    try {\n      console.log('üîê ApiClient: Making login request...');\n      \n      // Use the request method but it will skip auth for /auth/login\n      const response = await this.request('/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({ username, password }),\n      });\n\n      console.log('üîê ApiClient: Login response:', response);\n\n      if (!response.success) {\n        throw new Error(response.error || 'Login failed');\n      }\n\n      // Extract and store token after successful login\n      let token = null;\n      let user = null;\n      \n      // Handle nested response structure with proper type checking\n      const responseData = response.data as any;\n      if (responseData?.data?.token) {\n        token = responseData.data.token;\n        user = responseData.data.user || {};\n      } else if (responseData?.token) {\n        token = responseData.token;\n        user = responseData.user || {};\n      }\n\n      if (token) {\n        console.log('üîë ApiClient: Storing token after successful login');\n        \n        // Store token in memory\n        this.setToken(token);\n        \n        // Create complete user object with token\n        const userWithToken = {\n          ...user,\n          token: token,\n          id: user.id || 'admin-1',\n          username: user.username || username,\n          role: user.role || 'admin'\n        };\n        \n        // Store in localStorage\n        localStorage.setItem('casinoUser', JSON.stringify(userWithToken));\n        console.log('üîë ApiClient: Saved user with token to localStorage');\n        \n        // Store in TokenManager\n        tokenManager.setToken(token);\n        \n        // Return response with complete user data\n        return {\n          success: true,\n          data: {\n            ...(responseData || {}),\n            data: {\n              token: token,\n              user: userWithToken\n            }\n          }\n        };\n      }\n\n      return response;\n    } catch (error) {\n      console.error('Login request failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  async register(userData: any) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  // Users endpoints\n  async getUsers() {\n    return this.request('/users');\n  }\n\n  async createUser(userData: any) {\n    return this.request('/users', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  async updateUser(id: string, userData: any) {\n    return this.request(`/users/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  async deleteUser(id: string) {\n    return this.request(`/users/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Customers endpoints\n  async getCustomers(customToken?: string) {\n    return this.request('/customers', {}, customToken);\n  }\n\n  async createCustomer(customerData: any, customToken?: string) {\n    return this.request('/customers', {\n      method: 'POST',\n      body: JSON.stringify(customerData),\n    }, customToken);\n  }\n\n  async updateCustomer(id: string, customerData: any, customToken?: string) {\n    return this.request(`/customers/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(customerData),\n    }, customToken);\n  }\n\n  async deleteCustomer(id: string, customToken?: string) {\n    return this.request(`/customers/${id}`, {\n      method: 'DELETE',\n    }, customToken);\n  }\n\n  // Agents endpoints\n  async getAgents(customToken?: string) {\n    return this.request('/agents', {}, customToken);\n  }\n\n  async createAgent(agentData: any, customToken?: string) {\n    return this.request('/agents', {\n      method: 'POST',\n      body: JSON.stringify(agentData),\n    }, customToken);\n  }\n\n  async updateAgent(id: string, agentData: any, customToken?: string) {\n    return this.request(`/agents/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(agentData),\n    }, customToken);\n  }\n\n  async deleteAgent(id: string, customToken?: string) {\n    return this.request(`/agents/${id}`, {\n      method: 'DELETE',\n    }, customToken);\n  }\n\n  // Trips endpoints\n  async getTrips() {\n    return this.request('/trips');\n  }\n\n  async getTripsWithSharing() {\n    console.log('üîÑ ApiClient: Fetching trips with sharing data...');\n    const response = await this.request('/trips');\n    console.log('üìä ApiClient: Trips with sharing data loaded:', Array.isArray(response.data) ? response.data.length : 0);\n    return response;\n  }\n\n  async createTrip(tripData: any) {\n    return this.request('/trips', {\n      method: 'POST',\n      body: JSON.stringify(tripData),\n    });\n  }\n\n  async updateTrip(id: string, tripData: any) {\n    return this.request(`/trips/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(tripData),\n    });\n  }\n\n  async deleteTrip(id: string) {\n    return this.request(`/trips/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Transactions endpoints\n  async getTransactions() {\n    return this.request('/transactions');\n  }\n\n  async createTransaction(transactionData: any) {\n    return this.request('/transactions', {\n      method: 'POST',\n      body: JSON.stringify(transactionData),\n    });\n  }\n\n  async updateTransaction(id: string, transactionData: any) {\n    return this.request(`/transactions/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(transactionData),\n    });\n  }\n\n  async deleteTransaction(id: string) {\n    return this.request(`/transactions/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Reports endpoints\n  async getReports() {\n    return this.request('/reports');\n  }\n\n  async getDashboardStats() {\n    return this.request('/reports/dashboard');\n  }\n\n  async getCustomerReport(customerId: string) {\n    return this.request(`/reports/customer/${customerId}`);\n  }\n\n  async getAgentReport(agentId: string) {\n    return this.request(`/reports/agent/${agentId}`);\n  }\n\n  async getTripReport(tripId: string) {\n    return this.request(`/reports/trip/${tripId}`);\n  }\n\n  // Customer Details endpoints\n  async getCustomerDetails(customerId: string) {\n    return this.request(`/customers/${customerId}/details`);\n  }\n\n  async createCustomerDetails(customerId: string, detailsData: any) {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'POST',\n      body: JSON.stringify(detailsData),\n    });\n  }\n\n\n  \n  async updateCustomerDetails(customerId: string, detailsData: any) {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'PUT',\n      body: JSON.stringify(detailsData),\n    });\n  }\n\n  async deleteCustomerDetails(customerId: string): Promise<ApiResponse<void>> {\n    return this.request(`/customers/${customerId}/details`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Customer file attachment methods\n  async uploadCustomerAttachments(customerId: string, attachments: any[]): Promise<ApiResponse<any>> {\n    return this.request(`/customers/${customerId}/attachments`, {\n      method: 'POST',\n      body: JSON.stringify({ attachments })\n    });\n  }\n\n  async getCustomerAttachments(customerId: string): Promise<ApiResponse<any[]>> {\n    return this.request(`/customers/${customerId}/attachments`);\n  }\n\n  async deleteCustomerAttachment(customerId: string, attachmentId: string): Promise<ApiResponse<any>> {\n    return this.request(`/customers/${customerId}/attachments/${attachmentId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Customer passport file upload\n  async uploadCustomerPassport(customerId: string, passportData: any): Promise<ApiResponse<any>> {\n    return this.request(`/customers/${customerId}/passport`, {\n      method: 'POST',\n      body: JSON.stringify(passportData)\n    });\n  }\n\n  // Staff endpoints\n  async getStaffs(): Promise<ApiResponse<any[]>> {\n    return this.request('/staffs');\n  }\n\n  async getStaff(id: string): Promise<ApiResponse<any>> {\n    return this.request(`/staffs/${id}`);\n  }\n\n  async createStaff(staffData: any): Promise<ApiResponse<any>> {\n    return this.request('/staffs', {\n      method: 'POST',\n      body: JSON.stringify(staffData)\n    });\n  }\n\n  async updateStaff(id: string, staffData: any): Promise<ApiResponse<any>> {\n    return this.request(`/staffs/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(staffData)\n    });\n  }\n\n  async deleteStaff(id: string): Promise<ApiResponse<any>> {\n    return this.request(`/staffs/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  async staffCheckIn(id: string, checkInData: any): Promise<ApiResponse<any>> {\n    return this.request(`/staffs/${id}/check-in`, {\n      method: 'POST',\n      body: JSON.stringify(checkInData)\n    });\n  }\n\n  async staffCheckOut(id: string, checkOutData: any): Promise<ApiResponse<any>> {\n    return this.request(`/staffs/${id}/check-out`, {\n      method: 'POST',\n      body: JSON.stringify(checkOutData)\n    });\n  }\n\n  async getStaffShifts(id: string, params?: any): Promise<ApiResponse<any[]>> {\n    const queryString = params ? new URLSearchParams(params).toString() : '';\n    return this.request(`/staffs/${id}/shifts${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async getStaffRollingRecords(id: string, params?: any): Promise<ApiResponse<any[]>> {\n    const queryString = params ? new URLSearchParams(params).toString() : '';\n    return this.request(`/staffs/${id}/rolling-records${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Generic HTTP methods for flexible API calls\n  async get<T = any>(endpoint: string, customToken?: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, { method: 'GET' }, customToken);\n  }\n\n  async post<T = any>(endpoint: string, data?: any, customToken?: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    }, customToken);\n  }\n\n  async put<T = any>(endpoint: string, data?: any, customToken?: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    }, customToken);\n  }\n\n  async delete<T = any>(endpoint: string, customToken?: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, { method: 'DELETE' }, customToken);\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient();\nexport default apiClient;\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,sBAAsB;;AAEnD;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GACvD,MAAM,CAAE;AAAA,EACPF,OAAO,CAACC,GAAG,CAACE,iBAAiB,IAAI,2BAA4B;AASlE,MAAMC,SAAS,CAAC;EAIdC,WAAWA,CAACC,OAAe,GAAGP,YAAY,EAAE;IAAA,KAHpCO,OAAO;IAAA,KACPC,KAAK,GAAkB,IAAI;IAGjC,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,eAAe,CAAC,CAAC;EACxB;EAEA,MAAcA,eAAeA,CAAA,EAAG;IAC9B;IACA,IAAI;MACF,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MACpD,IAAIF,SAAS,EAAE;QACb,MAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;QACtC,IAAIG,QAAQ,CAACL,KAAK,EAAE;UAClB,IAAI,CAACA,KAAK,GAAGK,QAAQ,CAACL,KAAK;UAC3BQ,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;QACrE;MACF;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACG,IAAI,CAAC,uDAAuD,EAAED,KAAK,CAAC;IAC9E;EACF;EAEAE,QAAQA,CAACZ,KAAa,EAAE;IACtB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClBT,YAAY,CAACqB,QAAQ,CAACZ,KAAK,CAAC;IAC5BQ,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAET,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC;EAC1E;EAEA,MAAMa,YAAYA,CAAA,EAAqB;IACrCL,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChD,MAAMT,KAAK,GAAG,MAAMT,YAAY,CAACuB,QAAQ,CAAC,CAAC;IAC3C,IAAId,KAAK,EAAE;MACT,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClBQ,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MACzD,OAAO,IAAI;IACb;IACAD,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;IACrE,OAAO,KAAK;EACd;;EAEA;EACA,MAAcM,OAAOA,CACnBC,QAAgB,EAChBC,OAAoB,GAAG,CAAC,CAAC,EACzBC,WAAoB,EACK;IACzB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACpB,OAAO,GAAGiB,QAAQ,EAAE;;IAExC;IACA,MAAMI,OAA+B,GAAG;MACtC,cAAc,EAAE,kBAAkB;MAClC,GAAIH,OAAO,CAACG;IACd,CAAC;;IAED;IACA,IAAIpB,KAAK,GAAGkB,WAAW,IAAI,IAAI,CAAClB,KAAK;;IAErC;IACA,IAAI,CAACA,KAAK,EAAE;MACV,IAAI;QACF,MAAME,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;QACpD,IAAIF,SAAS,EAAE;UACb,MAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;UACtC,IAAIG,QAAQ,CAACL,KAAK,EAAE;YAClBA,KAAK,GAAGK,QAAQ,CAACL,KAAK;YACtB,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC,CAAC;YACpBQ,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC;UAC5E;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACG,IAAI,CAAC,kEAAkE,CAAC;MAClF;IACF;;IAEA;IACA,IAAI,CAACX,KAAK,EAAE;MACVA,KAAK,GAAG,OAAMT,YAAY,CAACuB,QAAQ,CAAC,CAAC,KAAI,IAAI;MAC7C,IAAId,KAAK,EAAE;QACT,IAAI,CAACA,KAAK,GAAGA,KAAK;QAClBQ,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC;MAC5E;IACF;;IAEA;IACA,IAAIO,QAAQ,KAAK,aAAa,EAAE;MAC9BR,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IAC/D,CAAC,MAAM,IAAI,CAACT,KAAK,EAAE;MACjBQ,OAAO,CAACE,KAAK,CAAC,4DAA4D,CAAC;MAC3E,OAAO;QACLW,OAAO,EAAE,KAAK;QACdX,KAAK,EAAE;MACT,CAAC;IACH,CAAC,MAAM;MACL;MACAU,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUpB,KAAK,EAAE;MAC5CQ,OAAO,CAACC,GAAG,CAAC,mDAAmDO,QAAQ,EAAE,CAAC;IAC5E;IAEA,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;QAChC,GAAGF,OAAO;QACVG;MACF,CAAC,CAAC;MAEF,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB;QACA,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAI3B,KAAK,EAAE;UACpCQ,OAAO,CAACG,IAAI,CAAC,6CAA6C,CAAC;UAC3D,IAAI,CAACX,KAAK,GAAG,IAAI;UACjBG,YAAY,CAACyB,UAAU,CAAC,YAAY,CAAC;UACrCrC,YAAY,CAACsC,UAAU,CAAC,CAAC;UACzB,OAAO;YACLR,OAAO,EAAE,KAAK;YACdX,KAAK,EAAE;UACT,CAAC;QACH;QACA,MAAM,IAAIoB,KAAK,CAACN,IAAI,CAACO,OAAO,IAAI,uBAAuBT,QAAQ,CAACK,MAAM,EAAE,CAAC;MAC3E;MAEA,OAAOH,IAAI;IACb,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuBM,QAAQ,EAAE,EAAEN,KAAK,CAAC;MACvD,OAAO;QACLW,OAAO,EAAE,KAAK;QACdX,KAAK,EAAEA,KAAK,YAAYoB,KAAK,GAAGpB,KAAK,CAACqB,OAAO,GAAG;MAClD,CAAC;IACH;EACF;;EAEA;EACA,MAAMC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAAE;IAC9C,IAAI;MAAA,IAAAC,kBAAA;MACF3B,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;;MAEpD;MACA,MAAMa,QAAQ,GAAG,MAAM,IAAI,CAACP,OAAO,CAAC,aAAa,EAAE;QACjDqB,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAAC;UAAEL,QAAQ;UAAEC;QAAS,CAAC;MAC7C,CAAC,CAAC;MAEF1B,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEa,QAAQ,CAAC;MAEtD,IAAI,CAACA,QAAQ,CAACD,OAAO,EAAE;QACrB,MAAM,IAAIS,KAAK,CAACR,QAAQ,CAACZ,KAAK,IAAI,cAAc,CAAC;MACnD;;MAEA;MACA,IAAIV,KAAK,GAAG,IAAI;MAChB,IAAIuC,IAAI,GAAG,IAAI;;MAEf;MACA,MAAMC,YAAY,GAAGlB,QAAQ,CAACE,IAAW;MACzC,IAAIgB,YAAY,aAAZA,YAAY,gBAAAL,kBAAA,GAAZK,YAAY,CAAEhB,IAAI,cAAAW,kBAAA,eAAlBA,kBAAA,CAAoBnC,KAAK,EAAE;QAC7BA,KAAK,GAAGwC,YAAY,CAAChB,IAAI,CAACxB,KAAK;QAC/BuC,IAAI,GAAGC,YAAY,CAAChB,IAAI,CAACe,IAAI,IAAI,CAAC,CAAC;MACrC,CAAC,MAAM,IAAIC,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAExC,KAAK,EAAE;QAC9BA,KAAK,GAAGwC,YAAY,CAACxC,KAAK;QAC1BuC,IAAI,GAAGC,YAAY,CAACD,IAAI,IAAI,CAAC,CAAC;MAChC;MAEA,IAAIvC,KAAK,EAAE;QACTQ,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;;QAEjE;QACA,IAAI,CAACG,QAAQ,CAACZ,KAAK,CAAC;;QAEpB;QACA,MAAMyC,aAAa,GAAG;UACpB,GAAGF,IAAI;UACPvC,KAAK,EAAEA,KAAK;UACZ0C,EAAE,EAAEH,IAAI,CAACG,EAAE,IAAI,SAAS;UACxBT,QAAQ,EAAEM,IAAI,CAACN,QAAQ,IAAIA,QAAQ;UACnCU,IAAI,EAAEJ,IAAI,CAACI,IAAI,IAAI;QACrB,CAAC;;QAED;QACAxC,YAAY,CAACyC,OAAO,CAAC,YAAY,EAAEtC,IAAI,CAACgC,SAAS,CAACG,aAAa,CAAC,CAAC;QACjEjC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;;QAElE;QACAlB,YAAY,CAACqB,QAAQ,CAACZ,KAAK,CAAC;;QAE5B;QACA,OAAO;UACLqB,OAAO,EAAE,IAAI;UACbG,IAAI,EAAE;YACJ,IAAIgB,YAAY,IAAI,CAAC,CAAC,CAAC;YACvBhB,IAAI,EAAE;cACJxB,KAAK,EAAEA,KAAK;cACZuC,IAAI,EAAEE;YACR;UACF;QACF,CAAC;MACH;MAEA,OAAOnB,QAAQ;IACjB,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO;QACLW,OAAO,EAAE,KAAK;QACdX,KAAK,EAAEA,KAAK,YAAYoB,KAAK,GAAGpB,KAAK,CAACqB,OAAO,GAAG;MAClD,CAAC;IACH;EACF;EAEA,MAAMc,QAAQA,CAACxC,QAAa,EAAE;IAC5B,OAAO,IAAI,CAACU,OAAO,CAAC,gBAAgB,EAAE;MACpCqB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACjC,QAAQ;IAC/B,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMyC,QAAQA,CAAA,EAAG;IACf,OAAO,IAAI,CAAC/B,OAAO,CAAC,QAAQ,CAAC;EAC/B;EAEA,MAAMgC,UAAUA,CAAC1C,QAAa,EAAE;IAC9B,OAAO,IAAI,CAACU,OAAO,CAAC,QAAQ,EAAE;MAC5BqB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACjC,QAAQ;IAC/B,CAAC,CAAC;EACJ;EAEA,MAAM2C,UAAUA,CAACN,EAAU,EAAErC,QAAa,EAAE;IAC1C,OAAO,IAAI,CAACU,OAAO,CAAC,UAAU2B,EAAE,EAAE,EAAE;MAClCN,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACjC,QAAQ;IAC/B,CAAC,CAAC;EACJ;EAEA,MAAM4C,UAAUA,CAACP,EAAU,EAAE;IAC3B,OAAO,IAAI,CAAC3B,OAAO,CAAC,UAAU2B,EAAE,EAAE,EAAE;MAClCN,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMc,YAAYA,CAAChC,WAAoB,EAAE;IACvC,OAAO,IAAI,CAACH,OAAO,CAAC,YAAY,EAAE,CAAC,CAAC,EAAEG,WAAW,CAAC;EACpD;EAEA,MAAMiC,cAAcA,CAACC,YAAiB,EAAElC,WAAoB,EAAE;IAC5D,OAAO,IAAI,CAACH,OAAO,CAAC,YAAY,EAAE;MAChCqB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACc,YAAY;IACnC,CAAC,EAAElC,WAAW,CAAC;EACjB;EAEA,MAAMmC,cAAcA,CAACX,EAAU,EAAEU,YAAiB,EAAElC,WAAoB,EAAE;IACxE,OAAO,IAAI,CAACH,OAAO,CAAC,cAAc2B,EAAE,EAAE,EAAE;MACtCN,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACc,YAAY;IACnC,CAAC,EAAElC,WAAW,CAAC;EACjB;EAEA,MAAMoC,cAAcA,CAACZ,EAAU,EAAExB,WAAoB,EAAE;IACrD,OAAO,IAAI,CAACH,OAAO,CAAC,cAAc2B,EAAE,EAAE,EAAE;MACtCN,MAAM,EAAE;IACV,CAAC,EAAElB,WAAW,CAAC;EACjB;;EAEA;EACA,MAAMqC,SAASA,CAACrC,WAAoB,EAAE;IACpC,OAAO,IAAI,CAACH,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,EAAEG,WAAW,CAAC;EACjD;EAEA,MAAMsC,WAAWA,CAACC,SAAc,EAAEvC,WAAoB,EAAE;IACtD,OAAO,IAAI,CAACH,OAAO,CAAC,SAAS,EAAE;MAC7BqB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACmB,SAAS;IAChC,CAAC,EAAEvC,WAAW,CAAC;EACjB;EAEA,MAAMwC,WAAWA,CAAChB,EAAU,EAAEe,SAAc,EAAEvC,WAAoB,EAAE;IAClE,OAAO,IAAI,CAACH,OAAO,CAAC,WAAW2B,EAAE,EAAE,EAAE;MACnCN,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACmB,SAAS;IAChC,CAAC,EAAEvC,WAAW,CAAC;EACjB;EAEA,MAAMyC,WAAWA,CAACjB,EAAU,EAAExB,WAAoB,EAAE;IAClD,OAAO,IAAI,CAACH,OAAO,CAAC,WAAW2B,EAAE,EAAE,EAAE;MACnCN,MAAM,EAAE;IACV,CAAC,EAAElB,WAAW,CAAC;EACjB;;EAEA;EACA,MAAM0C,QAAQA,CAAA,EAAG;IACf,OAAO,IAAI,CAAC7C,OAAO,CAAC,QAAQ,CAAC;EAC/B;EAEA,MAAM8C,mBAAmBA,CAAA,EAAG;IAC1BrD,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;IAChE,MAAMa,QAAQ,GAAG,MAAM,IAAI,CAACP,OAAO,CAAC,QAAQ,CAAC;IAC7CP,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAEqD,KAAK,CAACC,OAAO,CAACzC,QAAQ,CAACE,IAAI,CAAC,GAAGF,QAAQ,CAACE,IAAI,CAACwC,MAAM,GAAG,CAAC,CAAC;IACrH,OAAO1C,QAAQ;EACjB;EAEA,MAAM2C,UAAUA,CAACC,QAAa,EAAE;IAC9B,OAAO,IAAI,CAACnD,OAAO,CAAC,QAAQ,EAAE;MAC5BqB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAAC4B,QAAQ;IAC/B,CAAC,CAAC;EACJ;EAEA,MAAMC,UAAUA,CAACzB,EAAU,EAAEwB,QAAa,EAAE;IAC1C,OAAO,IAAI,CAACnD,OAAO,CAAC,UAAU2B,EAAE,EAAE,EAAE;MAClCN,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAAC4B,QAAQ;IAC/B,CAAC,CAAC;EACJ;EAEA,MAAME,UAAUA,CAAC1B,EAAU,EAAE;IAC3B,OAAO,IAAI,CAAC3B,OAAO,CAAC,UAAU2B,EAAE,EAAE,EAAE;MAClCN,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMiC,eAAeA,CAAA,EAAG;IACtB,OAAO,IAAI,CAACtD,OAAO,CAAC,eAAe,CAAC;EACtC;EAEA,MAAMuD,iBAAiBA,CAACC,eAAoB,EAAE;IAC5C,OAAO,IAAI,CAACxD,OAAO,CAAC,eAAe,EAAE;MACnCqB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACiC,eAAe;IACtC,CAAC,CAAC;EACJ;EAEA,MAAMC,iBAAiBA,CAAC9B,EAAU,EAAE6B,eAAoB,EAAE;IACxD,OAAO,IAAI,CAACxD,OAAO,CAAC,iBAAiB2B,EAAE,EAAE,EAAE;MACzCN,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACiC,eAAe;IACtC,CAAC,CAAC;EACJ;EAEA,MAAME,iBAAiBA,CAAC/B,EAAU,EAAE;IAClC,OAAO,IAAI,CAAC3B,OAAO,CAAC,iBAAiB2B,EAAE,EAAE,EAAE;MACzCN,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMsC,UAAUA,CAAA,EAAG;IACjB,OAAO,IAAI,CAAC3D,OAAO,CAAC,UAAU,CAAC;EACjC;EAEA,MAAM4D,iBAAiBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAAC5D,OAAO,CAAC,oBAAoB,CAAC;EAC3C;EAEA,MAAM6D,iBAAiBA,CAACC,UAAkB,EAAE;IAC1C,OAAO,IAAI,CAAC9D,OAAO,CAAC,qBAAqB8D,UAAU,EAAE,CAAC;EACxD;EAEA,MAAMC,cAAcA,CAACC,OAAe,EAAE;IACpC,OAAO,IAAI,CAAChE,OAAO,CAAC,kBAAkBgE,OAAO,EAAE,CAAC;EAClD;EAEA,MAAMC,aAAaA,CAACC,MAAc,EAAE;IAClC,OAAO,IAAI,CAAClE,OAAO,CAAC,iBAAiBkE,MAAM,EAAE,CAAC;EAChD;;EAEA;EACA,MAAMC,kBAAkBA,CAACL,UAAkB,EAAE;IAC3C,OAAO,IAAI,CAAC9D,OAAO,CAAC,cAAc8D,UAAU,UAAU,CAAC;EACzD;EAEA,MAAMM,qBAAqBA,CAACN,UAAkB,EAAEO,WAAgB,EAAE;IAChE,OAAO,IAAI,CAACrE,OAAO,CAAC,cAAc8D,UAAU,UAAU,EAAE;MACtDzC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAAC8C,WAAW;IAClC,CAAC,CAAC;EACJ;EAIA,MAAMC,qBAAqBA,CAACR,UAAkB,EAAEO,WAAgB,EAAE;IAChE,OAAO,IAAI,CAACrE,OAAO,CAAC,cAAc8D,UAAU,UAAU,EAAE;MACtDzC,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAAC8C,WAAW;IAClC,CAAC,CAAC;EACJ;EAEA,MAAME,qBAAqBA,CAACT,UAAkB,EAA8B;IAC1E,OAAO,IAAI,CAAC9D,OAAO,CAAC,cAAc8D,UAAU,UAAU,EAAE;MACtDzC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMmD,yBAAyBA,CAACV,UAAkB,EAAEW,WAAkB,EAA6B;IACjG,OAAO,IAAI,CAACzE,OAAO,CAAC,cAAc8D,UAAU,cAAc,EAAE;MAC1DzC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAAC;QAAEkD;MAAY,CAAC;IACtC,CAAC,CAAC;EACJ;EAEA,MAAMC,sBAAsBA,CAACZ,UAAkB,EAA+B;IAC5E,OAAO,IAAI,CAAC9D,OAAO,CAAC,cAAc8D,UAAU,cAAc,CAAC;EAC7D;EAEA,MAAMa,wBAAwBA,CAACb,UAAkB,EAAEc,YAAoB,EAA6B;IAClG,OAAO,IAAI,CAAC5E,OAAO,CAAC,cAAc8D,UAAU,gBAAgBc,YAAY,EAAE,EAAE;MAC1EvD,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMwD,sBAAsBA,CAACf,UAAkB,EAAEgB,YAAiB,EAA6B;IAC7F,OAAO,IAAI,CAAC9E,OAAO,CAAC,cAAc8D,UAAU,WAAW,EAAE;MACvDzC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACuD,YAAY;IACnC,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMC,SAASA,CAAA,EAAgC;IAC7C,OAAO,IAAI,CAAC/E,OAAO,CAAC,SAAS,CAAC;EAChC;EAEA,MAAMgF,QAAQA,CAACrD,EAAU,EAA6B;IACpD,OAAO,IAAI,CAAC3B,OAAO,CAAC,WAAW2B,EAAE,EAAE,CAAC;EACtC;EAEA,MAAMsD,WAAWA,CAACC,SAAc,EAA6B;IAC3D,OAAO,IAAI,CAAClF,OAAO,CAAC,SAAS,EAAE;MAC7BqB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAAC2D,SAAS;IAChC,CAAC,CAAC;EACJ;EAEA,MAAMC,WAAWA,CAACxD,EAAU,EAAEuD,SAAc,EAA6B;IACvE,OAAO,IAAI,CAAClF,OAAO,CAAC,WAAW2B,EAAE,EAAE,EAAE;MACnCN,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAAC2D,SAAS;IAChC,CAAC,CAAC;EACJ;EAEA,MAAME,WAAWA,CAACzD,EAAU,EAA6B;IACvD,OAAO,IAAI,CAAC3B,OAAO,CAAC,WAAW2B,EAAE,EAAE,EAAE;MACnCN,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,MAAMgE,YAAYA,CAAC1D,EAAU,EAAE2D,WAAgB,EAA6B;IAC1E,OAAO,IAAI,CAACtF,OAAO,CAAC,WAAW2B,EAAE,WAAW,EAAE;MAC5CN,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAAC+D,WAAW;IAClC,CAAC,CAAC;EACJ;EAEA,MAAMC,aAAaA,CAAC5D,EAAU,EAAE6D,YAAiB,EAA6B;IAC5E,OAAO,IAAI,CAACxF,OAAO,CAAC,WAAW2B,EAAE,YAAY,EAAE;MAC7CN,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE/B,IAAI,CAACgC,SAAS,CAACiE,YAAY;IACnC,CAAC,CAAC;EACJ;EAEA,MAAMC,cAAcA,CAAC9D,EAAU,EAAE+D,MAAY,EAA+B;IAC1E,MAAMC,WAAW,GAAGD,MAAM,GAAG,IAAIE,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC,GAAG,EAAE;IACxE,OAAO,IAAI,CAAC7F,OAAO,CAAC,WAAW2B,EAAE,UAAUgE,WAAW,GAAG,IAAIA,WAAW,EAAE,GAAG,EAAE,EAAE,CAAC;EACpF;EAEA,MAAMG,sBAAsBA,CAACnE,EAAU,EAAE+D,MAAY,EAA+B;IAClF,MAAMC,WAAW,GAAGD,MAAM,GAAG,IAAIE,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC,GAAG,EAAE;IACxE,OAAO,IAAI,CAAC7F,OAAO,CAAC,WAAW2B,EAAE,mBAAmBgE,WAAW,GAAG,IAAIA,WAAW,EAAE,GAAG,EAAE,EAAE,CAAC;EAC7F;;EAEA;EACA,MAAMI,GAAGA,CAAU9F,QAAgB,EAAEE,WAAoB,EAA2B;IAClF,OAAO,IAAI,CAACH,OAAO,CAAIC,QAAQ,EAAE;MAAEoB,MAAM,EAAE;IAAM,CAAC,EAAElB,WAAW,CAAC;EAClE;EAEA,MAAM6F,IAAIA,CAAU/F,QAAgB,EAAEQ,IAAU,EAAEN,WAAoB,EAA2B;IAC/F,OAAO,IAAI,CAACH,OAAO,CAAIC,QAAQ,EAAE;MAC/BoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEb,IAAI,GAAGlB,IAAI,CAACgC,SAAS,CAACd,IAAI,CAAC,GAAGwF;IACtC,CAAC,EAAE9F,WAAW,CAAC;EACjB;EAEA,MAAM+F,GAAGA,CAAUjG,QAAgB,EAAEQ,IAAU,EAAEN,WAAoB,EAA2B;IAC9F,OAAO,IAAI,CAACH,OAAO,CAAIC,QAAQ,EAAE;MAC/BoB,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEb,IAAI,GAAGlB,IAAI,CAACgC,SAAS,CAACd,IAAI,CAAC,GAAGwF;IACtC,CAAC,EAAE9F,WAAW,CAAC;EACjB;EAEA,MAAMgG,MAAMA,CAAUlG,QAAgB,EAAEE,WAAoB,EAA2B;IACrF,OAAO,IAAI,CAACH,OAAO,CAAIC,QAAQ,EAAE;MAAEoB,MAAM,EAAE;IAAS,CAAC,EAAElB,WAAW,CAAC;EACrE;AACF;;AAEA;AACA,OAAO,MAAMiG,SAAS,GAAG,IAAItH,SAAS,CAAC,CAAC;AACxC,eAAesH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}