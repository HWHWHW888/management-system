{"ast":null,"code":"// Permission utility functions for role-based access control\n\nexport const isReadOnlyRole = role => {\n  return role === 'boss' || role === 'staff';\n};\nexport const canEdit = role => {\n  return role === 'admin' || role === 'agent';\n};\nexport const canView = role => {\n  return ['admin', 'agent', 'staff', 'boss'].includes(role);\n};\nexport const canManageStaff = role => {\n  return role === 'admin' || role === 'boss';\n};\nexport const canManageAgents = role => {\n  return role === 'admin' || role === 'boss';\n};\nexport const canManageCustomers = role => {\n  return role === 'admin' || role === 'agent';\n};\nexport const canAccessDashboard = role => {\n  return role === 'admin' || role === 'agent' || role === 'boss';\n};\nexport const canAccessProjects = role => {\n  return role === 'admin' || role === 'agent' || role === 'boss';\n};\nexport const canAccessData = role => {\n  return role === 'admin' || role === 'boss';\n};\nexport const getPermissionMessage = role => {\n  switch (role) {\n    case 'boss':\n      return 'You have read-only access to all system data.';\n    case 'staff':\n      return 'You have limited access to customer and agent information.';\n    case 'agent':\n      return 'You can manage your customers and view relevant data.';\n    case 'admin':\n      return 'You have full administrative access to all system features.';\n    default:\n      return 'Access level not recognized.';\n  }\n};","map":{"version":3,"names":["isReadOnlyRole","role","canEdit","canView","includes","canManageStaff","canManageAgents","canManageCustomers","canAccessDashboard","canAccessProjects","canAccessData","getPermissionMessage"],"sources":["/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/src/utils/permissions.ts"],"sourcesContent":["// Permission utility functions for role-based access control\n\nexport const isReadOnlyRole = (role: string): boolean => {\n  return role === 'boss' || role === 'staff';\n};\n\nexport const canEdit = (role: string): boolean => {\n  return role === 'admin' || role === 'agent';\n};\n\nexport const canView = (role: string): boolean => {\n  return ['admin', 'agent', 'staff', 'boss'].includes(role);\n};\n\nexport const canManageStaff = (role: string): boolean => {\n  return role === 'admin' || role === 'boss';\n};\n\nexport const canManageAgents = (role: string): boolean => {\n  return role === 'admin' || role === 'boss';\n};\n\nexport const canManageCustomers = (role: string): boolean => {\n  return role === 'admin' || role === 'agent';\n};\n\nexport const canAccessDashboard = (role: string): boolean => {\n  return role === 'admin' || role === 'agent' || role === 'boss';\n};\n\nexport const canAccessProjects = (role: string): boolean => {\n  return role === 'admin' || role === 'agent' || role === 'boss';\n};\n\nexport const canAccessData = (role: string): boolean => {\n  return role === 'admin' || role === 'boss';\n};\n\nexport const getPermissionMessage = (role: string): string => {\n  switch (role) {\n    case 'boss':\n      return 'You have read-only access to all system data.';\n    case 'staff':\n      return 'You have limited access to customer and agent information.';\n    case 'agent':\n      return 'You can manage your customers and view relevant data.';\n    case 'admin':\n      return 'You have full administrative access to all system features.';\n    default:\n      return 'Access level not recognized.';\n  }\n};\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,cAAc,GAAIC,IAAY,IAAc;EACvD,OAAOA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,OAAO;AAC5C,CAAC;AAED,OAAO,MAAMC,OAAO,GAAID,IAAY,IAAc;EAChD,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO;AAC7C,CAAC;AAED,OAAO,MAAME,OAAO,GAAIF,IAAY,IAAc;EAChD,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAACG,QAAQ,CAACH,IAAI,CAAC;AAC3D,CAAC;AAED,OAAO,MAAMI,cAAc,GAAIJ,IAAY,IAAc;EACvD,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,MAAM;AAC5C,CAAC;AAED,OAAO,MAAMK,eAAe,GAAIL,IAAY,IAAc;EACxD,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,MAAM;AAC5C,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAIN,IAAY,IAAc;EAC3D,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO;AAC7C,CAAC;AAED,OAAO,MAAMO,kBAAkB,GAAIP,IAAY,IAAc;EAC3D,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,MAAM;AAChE,CAAC;AAED,OAAO,MAAMQ,iBAAiB,GAAIR,IAAY,IAAc;EAC1D,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,MAAM;AAChE,CAAC;AAED,OAAO,MAAMS,aAAa,GAAIT,IAAY,IAAc;EACtD,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,MAAM;AAC5C,CAAC;AAED,OAAO,MAAMU,oBAAoB,GAAIV,IAAY,IAAa;EAC5D,QAAQA,IAAI;IACV,KAAK,MAAM;MACT,OAAO,+CAA+C;IACxD,KAAK,OAAO;MACV,OAAO,4DAA4D;IACrE,KAAK,OAAO;MACV,OAAO,uDAAuD;IAChE,KAAK,OAAO;MACV,OAAO,6DAA6D;IACtE;MACE,OAAO,8BAA8B;EACzC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}