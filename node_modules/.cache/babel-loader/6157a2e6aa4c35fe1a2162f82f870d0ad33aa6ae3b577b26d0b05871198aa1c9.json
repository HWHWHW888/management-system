{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/src/contexts/CurrencyContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { convertAmount, getCurrencySymbol } from '../utils/currency';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrencyContext = /*#__PURE__*/createContext(undefined);\nexport const CurrencyProvider = ({\n  children\n}) => {\n  _s();\n  // 从localStorage获取保存的货币设置，默认为HKD\n  const [globalCurrency, setGlobalCurrencyState] = useState(() => {\n    const saved = localStorage.getItem('globalCurrency');\n    return saved || 'HKD';\n  });\n\n  // 货币转换缓存 - 避免重复计算\n  const [conversionCache, setConversionCache] = useState(new Map());\n\n  // 保存货币设置到localStorage\n  const setGlobalCurrency = currency => {\n    setGlobalCurrencyState(currency);\n    localStorage.setItem('globalCurrency', currency);\n    // 清除缓存，因为目标货币改变了\n    setConversionCache(new Map());\n    console.log('🌍 Global currency changed to:', currency);\n  };\n\n  // 获取当前货币符号\n  const currencySymbol = getCurrencySymbol(globalCurrency);\n\n  // 转换金额到全局货币\n  const convertToGlobalCurrency = (amount, fromCurrency = 'HKD', trip) => {\n    if (!amount || amount === 0) return 0;\n    if (fromCurrency === globalCurrency) return amount;\n\n    // 生成缓存键\n    const cacheKey = `${amount}_${fromCurrency}_${globalCurrency}_${(trip === null || trip === void 0 ? void 0 : trip.id) || 'no-trip'}`;\n\n    // 检查缓存\n    if (conversionCache.has(cacheKey)) {\n      return conversionCache.get(cacheKey);\n    }\n\n    // 执行转换\n    let convertedAmount = amount;\n    if (trip) {\n      // 使用trip的汇率进行转换\n      convertedAmount = convertAmount(amount, fromCurrency, globalCurrency, trip);\n    } else {\n      // 如果没有trip信息，使用默认汇率（1:1）\n      console.warn(`⚠️ No trip info for currency conversion: ${fromCurrency} -> ${globalCurrency}`);\n      convertedAmount = amount; // 暂时不转换\n    }\n\n    // 缓存结果\n    const newCache = new Map(conversionCache);\n    newCache.set(cacheKey, convertedAmount);\n    setConversionCache(newCache);\n    console.log('💱 Currency conversion:', {\n      amount,\n      fromCurrency,\n      toCurrency: globalCurrency,\n      convertedAmount,\n      tripId: trip === null || trip === void 0 ? void 0 : trip.id,\n      cached: false\n    });\n    return convertedAmount;\n  };\n\n  // 格式化为全局货币显示\n  const formatGlobalCurrency = (amount, fromCurrency = 'HKD', trip) => {\n    const convertedAmount = convertToGlobalCurrency(amount, fromCurrency, trip);\n    return `${currencySymbol}${Math.abs(convertedAmount).toLocaleString('en-US', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    })}`;\n  };\n\n  // 清除缓存\n  const clearCache = () => {\n    setConversionCache(new Map());\n    console.log('🗑️ Currency conversion cache cleared');\n  };\n\n  // 监听全局货币变化，记录日志\n  useEffect(() => {\n    console.log('🌍 Global currency context initialized:', {\n      globalCurrency,\n      currencySymbol,\n      cacheSize: conversionCache.size\n    });\n  }, [globalCurrency, currencySymbol, conversionCache.size]);\n  const value = {\n    globalCurrency,\n    setGlobalCurrency,\n    convertToGlobalCurrency,\n    formatGlobalCurrency,\n    currencySymbol,\n    conversionCache,\n    clearCache\n  };\n  return /*#__PURE__*/_jsxDEV(CurrencyContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(CurrencyProvider, \"kY++ecaDMKa8zOjGV7/yHMnjBvk=\");\n_c = CurrencyProvider;\nexport const useCurrency = () => {\n  _s2();\n  const context = useContext(CurrencyContext);\n  if (context === undefined) {\n    throw new Error('useCurrency must be used within a CurrencyProvider');\n  }\n  return context;\n};\n_s2(useCurrency, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default CurrencyContext;\nvar _c;\n$RefreshReg$(_c, \"CurrencyProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","convertAmount","getCurrencySymbol","jsxDEV","_jsxDEV","CurrencyContext","undefined","CurrencyProvider","children","_s","globalCurrency","setGlobalCurrencyState","saved","localStorage","getItem","conversionCache","setConversionCache","Map","setGlobalCurrency","currency","setItem","console","log","currencySymbol","convertToGlobalCurrency","amount","fromCurrency","trip","cacheKey","id","has","get","convertedAmount","warn","newCache","set","toCurrency","tripId","cached","formatGlobalCurrency","Math","abs","toLocaleString","minimumFractionDigits","maximumFractionDigits","clearCache","cacheSize","size","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCurrency","_s2","context","Error","$RefreshReg$"],"sources":["/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/src/contexts/CurrencyContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { SUPPORTED_CURRENCIES, convertAmount, getCurrencySymbol } from '../utils/currency';\n\nexport interface CurrencyContextType {\n  globalCurrency: string;\n  setGlobalCurrency: (currency: string) => void;\n  convertToGlobalCurrency: (amount: number, fromCurrency: string, trip?: any) => number;\n  formatGlobalCurrency: (amount: number, fromCurrency?: string, trip?: any) => string;\n  currencySymbol: string;\n  conversionCache: Map<string, number>;\n  clearCache: () => void;\n}\n\nconst CurrencyContext = createContext<CurrencyContextType | undefined>(undefined);\n\ninterface CurrencyProviderProps {\n  children: ReactNode;\n}\n\nexport const CurrencyProvider: React.FC<CurrencyProviderProps> = ({ children }) => {\n  // 从localStorage获取保存的货币设置，默认为HKD\n  const [globalCurrency, setGlobalCurrencyState] = useState<string>(() => {\n    const saved = localStorage.getItem('globalCurrency');\n    return saved || 'HKD';\n  });\n\n  // 货币转换缓存 - 避免重复计算\n  const [conversionCache, setConversionCache] = useState<Map<string, number>>(new Map());\n\n  // 保存货币设置到localStorage\n  const setGlobalCurrency = (currency: string) => {\n    setGlobalCurrencyState(currency);\n    localStorage.setItem('globalCurrency', currency);\n    // 清除缓存，因为目标货币改变了\n    setConversionCache(new Map());\n    console.log('🌍 Global currency changed to:', currency);\n  };\n\n  // 获取当前货币符号\n  const currencySymbol = getCurrencySymbol(globalCurrency);\n\n  // 转换金额到全局货币\n  const convertToGlobalCurrency = (amount: number, fromCurrency: string = 'HKD', trip?: any): number => {\n    if (!amount || amount === 0) return 0;\n    if (fromCurrency === globalCurrency) return amount;\n\n    // 生成缓存键\n    const cacheKey = `${amount}_${fromCurrency}_${globalCurrency}_${trip?.id || 'no-trip'}`;\n    \n    // 检查缓存\n    if (conversionCache.has(cacheKey)) {\n      return conversionCache.get(cacheKey)!;\n    }\n\n    // 执行转换\n    let convertedAmount = amount;\n    \n    if (trip) {\n      // 使用trip的汇率进行转换\n      convertedAmount = convertAmount(amount, fromCurrency, globalCurrency, trip);\n    } else {\n      // 如果没有trip信息，使用默认汇率（1:1）\n      console.warn(`⚠️ No trip info for currency conversion: ${fromCurrency} -> ${globalCurrency}`);\n      convertedAmount = amount; // 暂时不转换\n    }\n\n    // 缓存结果\n    const newCache = new Map(conversionCache);\n    newCache.set(cacheKey, convertedAmount);\n    setConversionCache(newCache);\n\n    console.log('💱 Currency conversion:', {\n      amount,\n      fromCurrency,\n      toCurrency: globalCurrency,\n      convertedAmount,\n      tripId: trip?.id,\n      cached: false\n    });\n\n    return convertedAmount;\n  };\n\n  // 格式化为全局货币显示\n  const formatGlobalCurrency = (amount: number, fromCurrency: string = 'HKD', trip?: any): string => {\n    const convertedAmount = convertToGlobalCurrency(amount, fromCurrency, trip);\n    return `${currencySymbol}${Math.abs(convertedAmount).toLocaleString('en-US', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    })}`;\n  };\n\n  // 清除缓存\n  const clearCache = () => {\n    setConversionCache(new Map());\n    console.log('🗑️ Currency conversion cache cleared');\n  };\n\n  // 监听全局货币变化，记录日志\n  useEffect(() => {\n    console.log('🌍 Global currency context initialized:', {\n      globalCurrency,\n      currencySymbol,\n      cacheSize: conversionCache.size\n    });\n  }, [globalCurrency, currencySymbol, conversionCache.size]);\n\n  const value: CurrencyContextType = {\n    globalCurrency,\n    setGlobalCurrency,\n    convertToGlobalCurrency,\n    formatGlobalCurrency,\n    currencySymbol,\n    conversionCache,\n    clearCache\n  };\n\n  return (\n    <CurrencyContext.Provider value={value}>\n      {children}\n    </CurrencyContext.Provider>\n  );\n};\n\nexport const useCurrency = (): CurrencyContextType => {\n  const context = useContext(CurrencyContext);\n  if (context === undefined) {\n    throw new Error('useCurrency must be used within a CurrencyProvider');\n  }\n  return context;\n};\n\nexport default CurrencyContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}