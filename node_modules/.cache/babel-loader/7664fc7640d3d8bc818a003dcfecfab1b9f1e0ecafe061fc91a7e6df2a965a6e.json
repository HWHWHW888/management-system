{"ast":null,"code":"\"use client\";\n\n// src/alert-dialog.tsx\nimport _objectSpread from \"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"__scopeAlertDialog\"],\n  _excluded2 = [\"__scopeAlertDialog\"],\n  _excluded3 = [\"__scopeAlertDialog\"],\n  _excluded4 = [\"__scopeAlertDialog\"],\n  _excluded5 = [\"__scopeAlertDialog\", \"children\"],\n  _excluded6 = [\"__scopeAlertDialog\"],\n  _excluded7 = [\"__scopeAlertDialog\"],\n  _excluded8 = [\"__scopeAlertDialog\"],\n  _excluded9 = [\"__scopeAlertDialog\"];\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { createDialogScope } from \"@radix-ui/react-dialog\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createSlottable } from \"@radix-ui/react-slot\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar ROOT_NAME = \"AlertDialog\";\nvar [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [createDialogScope]);\nvar useDialogScope = createDialogScope();\nvar AlertDialog = props => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    alertDialogProps = _objectWithoutProperties(props, _excluded);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Root, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), alertDialogProps), {}, {\n    modal: true\n  }));\n};\nAlertDialog.displayName = ROOT_NAME;\nvar TRIGGER_NAME = \"AlertDialogTrigger\";\nvar AlertDialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    triggerProps = _objectWithoutProperties(props, _excluded2);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Trigger, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), triggerProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAlertDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"AlertDialogPortal\";\nvar AlertDialogPortal = props => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    portalProps = _objectWithoutProperties(props, _excluded3);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Portal, _objectSpread(_objectSpread({}, dialogScope), portalProps));\n};\nAlertDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"AlertDialogOverlay\";\nvar AlertDialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    overlayProps = _objectWithoutProperties(props, _excluded4);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Overlay, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), overlayProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAlertDialogOverlay.displayName = OVERLAY_NAME;\nvar CONTENT_NAME = \"AlertDialogContent\";\nvar [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME);\nvar Slottable = createSlottable(\"AlertDialogContent\");\nvar AlertDialogContent = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog,\n      children\n    } = props,\n    contentProps = _objectWithoutProperties(props, _excluded5);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  const cancelRef = React.useRef(null);\n  return /* @__PURE__ */jsx(DialogPrimitive.WarningProvider, {\n    contentName: CONTENT_NAME,\n    titleName: TITLE_NAME,\n    docsSlug: \"alert-dialog\",\n    children: /* @__PURE__ */jsx(AlertDialogContentProvider, {\n      scope: __scopeAlertDialog,\n      cancelRef,\n      children: /* @__PURE__ */jsxs(DialogPrimitive.Content, _objectSpread(_objectSpread(_objectSpread({\n        role: \"alertdialog\"\n      }, dialogScope), contentProps), {}, {\n        ref: composedRefs,\n        onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, event => {\n          var _cancelRef$current;\n          event.preventDefault();\n          (_cancelRef$current = cancelRef.current) === null || _cancelRef$current === void 0 || _cancelRef$current.focus({\n            preventScroll: true\n          });\n        }),\n        onPointerDownOutside: event => event.preventDefault(),\n        onInteractOutside: event => event.preventDefault(),\n        children: [/* @__PURE__ */jsx(Slottable, {\n          children\n        }), /* @__PURE__ */jsx(DescriptionWarning, {\n          contentRef\n        })]\n      }))\n    })\n  });\n});\nAlertDialogContent.displayName = CONTENT_NAME;\nvar TITLE_NAME = \"AlertDialogTitle\";\nvar AlertDialogTitle = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    titleProps = _objectWithoutProperties(props, _excluded6);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Title, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), titleProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAlertDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"AlertDialogDescription\";\nvar AlertDialogDescription = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    descriptionProps = _objectWithoutProperties(props, _excluded7);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Description, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), descriptionProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAlertDialogDescription.displayName = DESCRIPTION_NAME;\nvar ACTION_NAME = \"AlertDialogAction\";\nvar AlertDialogAction = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    actionProps = _objectWithoutProperties(props, _excluded8);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return /* @__PURE__ */jsx(DialogPrimitive.Close, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), actionProps), {}, {\n    ref: forwardedRef\n  }));\n});\nAlertDialogAction.displayName = ACTION_NAME;\nvar CANCEL_NAME = \"AlertDialogCancel\";\nvar AlertDialogCancel = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeAlertDialog\n    } = props,\n    cancelProps = _objectWithoutProperties(props, _excluded9);\n  const {\n    cancelRef\n  } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  const ref = useComposedRefs(forwardedRef, cancelRef);\n  return /* @__PURE__ */jsx(DialogPrimitive.Close, _objectSpread(_objectSpread(_objectSpread({}, dialogScope), cancelProps), {}, {\n    ref\n  }));\n});\nAlertDialogCancel.displayName = CANCEL_NAME;\nvar DescriptionWarning = _ref => {\n  let {\n    contentRef\n  } = _ref;\n  const MESSAGE = \"`\".concat(CONTENT_NAME, \"` requires a description for the component to be accessible for screen reader users.\\n\\nYou can add a description to the `\").concat(CONTENT_NAME, \"` by passing a `\").concat(DESCRIPTION_NAME, \"` component as a child, which also benefits sighted users by adding visible context to the dialog.\\n\\nAlternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `\").concat(CONTENT_NAME, \"`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.\\n\\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog\");\n  React.useEffect(() => {\n    var _contentRef$current;\n    const hasDescription = document.getElementById((_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.getAttribute(\"aria-describedby\"));\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n  return null;\n};\nvar Root2 = AlertDialog;\nvar Trigger2 = AlertDialogTrigger;\nvar Portal2 = AlertDialogPortal;\nvar Overlay2 = AlertDialogOverlay;\nvar Content2 = AlertDialogContent;\nvar Action = AlertDialogAction;\nvar Cancel = AlertDialogCancel;\nvar Title2 = AlertDialogTitle;\nvar Description2 = AlertDialogDescription;\nexport { Action, AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogOverlay, AlertDialogPortal, AlertDialogTitle, AlertDialogTrigger, Cancel, Content2 as Content, Description2 as Description, Overlay2 as Overlay, Portal2 as Portal, Root2 as Root, Title2 as Title, Trigger2 as Trigger, createAlertDialogScope };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}