{"ast":null,"code":"import _objectSpread from\"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Database wrapper that uses backend API instead of direct Supabase calls\nimport{apiClient}from'./apiClient';import{supabase}from'../supabase/supabaseClients';export class DatabaseWrapper{constructor(){// Expose API client for direct access to customer methods\nthis.apiClient=apiClient;}async testConnection(){try{// Test backend API health\nconst apiUrl=process.env.REACT_APP_API_URL||'http://localhost:3001';const response=await fetch(\"\".concat(apiUrl===null||apiUrl===void 0?void 0:apiUrl.replace('/api',''),\"/health\"));const data=await response.json();if(response.ok&&data.status==='OK'){return{success:true,message:'Connected successfully',details:'Backend API connection is healthy'};}else{return{success:false,message:'Connection failed',details:'Backend API is not responding'};}}catch(error){return{success:false,message:'Connection error',details:error.message};}}async isHealthy(){try{const connectionTest=await this.testConnection();return connectionTest.success;}catch(err){console.error('❌ Database health check error:',err);return false;}}async get(table){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];try{let data=[];switch(table){case'users':const usersResponse=await apiClient.getUsers();data=usersResponse.success?usersResponse.data||[]:[];break;case'customers':const customersResponse=await apiClient.getCustomers();data=customersResponse.success?customersResponse.data||[]:[];break;case'agents':const agentsResponse=await apiClient.getAgents();data=agentsResponse.success?agentsResponse.data||[]:[];break;case'trips':const tripsResponse=await apiClient.getTrips();data=tripsResponse.success?tripsResponse.data||[]:[];break;case'transactions':const transactionsResponse=await apiClient.getTransactions();data=transactionsResponse.success?transactionsResponse.data||[]:[];break;case'staff':const staffResponse=await apiClient.getStaffs();data=staffResponse.success?staffResponse.data||[]:[];break;case'rolling_records':const rollingResponse=await apiClient.get('/rolling-records');data=rollingResponse.success?rollingResponse.data||[]:[];break;default:console.warn(\"Table \".concat(table,\" not supported in API wrapper\"));return[];}// Apply filters if provided\nif(filters.length>0){data=data.filter(item=>{return filters.every(filter=>{if(filter.column&&filter.value!==undefined){return item[filter.column]===filter.value;}return true;});});}return data||[];}catch(error){console.error(\"Error fetching from \".concat(table,\":\"),error);return[];}}async save(table,data){try{// For now, we'll handle single record creation\n// In a real implementation, you'd want batch operations\nconst results=[];for(const record of data){let result;switch(table){case'users':result=await apiClient.createUser(record);break;case'customers':result=await apiClient.createCustomer(record);break;case'agents':result=await apiClient.createAgent(record);break;case'trips':result=await apiClient.createTrip(record);break;case'transactions':result=await apiClient.createTransaction(record);break;default:throw new Error(\"Table \".concat(table,\" not supported for save operation\"));}results.push(result);}return{success:true,results};}catch(error){console.error(\"Error saving to \".concat(table,\":\"),error);throw error;}}async initializeTables(){try{console.log('🔄 Backend API handles table initialization...');// Backend API handles table initialization\nreturn true;}catch(error){console.error('❌ Database initialization failed:',error);throw error;}}async initializeSampleDataIfNeeded(){try{// Create admin user directly via Supabase client (bypasses API token requirements)\nconst{data:existingUser}=await supabase.from('users').select('*').eq('username','admin').single();if(!existingUser){var _authData$user;// First create auth user\nconst{data:authData,error:authError}=await supabase.auth.signUp({email:'admin@casino.com',password:'admin123',options:{data:{username:'admin',role:'admin'}}});if(authError&&!authError.message.includes('already registered')){throw authError;}// Then create user profile\nconst userId=(authData===null||authData===void 0?void 0:(_authData$user=authData.user)===null||_authData$user===void 0?void 0:_authData$user.id)||'admin-1';const{error:profileError}=await supabase.from('users').insert([{id:userId,username:'admin',password:'admin123',role:'admin'}]);if(profileError&&!profileError.message.includes('duplicate')){console.warn('Profile creation failed:',profileError);}console.log('✅ Admin user initialized');}}catch(error){console.error('Error initializing sample data:',error);}}// Login method for authentication\nasync login(username,password){try{console.log('🔐 DatabaseWrapper: Starting login process...');const response=await apiClient.login(username,password);console.log('🔐 DatabaseWrapper: Login response:',response);if(!response.success){throw new Error(response.error||'Login failed');}// Extract token from nested response structure\nlet token=null;// Check response.data.data.token (nested structure from apiClient)\nif(response.data&&response.data.data&&typeof response.data.data==='object'&&'token'in response.data.data){token=response.data.data.token;console.log('🔑 DatabaseWrapper: Found token in response.data.data:',token?'YES':'NO');}// Fallback: check response.data.token (direct structure)\nelse if(response.data&&typeof response.data==='object'&&'token'in response.data){token=response.data.token;console.log('🔑 DatabaseWrapper: Found token in response.data:',token?'YES':'NO');}else{var _response$data;console.log('❌ DatabaseWrapper: No token found in either location');console.log('🔍 DatabaseWrapper: response.data structure:',response.data);console.log('🔍 DatabaseWrapper: response.data.data structure:',(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.data);}console.log('🔍 DatabaseWrapper: Login response data:',response.data);console.log('🔍 DatabaseWrapper: Extracted token:',token?'YES':'NO');if(token){console.log('🔑 DatabaseWrapper: Found token in login response');// Get user data from nested response structure\nconst user=response.data&&response.data.data&&typeof response.data.data==='object'&&'user'in response.data.data?response.data.data.user:response.data&&typeof response.data==='object'&&'user'in response.data?response.data.user:{};// Create user object with token - ensure all fields are included\nconst userWithToken=_objectSpread(_objectSpread({},user),{},{token:token,// JWT token\nid:user.id||'80709c8d-8bca-4e4b-817f-c6219d8af871',username:user.username||'admin',role:user.role||'admin'});console.log('🔍 DatabaseWrapper: Final user object being returned:',userWithToken);// Save to localStorage\nlocalStorage.setItem('casinoUser',JSON.stringify(userWithToken));console.log('🔑 DatabaseWrapper: Saved user with token to localStorage:',userWithToken);// Verify localStorage save\nconst savedData=localStorage.getItem('casinoUser');console.log('🔍 DatabaseWrapper: Verified localStorage data:',savedData);// Set token in TokenManager\nconst{tokenManager}=await import('../auth/tokenManager');tokenManager.setToken(token);console.log('🔑 DatabaseWrapper: Set token in tokenManager');// Set token in API client\napiClient.setToken(token);console.log('🔑 DatabaseWrapper: Set token in apiClient');console.log('🔑 DatabaseWrapper: All token operations completed');// Return the complete user object with all fields\nreturn userWithToken;}else{console.log('❌ DatabaseWrapper: No token found in login response');console.log('🔍 DatabaseWrapper: Full response:',response);// Even without token, create a complete user object with role from nested structure\nconst user=response.data&&response.data.data&&typeof response.data.data==='object'&&'user'in response.data.data?response.data.data.user:response.data&&typeof response.data==='object'&&'user'in response.data?response.data.user:response.data&&typeof response.data==='object'?response.data:{};const userWithoutToken=_objectSpread(_objectSpread({},user),{},{id:user.id||'80709c8d-8bca-4e4b-817f-c6219d8af871',username:user.username||'admin',role:user.role||'admin'});console.log('🔍 DatabaseWrapper: User object without token:',userWithoutToken);return userWithoutToken;}}catch(error){console.error('Login error:',error);throw error;}}// Clear all data for fresh start\nasync clearAllDataForFreshStart(){try{console.log('⚠️ Clear data operation should be handled by backend API');// This would need to be implemented as an admin endpoint\nreturn true;}catch(error){console.error('Error during fresh start:',error);throw error;}}// Export all data\nasync exportAllData(){try{const exportData={};const tables=['users','agents','customers','trips','transactions'];for(const table of tables){const data=await this.get(table,[]);exportData[table]=data||[];}return exportData;}catch(error){console.error('Error exporting data:',error);throw error;}}// Import all data\nasync importAllData(data){try{const tables=['users','agents','customers','trips','transactions'];for(const table of tables){if(data[table]&&Array.isArray(data[table])&&data[table].length>0){await this.save(table,data[table]);}}return true;}catch(error){console.error('Error importing data:',error);return false;}}// Get database statistics\ngetStats(){return{mode:'api',healthy:true,lastHealthCheck:new Date().toISOString(),backupCount:0};}// Get available backups\ngetAvailableBackups(){return[];}// Staff management methods\nasync getStaffs(){try{console.log('📋 DatabaseWrapper: Fetching all staff members...');const response=await apiClient.getStaffs();if(!response.success){throw new Error(response.error||'Failed to fetch staff members');}return response.data||[];}catch(error){console.error('❌ DatabaseWrapper: Error fetching staff:',error);throw error;}}async getStaff(id){try{console.log(\"\\uD83D\\uDCCB DatabaseWrapper: Fetching staff member: \".concat(id));const response=await apiClient.getStaff(id);if(!response.success){throw new Error(response.error||'Failed to fetch staff member');}return response.data;}catch(error){console.error('❌ DatabaseWrapper: Error fetching staff:',error);throw error;}}async createStaff(staffData){try{console.log('👤 DatabaseWrapper: Creating staff member...');const response=await apiClient.createStaff(staffData);if(!response.success){throw new Error(response.error||'Failed to create staff member');}return response.data;}catch(error){console.error('❌ DatabaseWrapper: Error creating staff:',error);throw error;}}async updateStaff(id,staffData){try{console.log(\"\\uD83D\\uDC64 DatabaseWrapper: Updating staff member: \".concat(id));const response=await apiClient.updateStaff(id,staffData);if(!response.success){throw new Error(response.error||'Failed to update staff member');}return response.data;}catch(error){console.error('❌ DatabaseWrapper: Error updating staff:',error);throw error;}}async deleteStaff(id){try{console.log(\"\\uD83D\\uDDD1\\uFE0F DatabaseWrapper: Deleting staff member: \".concat(id));const response=await apiClient.deleteStaff(id);if(!response.success){throw new Error(response.error||'Failed to delete staff member');}return response.data;}catch(error){console.error('❌ DatabaseWrapper: Error deleting staff:',error);throw error;}}async staffCheckIn(id,checkInData){try{console.log(\"\\u23F0 DatabaseWrapper: Staff check-in: \".concat(id));const response=await apiClient.staffCheckIn(id,checkInData);if(!response.success){throw new Error(response.error||'Failed to check in staff member');}return response.data;}catch(error){console.error('❌ DatabaseWrapper: Error checking in staff:',error);throw error;}}async staffCheckOut(id,checkOutData){try{console.log(\"\\u23F0 DatabaseWrapper: Staff check-out: \".concat(id));const response=await apiClient.staffCheckOut(id,checkOutData);if(!response.success){throw new Error(response.error||'Failed to check out staff member');}return response.data;}catch(error){console.error('❌ DatabaseWrapper: Error checking out staff:',error);throw error;}}async getStaffShifts(id,params){try{console.log(\"\\uD83D\\uDCCB DatabaseWrapper: Fetching shifts for staff: \".concat(id));const response=await apiClient.getStaffShifts(id,params);if(!response.success){throw new Error(response.error||'Failed to fetch staff shifts');}return response.data||[];}catch(error){console.error('❌ DatabaseWrapper: Error fetching staff shifts:',error);throw error;}}async getStaffRollingRecords(id,params){try{console.log(\"\\uD83D\\uDCCB DatabaseWrapper: Fetching rolling records for staff: \".concat(id));const response=await apiClient.getStaffRollingRecords(id,params);if(!response.success){throw new Error(response.error||'Failed to fetch staff rolling records');}return response.data||[];}catch(error){console.error('❌ DatabaseWrapper: Error fetching staff rolling records:',error);throw error;}}}// Export the wrapped database instance\nexport const db=new DatabaseWrapper();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}