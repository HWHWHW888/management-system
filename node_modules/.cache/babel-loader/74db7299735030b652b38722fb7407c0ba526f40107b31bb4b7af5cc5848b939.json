{"ast":null,"code":"import _objectSpread from \"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"children\"],\n  _excluded2 = [\"scope\", \"children\"];\n// packages/react/context/src/create-context.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction createContext2(rootComponentName, defaultContext) {\n  const Context = React.createContext(defaultContext);\n  const Provider = props => {\n    const {\n        children\n      } = props,\n      context = _objectWithoutProperties(props, _excluded);\n    const value = React.useMemo(() => context, Object.values(context));\n    return /* @__PURE__ */jsx(Context.Provider, {\n      value,\n      children\n    });\n  };\n  Provider.displayName = rootComponentName + \"Provider\";\n  function useContext2(consumerName) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== void 0) return defaultContext;\n    throw new Error(\"`\".concat(consumerName, \"` must be used within `\").concat(rootComponentName, \"`\"));\n  }\n  return [Provider, useContext2];\n}\nfunction createContextScope(scopeName) {\n  let createContextScopeDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let defaultContexts = [];\n  function createContext3(rootComponentName, defaultContext) {\n    const BaseContext = React.createContext(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n    const Provider = props => {\n      var _scope$scopeName;\n      const {\n          scope,\n          children\n        } = props,\n        context = _objectWithoutProperties(props, _excluded2);\n      const Context = (scope === null || scope === void 0 || (_scope$scopeName = scope[scopeName]) === null || _scope$scopeName === void 0 ? void 0 : _scope$scopeName[index]) || BaseContext;\n      const value = React.useMemo(() => context, Object.values(context));\n      return /* @__PURE__ */jsx(Context.Provider, {\n        value,\n        children\n      });\n    };\n    Provider.displayName = rootComponentName + \"Provider\";\n    function useContext2(consumerName, scope) {\n      var _scope$scopeName2;\n      const Context = (scope === null || scope === void 0 || (_scope$scopeName2 = scope[scopeName]) === null || _scope$scopeName2 === void 0 ? void 0 : _scope$scopeName2[index]) || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== void 0) return defaultContext;\n      throw new Error(\"`\".concat(consumerName, \"` must be used within `\").concat(rootComponentName, \"`\"));\n    }\n    return [Provider, useContext2];\n  }\n  const createScope = () => {\n    const scopeContexts = defaultContexts.map(defaultContext => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope) {\n      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;\n      return React.useMemo(() => ({\n        [\"__scope\".concat(scopeName)]: _objectSpread(_objectSpread({}, scope), {}, {\n          [scopeName]: contexts\n        })\n      }), [scope, contexts]);\n    };\n  };\n  createScope.scopeName = scopeName;\n  return [createContext3, composeContextScopes(createScope, ...createContextScopeDeps)];\n}\nfunction composeContextScopes() {\n  for (var _len = arguments.length, scopes = new Array(_len), _key = 0; _key < _len; _key++) {\n    scopes[_key] = arguments[_key];\n  }\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n  const createScope = () => {\n    const scopeHooks = scopes.map(createScope2 => ({\n      useScope: createScope2(),\n      scopeName: createScope2.scopeName\n    }));\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes2, _ref) => {\n        let {\n          useScope,\n          scopeName\n        } = _ref;\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[\"__scope\".concat(scopeName)];\n        return _objectSpread(_objectSpread({}, nextScopes2), currentScope);\n      }, {});\n      return React.useMemo(() => ({\n        [\"__scope\".concat(baseScope.scopeName)]: nextScopes\n      }), [nextScopes]);\n    };\n  };\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\nexport { createContext2 as createContext, createContextScope };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}