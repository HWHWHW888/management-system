{"ast":null,"code":"import _objectSpread from\"/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// API Client for connecting frontend to backend server\nimport{tokenManager}from'../auth/tokenManager';// Use direct backend URL in development, environment variable in production\nconst API_BASE_URL=process.env.NODE_ENV==='development'?'http://localhost:3001/api'// Direct URL for development\n:process.env.REACT_APP_API_URL||'http://localhost:3001/api';class ApiClient{constructor(){let baseUrl=arguments.length>0&&arguments[0]!==undefined?arguments[0]:API_BASE_URL;this.baseUrl=void 0;this.token=null;this.baseUrl=baseUrl;this.initializeToken();}async initializeToken(){// Load token from localStorage on initialization\ntry{const savedUser=localStorage.getItem('casinoUser');if(savedUser){const userData=JSON.parse(savedUser);if(userData.token){this.token=userData.token;console.log('üîë ApiClient: Token loaded from localStorage on init');}}}catch(error){console.warn('‚ö†Ô∏è ApiClient: Failed to load token from localStorage:',error);}}setToken(token){this.token=token;tokenManager.setToken(token);console.log('üîë ApiClient: Token set explicitly:',token?'YES':'NO');}async refreshToken(){console.log('üîÑ ApiClient: Refreshing token...');const token=await tokenManager.getToken();if(token){this.token=token;console.log('üîë ApiClient: Token refreshed successfully');return true;}console.log('‚ùå ApiClient: Token refresh failed - no token available');return false;}// Request interceptor - automatically adds token to all requests\nasync request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let customToken=arguments.length>2?arguments[2]:undefined;const url=\"\".concat(this.baseUrl).concat(endpoint);// Prepare headers with interceptor logic\nconst headers=_objectSpread({'Content-Type':'application/json'},options.headers);// Token interceptor: automatically get and attach token\nlet token=customToken||this.token;// If no token in memory, try to get from localStorage\nif(!token){try{const savedUser=localStorage.getItem('casinoUser');if(savedUser){const userData=JSON.parse(savedUser);if(userData.token){token=userData.token;this.token=token;// Cache in memory\nconsole.log('üîë ApiClient Interceptor: Token retrieved from localStorage');}}}catch(error){console.warn('‚ö†Ô∏è ApiClient Interceptor: Failed to parse localStorage user data');}}// If still no token, try TokenManager as fallback\nif(!token){token=(await tokenManager.getToken())||null;if(token){this.token=token;console.log('üîë ApiClient Interceptor: Token retrieved from TokenManager');}}// Skip auth for login endpoint\nif(endpoint==='/auth/login'){console.log('üîì ApiClient: Skipping auth for login endpoint');}else if(!token){console.error('‚ùå ApiClient Interceptor: No authentication token available');return{success:false,error:'Authentication required - please login first'};}else{// Add Authorization header with token\nheaders['Authorization']=\"Bearer \".concat(token);console.log(\"\\uD83D\\uDD11 ApiClient Interceptor: Added auth header for \".concat(endpoint));}// Debug log for API requests\nconsole.log(\"üì§ API Request:\",{url,method:options.method||'GET',headers,body:options.body});try{const response=await fetch(url,_objectSpread(_objectSpread({},options),{},{headers}));const data=await response.json();if(!response.ok){// Handle 401 Unauthorized - token might be expired\nif(response.status===401&&token){console.warn('üîÑ Token expired, clearing stored tokens...');this.token=null;localStorage.removeItem('casinoUser');tokenManager.clearToken();return{success:false,error:'Session expired - please login again'};}throw new Error(data.message||\"HTTP error! status: \".concat(response.status));}return data;}catch(error){console.error(\"API request failed: \".concat(endpoint),error);return{success:false,error:error instanceof Error?error.message:'Unknown error occurred'};}}// Auth endpoints - login doesn't need token\nasync login(username,password){try{var _responseData$data;console.log('üîê ApiClient: Making login request...');// Use the request method but it will skip auth for /auth/login\nconst response=await this.request('/auth/login',{method:'POST',body:JSON.stringify({username,password})});console.log('üîê ApiClient: Login response:',response);if(!response.success){throw new Error(response.error||'Login failed');}// Extract and store token after successful login\nlet token=null;let user=null;// Handle nested response structure with proper type checking\nconst responseData=response.data;if(responseData!==null&&responseData!==void 0&&(_responseData$data=responseData.data)!==null&&_responseData$data!==void 0&&_responseData$data.token){token=responseData.data.token;user=responseData.data.user||{};}else if(responseData!==null&&responseData!==void 0&&responseData.token){token=responseData.token;user=responseData.user||{};}if(token){console.log('üîë ApiClient: Storing token after successful login');// Store token in memory\nthis.setToken(token);// Create complete user object with token\nconst userWithToken=_objectSpread(_objectSpread({},user),{},{token:token,id:user.id||'admin-1',username:user.username||username,role:user.role||'admin'});// Store in localStorage\nlocalStorage.setItem('casinoUser',JSON.stringify(userWithToken));console.log('üîë ApiClient: Saved user with token to localStorage');// Store in TokenManager\ntokenManager.setToken(token);// Return response with complete user data\nreturn{success:true,data:_objectSpread(_objectSpread({},responseData||{}),{},{data:{token:token,user:userWithToken}})};}return response;}catch(error){console.error('Login request failed:',error);return{success:false,error:error instanceof Error?error.message:'Unknown error occurred'};}}async register(userData){return this.request('/auth/register',{method:'POST',body:JSON.stringify(userData)});}// Users endpoints\nasync getUsers(){return this.request('/users');}async createUser(userData){return this.request('/users',{method:'POST',body:JSON.stringify(userData)});}async updateUser(id,userData){return this.request(\"/users/\".concat(id),{method:'PUT',body:JSON.stringify(userData)});}async deleteUser(id){return this.request(\"/users/\".concat(id),{method:'DELETE'});}// Customers endpoints\nasync getCustomers(customToken){return this.request('/customers',{},customToken);}async createCustomer(customerData,customToken){return this.request('/customers',{method:'POST',body:JSON.stringify(customerData)},customToken);}async updateCustomer(id,customerData,customToken){return this.request(\"/customers/\".concat(id),{method:'PUT',body:JSON.stringify(customerData)},customToken);}async deleteCustomer(id,customToken){return this.request(\"/customers/\".concat(id),{method:'DELETE'},customToken);}// Agents endpoints\nasync getAgents(customToken){return this.request('/agents',{},customToken);}async createAgent(agentData,customToken){return this.request('/agents',{method:'POST',body:JSON.stringify(agentData)},customToken);}async updateAgent(id,agentData,customToken){return this.request(\"/agents/\".concat(id),{method:'PUT',body:JSON.stringify(agentData)},customToken);}async deleteAgent(id,customToken){return this.request(\"/agents/\".concat(id),{method:'DELETE'},customToken);}// Trips endpoints\nasync getTrips(){return this.request('/trips');}async getTripsWithSharing(){console.log('üîÑ ApiClient: Fetching trips with sharing data...');const response=await this.request('/trips');console.log('üìä ApiClient: Trips with sharing data loaded:',Array.isArray(response.data)?response.data.length:0);return response;}async createTrip(tripData){return this.request('/trips',{method:'POST',body:JSON.stringify(tripData)});}async updateTrip(id,tripData){return this.request(\"/trips/\".concat(id),{method:'PUT',body:JSON.stringify(tripData)});}async deleteTrip(id){return this.request(\"/trips/\".concat(id),{method:'DELETE'});}// Transactions endpoints\nasync getTransactions(){return this.request('/transactions');}async createTransaction(transactionData){return this.request('/transactions',{method:'POST',body:JSON.stringify(transactionData)});}async updateTransaction(id,transactionData){return this.request(\"/transactions/\".concat(id),{method:'PUT',body:JSON.stringify(transactionData)});}async deleteTransaction(id){return this.request(\"/transactions/\".concat(id),{method:'DELETE'});}// Reports endpoints\nasync getReports(){return this.request('/reports');}async getDashboardStats(){return this.request('/reports/dashboard');}async getCustomerReport(customerId){return this.request(\"/reports/customer/\".concat(customerId));}async getAgentReport(agentId){return this.request(\"/reports/agent/\".concat(agentId));}async getTripReport(tripId){return this.request(\"/reports/trip/\".concat(tripId));}// Customer Details endpoints\nasync getCustomerDetails(customerId){return this.request(\"/customers/\".concat(customerId,\"/details\"));}async createCustomerDetails(customerId,detailsData){return this.request(\"/customers/\".concat(customerId,\"/details\"),{method:'POST',body:JSON.stringify(detailsData)});}async updateCustomerDetails(customerId,detailsData){return this.request(\"/customers/\".concat(customerId,\"/details\"),{method:'PUT',body:JSON.stringify(detailsData)});}async deleteCustomerDetails(customerId){return this.request(\"/customers/\".concat(customerId,\"/details\"),{method:'DELETE'});}// Customer file attachment methods\nasync uploadCustomerAttachments(customerId,attachments){return this.request(\"/customers/\".concat(customerId,\"/attachments\"),{method:'POST',body:JSON.stringify({attachments})});}async getCustomerAttachments(customerId){return this.request(\"/customers/\".concat(customerId,\"/attachments\"));}async deleteCustomerAttachment(customerId,attachmentId){return this.request(\"/customers/\".concat(customerId,\"/attachments/\").concat(attachmentId),{method:'DELETE'});}// Customer passport file upload\nasync uploadCustomerPassport(customerId,passportData){return this.request(\"/customers/\".concat(customerId,\"/passport\"),{method:'POST',body:JSON.stringify(passportData)});}// Staff endpoints\nasync getStaffs(){return this.request('/staffs');}async getStaff(id){return this.request(\"/staffs/\".concat(id));}async createStaff(staffData){return this.request('/staffs',{method:'POST',body:JSON.stringify(staffData)});}async updateStaff(id,staffData){return this.request(\"/staffs/\".concat(id),{method:'PUT',body:JSON.stringify(staffData)});}async deleteStaff(id){return this.request(\"/staffs/\".concat(id),{method:'DELETE'});}async staffCheckIn(id,checkInData){return this.request(\"/staffs/\".concat(id,\"/check-in\"),{method:'POST',body:JSON.stringify(checkInData)});}async staffCheckOut(id,checkOutData){return this.request(\"/staffs/\".concat(id,\"/check-out\"),{method:'POST',body:JSON.stringify(checkOutData)});}async getStaffShifts(id,params){const queryString=params?new URLSearchParams(params).toString():'';return this.request(\"/staffs/\".concat(id,\"/shifts\").concat(queryString?\"?\".concat(queryString):''));}async getStaffRollingRecords(id,params){const queryString=params?new URLSearchParams(params).toString():'';return this.request(\"/staffs/\".concat(id,\"/rolling-records\").concat(queryString?\"?\".concat(queryString):''));}// Generic HTTP methods for flexible API calls\nasync get(endpoint,customToken){return this.request(endpoint,{method:'GET'},customToken);}async post(endpoint,data,customToken){return this.request(endpoint,{method:'POST',body:data?JSON.stringify(data):undefined},customToken);}async put(endpoint,data,customToken){return this.request(endpoint,{method:'PUT',body:data?JSON.stringify(data):undefined},customToken);}async delete(endpoint,customToken){return this.request(endpoint,{method:'DELETE'},customToken);}}// Export singleton instance\nexport const apiClient=new ApiClient();export default apiClient;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}