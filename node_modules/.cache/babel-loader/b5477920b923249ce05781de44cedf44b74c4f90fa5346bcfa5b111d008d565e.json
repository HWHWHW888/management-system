{"ast":null,"code":"// Database wrapper that uses backend API instead of direct Supabase calls\nimport{apiClient}from'./apiClient';import{supabase}from'../supabase/supabaseClients';export class DatabaseWrapper{constructor(){// Expose API client for direct access to customer methods\nthis.apiClient=apiClient;this.connectionCache=null;this.CACHE_DURATION=30000;}// 30 seconds cache\nasync testConnection(){try{// Check cache first\nif(this.connectionCache){const now=Date.now();if(now-this.connectionCache.timestamp<this.CACHE_DURATION){console.log('‚ö° Using cached connection result');return this.connectionCache.result;}}// Test backend API health with timeout\nconst apiUrl=process.env.REACT_APP_API_URL||'http://localhost:3001';const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),5000);// 5 second timeout\nconst response=await fetch(\"\".concat(apiUrl===null||apiUrl===void 0?void 0:apiUrl.replace('/api',''),\"/health\"),{signal:controller.signal});clearTimeout(timeoutId);const data=await response.json();const result=response.ok&&data.status==='OK'?{success:true,message:'Connected successfully',details:'Backend API connection is healthy'}:{success:false,message:'Connection failed',details:'Backend API is not responding'};// Cache the result\nthis.connectionCache={result,timestamp:Date.now()};return result;}catch(error){const result={success:false,message:'Connection error',details:error.name==='AbortError'?'Connection timeout':error.message};// Cache failed result for shorter time\nthis.connectionCache={result,timestamp:Date.now()-(this.CACHE_DURATION-5000)// Cache for only 5 seconds\n};return result;}}async isHealthy(){try{const connectionTest=await this.testConnection();return connectionTest.success;}catch(err){console.error('‚ùå Database health check error:',err);return false;}}async get(table){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];try{let data=[];switch(table){case'users':const usersResponse=await apiClient.getUsers();data=usersResponse.success?usersResponse.data||[]:[];break;case'customers':const customersResponse=await apiClient.getCustomers();data=customersResponse.success?customersResponse.data||[]:[];break;case'agents':const agentsResponse=await apiClient.getAgents();data=agentsResponse.success?agentsResponse.data||[]:[];break;case'trips':const tripsResponse=await apiClient.getTrips();data=tripsResponse.success?tripsResponse.data||[]:[];break;case'transactions':const transactionsResponse=await apiClient.getTransactions();data=transactionsResponse.success?transactionsResponse.data||[]:[];break;case'staff':const staffResponse=await apiClient.getStaffs();data=staffResponse.success?staffResponse.data||[]:[];break;case'rolling_records':const rollingResponse=await apiClient.get('/rolling-records');data=rollingResponse.success?rollingResponse.data||[]:[];break;default:console.warn(\"Table \".concat(table,\" not supported in API wrapper\"));return[];}// Apply filters if provided\nif(filters.length>0){data=data.filter(item=>{return filters.every(filter=>{if(filter.column&&filter.value!==undefined){return item[filter.column]===filter.value;}return true;});});}return data||[];}catch(error){console.error(\"Error fetching from \".concat(table,\":\"),error);return[];}}async save(table,data){try{// For now, we'll handle single record creation\n// In a real implementation, you'd want batch operations\nconst results=[];for(const record of data){let result;switch(table){case'users':result=await apiClient.createUser(record);break;case'customers':result=await apiClient.createCustomer(record);break;case'agents':result=await apiClient.createAgent(record);break;case'trips':result=await apiClient.createTrip(record);break;case'transactions':result=await apiClient.createTransaction(record);break;default:throw new Error(\"Table \".concat(table,\" not supported for save operation\"));}results.push(result);}return{success:true,results};}catch(error){console.error(\"Error saving to \".concat(table,\":\"),error);throw error;}}async initializeTables(){try{console.log('üîÑ Backend API handles table initialization...');// Backend API handles table initialization\nreturn true;}catch(error){console.error('‚ùå Database initialization failed:',error);throw error;}}async initializeSampleDataIfNeeded(){try{// Quick check if admin user exists with timeout\nconst checkUserPromise=supabase.from('users').select('username').eq('username','admin').single();const timeoutPromise=new Promise((_,reject)=>setTimeout(()=>reject(new Error('Check timeout')),3000));const{data:existingUser}=await Promise.race([checkUserPromise,timeoutPromise]);if(!existingUser){console.log('üîß Creating admin user...');// Parallel user creation with error handling\nconst authPromise=supabase.auth.signUp({email:'admin@casino.com',password:'admin123',options:{data:{username:'admin',role:'admin'}}}).catch(err=>{console.warn('Auth creation skipped:',err.message);return{data:{user:{id:'admin-1'}}};});const profilePromise=(async()=>{try{await supabase.from('users').insert([{id:'admin-1',username:'admin',password:'admin123',role:'admin'}]);console.log('Profile created');return true;}catch(err){if(!err.message.includes('duplicate')){console.warn('Profile creation failed:',err);}return false;}})();// Execute in parallel with timeout\nawait Promise.race([Promise.all([authPromise,profilePromise]),new Promise((_,reject)=>setTimeout(()=>reject(new Error('Initialization timeout')),5000))]);console.log('‚úÖ Admin user initialized');}else{console.log('‚ö° Admin user already exists - skipping');}}catch(error){if(error.message==='Check timeout'||error.message==='Initialization timeout'){console.warn('‚ö†Ô∏è User initialization timed out - continuing anyway');}else{console.error('Error initializing sample data:',error);}// Don't throw - continue with app initialization\n}}async login(username,password){try{var _responseData$data;console.log('üîê DatabaseWrapper: Starting login process...');const response=await apiClient.login(username,password);console.log('üîê DatabaseWrapper: Login response:',response);if(!response.success){throw new Error(response.error||'Login failed');}// ApiClient now handles token storage automatically\n// Just extract the user data from the response\nconst responseData=response.data;let user=null;let token=null;if(responseData!==null&&responseData!==void 0&&(_responseData$data=responseData.data)!==null&&_responseData$data!==void 0&&_responseData$data.user){user=responseData.data.user;token=responseData.data.token;}else if(responseData!==null&&responseData!==void 0&&responseData.user){user=responseData.user;token=responseData.token;}else{// Fallback - create user from response data\nuser={id:(responseData===null||responseData===void 0?void 0:responseData.id)||'admin-1',username:(responseData===null||responseData===void 0?void 0:responseData.username)||username,role:(responseData===null||responseData===void 0?void 0:responseData.role)||'admin'};}console.log('üîë DatabaseWrapper: User extracted:',user);console.log('üîë DatabaseWrapper: Token present:',token?'YES':'NO');// ApiClient already saved to localStorage and set tokens\n// Just return the user object\nreturn user;}catch(error){console.error('Login error:',error);throw error;}}// Clear all data for fresh start\nasync clearAllDataForFreshStart(){try{console.log('‚ö†Ô∏è Clear data operation should be handled by backend API');// This would need to be implemented as an admin endpoint\nreturn true;}catch(error){console.error('Error during fresh start:',error);throw error;}}// Export all data\nasync exportAllData(){try{const exportData={};const tables=['users','agents','customers','trips','transactions'];for(const table of tables){const data=await this.get(table,[]);exportData[table]=data||[];}return exportData;}catch(error){console.error('Error exporting data:',error);throw error;}}// Import all data\nasync importAllData(data){try{const tables=['users','agents','customers','trips','transactions'];for(const table of tables){if(data[table]&&Array.isArray(data[table])&&data[table].length>0){await this.save(table,data[table]);}}return true;}catch(error){console.error('Error importing data:',error);return false;}}// Get database statistics\ngetStats(){return{mode:'api',healthy:true,lastHealthCheck:new Date().toISOString(),backupCount:0};}// Get available backups\ngetAvailableBackups(){return[];}// Staff management methods\nasync getStaffs(){try{console.log('üìã DatabaseWrapper: Fetching all staff members...');const response=await apiClient.getStaffs();if(!response.success){throw new Error(response.error||'Failed to fetch staff members');}return response.data||[];}catch(error){console.error('‚ùå DatabaseWrapper: Error fetching staff:',error);throw error;}}async getStaff(id){try{console.log(\"\\uD83D\\uDCCB DatabaseWrapper: Fetching staff member: \".concat(id));const response=await apiClient.getStaff(id);if(!response.success){throw new Error(response.error||'Failed to fetch staff member');}return response.data;}catch(error){console.error('‚ùå DatabaseWrapper: Error fetching staff:',error);throw error;}}async createStaff(staffData){try{console.log('üë§ DatabaseWrapper: Creating staff member...');const response=await apiClient.createStaff(staffData);if(!response.success){throw new Error(response.error||'Failed to create staff member');}return response.data;}catch(error){console.error('‚ùå DatabaseWrapper: Error creating staff:',error);throw error;}}async updateStaff(id,staffData){try{console.log(\"\\uD83D\\uDC64 DatabaseWrapper: Updating staff member: \".concat(id));const response=await apiClient.updateStaff(id,staffData);if(!response.success){throw new Error(response.error||'Failed to update staff member');}return response.data;}catch(error){console.error('‚ùå DatabaseWrapper: Error updating staff:',error);throw error;}}async deleteStaff(id){try{console.log(\"\\uD83D\\uDDD1\\uFE0F DatabaseWrapper: Deleting staff member: \".concat(id));const response=await apiClient.deleteStaff(id);if(!response.success){throw new Error(response.error||'Failed to delete staff member');}return response.data;}catch(error){console.error('‚ùå DatabaseWrapper: Error deleting staff:',error);throw error;}}async staffCheckIn(id,checkInData){try{console.log(\"\\u23F0 DatabaseWrapper: Staff check-in: \".concat(id));const response=await apiClient.staffCheckIn(id,checkInData);if(!response.success){throw new Error(response.error||'Failed to check in staff member');}return response.data;}catch(error){console.error('‚ùå DatabaseWrapper: Error checking in staff:',error);throw error;}}async staffCheckOut(id,checkOutData){try{console.log(\"\\u23F0 DatabaseWrapper: Staff check-out: \".concat(id));const response=await apiClient.staffCheckOut(id,checkOutData);if(!response.success){throw new Error(response.error||'Failed to check out staff member');}return response.data;}catch(error){console.error('‚ùå DatabaseWrapper: Error checking out staff:',error);throw error;}}async getStaffShifts(id,params){try{console.log(\"\\uD83D\\uDCCB DatabaseWrapper: Fetching shifts for staff: \".concat(id));const response=await apiClient.getStaffShifts(id,params);if(!response.success){throw new Error(response.error||'Failed to fetch staff shifts');}return response.data||[];}catch(error){console.error('‚ùå DatabaseWrapper: Error fetching staff shifts:',error);throw error;}}async getStaffRollingRecords(id,params){try{console.log(\"\\uD83D\\uDCCB DatabaseWrapper: Fetching rolling records for staff: \".concat(id));const response=await apiClient.getStaffRollingRecords(id,params);if(!response.success){throw new Error(response.error||'Failed to fetch staff rolling records');}return response.data||[];}catch(error){console.error('‚ùå DatabaseWrapper: Error fetching staff rolling records:',error);throw error;}}}// Export the wrapped database instance\nexport const db=new DatabaseWrapper();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}