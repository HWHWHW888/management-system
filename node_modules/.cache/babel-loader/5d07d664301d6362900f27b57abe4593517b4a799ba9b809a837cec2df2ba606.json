{"ast":null,"code":"export const SUPPORTED_CURRENCIES = [{\n  value: 'PESO',\n  label: 'Philippine Peso (â‚±)',\n  symbol: 'â‚±'\n}, {\n  value: 'HKD',\n  label: 'Hong Kong Dollar (HK$)',\n  symbol: 'HK$'\n}, {\n  value: 'MYR',\n  label: 'Malaysian Ringgit (RM)',\n  symbol: 'RM'\n}];\nexport const getCurrencySymbol = currency => {\n  const currencyInfo = SUPPORTED_CURRENCIES.find(c => c.value === currency);\n  return (currencyInfo === null || currencyInfo === void 0 ? void 0 : currencyInfo.symbol) || 'HK$';\n};\nexport const convertAmount = (amount, fromCurrency = 'HKD', toCurrency, trip) => {\n  if (!amount || amount === 0) return 0;\n  if (fromCurrency === toCurrency) return amount;\n\n  // All amounts are stored in the trip's base currency, so we need to convert to the viewing currency\n  let rate = 1;\n\n  // Get the trip's base currency (default to HKD if not set)\n  const baseCurrency = trip.currency || 'HKD';\n\n  // If viewing currency is different from base currency, apply conversion\n  if (toCurrency !== baseCurrency) {\n    switch (toCurrency) {\n      case 'PESO':\n        rate = trip.exchange_rate_peso || 1;\n        break;\n      case 'HKD':\n        rate = trip.exchange_rate_hkd || 1;\n        break;\n      case 'MYR':\n        rate = trip.exchange_rate_myr || 1;\n        break;\n      default:\n        rate = 1;\n    }\n  }\n  return amount * rate;\n};\nexport const formatCurrency = (amount, currency = 'HKD', trip) => {\n  if (!amount && amount !== 0) return getCurrencySymbol(currency) + '0.00';\n  const symbol = getCurrencySymbol(currency);\n  const baseCurrency = (trip === null || trip === void 0 ? void 0 : trip.currency) || 'HKD';\n  const convertedAmount = trip ? convertAmount(amount, baseCurrency, currency, trip) : amount;\n\n  // Debug logging\n  if (trip && currency !== baseCurrency) {\n    console.log('ðŸ’± Currency conversion:', {\n      originalAmount: amount,\n      fromCurrency: baseCurrency,\n      toCurrency: currency,\n      exchangeRate: currency === 'MYR' ? trip.exchange_rate_myr : currency === 'PESO' ? trip.exchange_rate_peso : trip.exchange_rate_hkd,\n      convertedAmount: convertedAmount,\n      formattedResult: `${symbol}${Math.abs(convertedAmount).toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      })}`\n    });\n  }\n  return `${symbol}${Math.abs(convertedAmount).toLocaleString('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  })}`;\n};\nexport const formatCurrencyWithSign = (amount, currency = 'HKD', trip) => {\n  if (!amount && amount !== 0) return getCurrencySymbol(currency) + '0.00';\n  const symbol = getCurrencySymbol(currency);\n  const baseCurrency = (trip === null || trip === void 0 ? void 0 : trip.currency) || 'HKD';\n  const convertedAmount = trip ? convertAmount(amount, baseCurrency, currency, trip) : amount;\n  const sign = convertedAmount >= 0 ? '' : '-';\n  return `${sign}${symbol}${Math.abs(convertedAmount).toLocaleString('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  })}`;\n};\nexport const getDefaultExchangeRates = () => ({\n  peso: 1.0000,\n  hkd: 1.0000,\n  myr: 1.0000\n});\nexport const updateTripExchangeRates = (trip, currency, rates) => {\n  return {\n    ...trip,\n    currency,\n    exchange_rate_peso: rates.peso || trip.exchange_rate_peso || 1.0000,\n    exchange_rate_hkd: rates.hkd || trip.exchange_rate_hkd || 1.0000,\n    exchange_rate_myr: rates.myr || trip.exchange_rate_myr || 1.0000\n  };\n};","map":{"version":3,"names":["SUPPORTED_CURRENCIES","value","label","symbol","getCurrencySymbol","currency","currencyInfo","find","c","convertAmount","amount","fromCurrency","toCurrency","trip","rate","baseCurrency","exchange_rate_peso","exchange_rate_hkd","exchange_rate_myr","formatCurrency","convertedAmount","console","log","originalAmount","exchangeRate","formattedResult","Math","abs","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatCurrencyWithSign","sign","getDefaultExchangeRates","peso","hkd","myr","updateTripExchangeRates","rates"],"sources":["/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/src/utils/currency.ts"],"sourcesContent":["export interface CurrencyRates {\n  peso: number;\n  hkd: number;\n  myr: number;\n}\n\nexport interface Trip {\n  currency?: string;\n  exchange_rate_peso?: number;\n  exchange_rate_hkd?: number;\n  exchange_rate_myr?: number;\n}\n\nexport const SUPPORTED_CURRENCIES = [\n  { value: 'PESO', label: 'Philippine Peso (â‚±)', symbol: 'â‚±' },\n  { value: 'HKD', label: 'Hong Kong Dollar (HK$)', symbol: 'HK$' },\n  { value: 'MYR', label: 'Malaysian Ringgit (RM)', symbol: 'RM' }\n];\n\nexport const getCurrencySymbol = (currency: string): string => {\n  const currencyInfo = SUPPORTED_CURRENCIES.find(c => c.value === currency);\n  return currencyInfo?.symbol || 'HK$';\n};\n\nexport const convertAmount = (\n  amount: number, \n  fromCurrency: string = 'HKD', \n  toCurrency: string, \n  trip: Trip\n): number => {\n  if (!amount || amount === 0) return 0;\n  if (fromCurrency === toCurrency) return amount;\n\n  // All amounts are stored in the trip's base currency, so we need to convert to the viewing currency\n  let rate = 1;\n  \n  // Get the trip's base currency (default to HKD if not set)\n  const baseCurrency = trip.currency || 'HKD';\n  \n  // If viewing currency is different from base currency, apply conversion\n  if (toCurrency !== baseCurrency) {\n    switch (toCurrency) {\n      case 'PESO':\n        rate = trip.exchange_rate_peso || 1;\n        break;\n      case 'HKD':\n        rate = trip.exchange_rate_hkd || 1;\n        break;\n      case 'MYR':\n        rate = trip.exchange_rate_myr || 1;\n        break;\n      default:\n        rate = 1;\n    }\n  }\n\n  return amount * rate;\n};\n\nexport const formatCurrency = (\n  amount: number, \n  currency: string = 'HKD', \n  trip?: Trip | null\n): string => {\n  if (!amount && amount !== 0) return getCurrencySymbol(currency) + '0.00';\n  \n  const symbol = getCurrencySymbol(currency);\n  const baseCurrency = trip?.currency || 'HKD';\n  const convertedAmount = trip ? convertAmount(amount, baseCurrency, currency, trip) : amount;\n  \n  // Debug logging\n  if (trip && currency !== baseCurrency) {\n    console.log('ðŸ’± Currency conversion:', {\n      originalAmount: amount,\n      fromCurrency: baseCurrency,\n      toCurrency: currency,\n      exchangeRate: currency === 'MYR' ? trip.exchange_rate_myr : currency === 'PESO' ? trip.exchange_rate_peso : trip.exchange_rate_hkd,\n      convertedAmount: convertedAmount,\n      formattedResult: `${symbol}${Math.abs(convertedAmount).toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      })}`\n    });\n  }\n  \n  return `${symbol}${Math.abs(convertedAmount).toLocaleString('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  })}`;\n};\n\nexport const formatCurrencyWithSign = (\n  amount: number, \n  currency: string = 'HKD', \n  trip?: Trip | null\n): string => {\n  if (!amount && amount !== 0) return getCurrencySymbol(currency) + '0.00';\n  \n  const symbol = getCurrencySymbol(currency);\n  const baseCurrency = trip?.currency || 'HKD';\n  const convertedAmount = trip ? convertAmount(amount, baseCurrency, currency, trip) : amount;\n  const sign = convertedAmount >= 0 ? '' : '-';\n  \n  return `${sign}${symbol}${Math.abs(convertedAmount).toLocaleString('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  })}`;\n};\n\nexport const getDefaultExchangeRates = (): CurrencyRates => ({\n  peso: 1.0000,\n  hkd: 1.0000,\n  myr: 1.0000\n});\n\nexport const updateTripExchangeRates = (\n  trip: Trip, \n  currency: string, \n  rates: Partial<CurrencyRates>\n): Trip => {\n  return {\n    ...trip,\n    currency,\n    exchange_rate_peso: rates.peso || trip.exchange_rate_peso || 1.0000,\n    exchange_rate_hkd: rates.hkd || trip.exchange_rate_hkd || 1.0000,\n    exchange_rate_myr: rates.myr || trip.exchange_rate_myr || 1.0000\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}