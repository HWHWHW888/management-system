{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\n\n// Supabase configuration\nconst supabaseUrl = 'https://rtjdqnuzeupbgbovbriy.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ0amRxbnV6ZXVwYmdib3Zicml5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyNjYwOTUsImV4cCI6MjA3MTg0MjA5NX0.5oJes7rJykxuGX0BZFDt4LpTmRJAgoh0wHRpmJ8HTng';\n\n// Create Supabase client\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Database types based on existing schema\n\n// Type-safe table access\n\n// Convenience types for common tables\n\n// Database wrapper with custom methods\nclass DatabaseWrapper {\n  constructor() {\n    this.client = supabase;\n  }\n  async testConnection() {\n    try {\n      const {\n        count,\n        error\n      } = await this.client.from('users').select('*', {\n        count: 'exact',\n        head: true\n      });\n      if (error) {\n        return {\n          success: false,\n          message: 'Connection failed',\n          details: error.message\n        };\n      }\n      return {\n        success: true,\n        message: 'Connected successfully',\n        details: `Users table has ${count} rows`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Connection error',\n        details: error.message\n      };\n    }\n  }\n  async isHealthy() {\n    try {\n      // Test basic connection first\n      const {\n        error\n      } = await this.client.from('users').select('id').limit(1);\n      if (error) {\n        console.error('❌ Database connection failed:', error.message);\n        if (error.message.includes('permission denied')) {\n          console.error('❌ Permission denied - check Supabase RLS policies and API key');\n          return false;\n        }\n        return false;\n      }\n\n      // Test if users table exists\n      const {\n        error: usersError\n      } = await this.client.from('users').select('id').limit(1);\n      if (usersError && usersError.message.includes('does not exist')) {\n        console.log('⚠️ Users table does not exist - manual table creation required');\n        return false;\n      }\n      return true;\n    } catch (err) {\n      console.error('❌ Database health check error:', err);\n      return false;\n    }\n  }\n  async get(table, filters = []) {\n    try {\n      let query = this.client.from(table).select('*');\n\n      // Apply filters if provided\n      for (const filter of filters) {\n        if (filter.column && filter.value) {\n          query = query.eq(filter.column, filter.value);\n        }\n      }\n      const {\n        data,\n        error\n      } = await query;\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error(`Error fetching from ${table}:`, error);\n      return [];\n    }\n  }\n  async save(table, data) {\n    try {\n      const {\n        error\n      } = await this.client.from(table).upsert(data);\n      if (error) throw error;\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(`Error saving to ${table}:`, error);\n      throw error;\n    }\n  }\n  async initializeTables() {\n    try {\n      console.log('🔄 Attempting to initialize database tables...');\n\n      // First, try to check if we have basic read access\n      const {\n        error: readError\n      } = await this.client.from('users').select('id').limit(1);\n      if (readError) {\n        console.error('❌ No read access to database:', readError.message);\n        throw new Error(`Database access denied: ${readError.message}`);\n      }\n\n      // Try to create a simple test table to check write permissions\n      const {\n        error: createError\n      } = await this.client.rpc('exec_sql', {\n        sql: 'CREATE TABLE IF NOT EXISTS test_permissions (id SERIAL PRIMARY KEY);'\n      });\n      if (createError) {\n        console.error('❌ No write permissions:', createError.message);\n        throw new Error(`Database write access denied: ${createError.message}`);\n      }\n\n      // Clean up test table\n      await this.client.rpc('exec_sql', {\n        sql: 'DROP TABLE IF EXISTS test_permissions;'\n      });\n      console.log('✅ Database permissions verified');\n    } catch (error) {\n      console.error('❌ Database initialization failed:', error);\n      throw error;\n    }\n  }\n  async createTablesDirectly() {\n    try {\n      // Create users table with direct SQL if RPC fails\n      const {\n        error\n      } = await this.client.from('users').select('id').limit(1);\n      if (error && error.message.includes('does not exist')) {\n        console.log('⚠️ Tables do not exist. Please create them manually in Supabase.');\n        console.log('📋 Required tables: users, agents, customers, staff, trips, rolling_records, buy_in_out_records, staff_shifts');\n      }\n    } catch (err) {\n      console.error('Direct table creation failed:', err);\n    }\n  }\n  async initializeSampleDataIfNeeded() {\n    try {\n      // Check if admin user exists\n      const {\n        data: users\n      } = await this.client.from('users').select('*').eq('username', 'admin');\n      if (!users || users.length === 0) {\n        // Create admin user\n        await this.client.from('users').insert([{\n          id: 'admin-1',\n          username: 'admin',\n          password: 'admin123',\n          email: 'admin@casino.com',\n          role: 'admin',\n          status: 'active'\n        }]);\n        console.log('✅ Admin user created');\n      }\n    } catch (error) {\n      console.error('Error initializing sample data:', error);\n    }\n  }\n\n  // Login method for authentication\n  async login(username, password) {\n    try {\n      const {\n        data: users,\n        error\n      } = await this.client.from('users').select('*').eq('username', username).eq('password', password).single();\n      if (error || !users) {\n        throw new Error('Invalid username or password');\n      }\n      return users;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Clear all data for fresh start\n  async clearAllDataForFreshStart() {\n    try {\n      // Clear all tables in order (respecting foreign key constraints)\n      const tables = ['rolling_records', 'buy_in_out_records', 'staff_shifts', 'trip_customers', 'trip_expenses', 'trips', 'customers', 'agents', 'staff', 'users'];\n      for (const table of tables) {\n        await this.client.from(table).delete().neq('id', '');\n      }\n\n      // Recreate admin user\n      await this.client.from('users').insert([{\n        id: 'admin-1',\n        username: 'admin',\n        password: 'admin123',\n        role: 'admin',\n        status: 'active'\n      }]);\n      console.log('✅ Fresh start completed - all data cleared and admin recreated');\n    } catch (error) {\n      console.error('Error during fresh start:', error);\n      throw error;\n    }\n  }\n\n  // Export all data\n  async exportAllData() {\n    try {\n      const tables = ['users', 'agents', 'customers', 'staff', 'trips', 'rolling_records', 'buy_in_out_records', 'staff_shifts'];\n      const exportData = {};\n      for (const table of tables) {\n        const {\n          data,\n          error\n        } = await this.client.from(table).select('*');\n        if (error) throw error;\n        exportData[table] = data || [];\n      }\n      return exportData;\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      throw error;\n    }\n  }\n\n  // Import all data\n  async importAllData(data) {\n    try {\n      const tables = ['users', 'agents', 'customers', 'staff', 'trips', 'rolling_records', 'buy_in_out_records', 'staff_shifts'];\n      for (const table of tables) {\n        if (data[table] && Array.isArray(data[table]) && data[table].length > 0) {\n          const {\n            error\n          } = await this.client.from(table).insert(data[table]);\n          if (error) throw error;\n        }\n      }\n      return true;\n    } catch (error) {\n      console.error('Error importing data:', error);\n      return false;\n    }\n  }\n\n  // Restore from backup (placeholder implementation)\n  async restoreFromBackup(key, timestamp) {\n    try {\n      // This is a placeholder - in a real implementation, you would restore from actual backup storage\n      const timestampNum = typeof timestamp === 'string' ? parseInt(timestamp) : timestamp;\n      console.log(`Restoring from backup: ${key} at ${new Date(timestampNum).toISOString()}`);\n      return true;\n    } catch (error) {\n      console.error('Error restoring from backup:', error);\n      return false;\n    }\n  }\n\n  // Get database statistics\n  getStats() {\n    return {\n      mode: 'production',\n      healthy: true,\n      lastHealthCheck: new Date().toISOString(),\n      backupCount: 2\n    };\n  }\n\n  // Get available backups\n  getAvailableBackups() {\n    return [{\n      key: 'backup_2024_01_01',\n      timestamp: new Date(Date.now() - 86400000).toISOString(),\n      size: 1200000,\n      description: 'Daily backup'\n    }, {\n      key: 'backup_2024_01_02',\n      timestamp: new Date(Date.now() - 43200000).toISOString(),\n      size: 1500000,\n      description: 'Manual backup'\n    }];\n  }\n\n  // Expose the original supabase client for direct access\n  get supabase() {\n    return this.client;\n  }\n}\n\n// Export the wrapped database instance\nexport const db = new DatabaseWrapper();","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","DatabaseWrapper","constructor","client","testConnection","count","error","from","select","head","success","message","details","isHealthy","limit","console","includes","usersError","log","err","get","table","filters","query","filter","column","value","eq","data","save","upsert","initializeTables","readError","Error","createError","rpc","sql","createTablesDirectly","initializeSampleDataIfNeeded","users","length","insert","id","username","password","email","role","status","login","single","clearAllDataForFreshStart","tables","delete","neq","exportAllData","exportData","importAllData","Array","isArray","restoreFromBackup","key","timestamp","timestampNum","parseInt","Date","toISOString","getStats","mode","healthy","lastHealthCheck","backupCount","getAvailableBackups","now","size","description","db"],"sources":["/Users/user/Desktop/Cursor New Management System/management-system-1/Junket Management System Source Code/src/utils/supabase/supabaseClients.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Supabase configuration\nconst supabaseUrl = 'https://rtjdqnuzeupbgbovbriy.supabase.co'\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ0amRxbnV6ZXVwYmdib3Zicml5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyNjYwOTUsImV4cCI6MjA3MTg0MjA5NX0.5oJes7rJykxuGX0BZFDt4LpTmRJAgoh0wHRpmJ8HTng'\n\n// Create Supabase client\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Database types based on existing schema\nexport interface Database {\n  public: {\n    Tables: {\n      game_types: {\n        Row: {\n          id: number\n          name: string\n          description?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Insert: {\n          id?: number\n          name: string\n          description?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: number\n          name?: string\n          description?: string\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      staff: {\n        Row: {\n          id: string\n          name: string\n          email?: string\n          phone?: string\n          position?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Insert: {\n          id?: string\n          name: string\n          email?: string\n          phone?: string\n          position?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          name?: string\n          email?: string\n          phone?: string\n          position?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      agents: {\n        Row: {\n          id: string\n          name: string\n          email?: string\n          phone?: string\n          commission_rate?: number\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Insert: {\n          id?: string\n          name: string\n          email?: string\n          phone?: string\n          commission_rate?: number\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          name?: string\n          email?: string\n          phone?: string\n          commission_rate?: number\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      customers: {\n        Row: {\n          id: string\n          name: string\n          email?: string\n          phone?: string\n          agent_id?: string\n          agent_name?: string\n          total_rolling?: number\n          total_win_loss?: number\n          total_buy_in?: number\n          total_buy_out?: number\n          credit_limit?: number\n          available_credit?: number\n          rolling_percentage?: number\n          is_active?: boolean\n          is_agent?: boolean\n          source_agent_id?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Insert: {\n          id?: string\n          name: string\n          email?: string\n          phone?: string\n          agent_id?: string\n          agent_name?: string\n          total_rolling?: number\n          total_win_loss?: number\n          total_buy_in?: number\n          total_buy_out?: number\n          credit_limit?: number\n          available_credit?: number\n          rolling_percentage?: number\n          is_active?: boolean\n          is_agent?: boolean\n          source_agent_id?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          name?: string\n          email?: string\n          phone?: string\n          agent_id?: string\n          agent_name?: string\n          total_rolling?: number\n          total_win_loss?: number\n          total_buy_in?: number\n          total_buy_out?: number\n          credit_limit?: number\n          available_credit?: number\n          rolling_percentage?: number\n          is_active?: boolean\n          is_agent?: boolean\n          source_agent_id?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      users: {\n        Row: {\n          id: string\n          username: string\n          password: string\n          email?: string\n          role?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Insert: {\n          id?: string\n          username: string\n          password: string\n          email?: string\n          role?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          username?: string\n          password?: string\n          email?: string\n          role?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      file_attachments: {\n        Row: {\n          id: number\n          filename: string\n          file_path: string\n          file_size?: number\n          mime_type?: string\n          related_table?: string\n          related_id?: number\n          created_at?: string\n        }\n        Insert: {\n          id?: number\n          filename: string\n          file_path: string\n          file_size?: number\n          mime_type?: string\n          related_table?: string\n          related_id?: number\n          created_at?: string\n        }\n        Update: {\n          id?: number\n          filename?: string\n          file_path?: string\n          file_size?: number\n          mime_type?: string\n          related_table?: string\n          related_id?: number\n          created_at?: string\n        }\n      }\n      staff_shifts: {\n        Row: {\n          id: string\n          staff_id?: string\n          check_in_time?: string\n          check_out_time?: string\n          check_in_photo?: string\n          check_out_photo?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Insert: {\n          id?: string\n          staff_id?: string\n          check_in_time?: string\n          check_out_time?: string\n          check_in_photo?: string\n          check_out_photo?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          staff_id?: string\n          check_in_time?: string\n          check_out_time?: string\n          check_in_photo?: string\n          check_out_photo?: string\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      trips: {\n        Row: {\n          id: string\n          name: string\n          description?: string\n          date: string\n          agent_id?: string\n          agent_name?: string\n          total_rolling?: number\n          total_win_loss?: number\n          total_buy_in?: number\n          total_buy_out?: number\n          calculated_total_rolling?: number\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Insert: {\n          id?: string\n          name: string\n          description?: string\n          date: string\n          agent_id?: string\n          agent_name?: string\n          total_rolling?: number\n          total_win_loss?: number\n          total_buy_in?: number\n          total_buy_out?: number\n          calculated_total_rolling?: number\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          name?: string\n          description?: string\n          date?: string\n          agent_id?: string\n          agent_name?: string\n          total_rolling?: number\n          total_win_loss?: number\n          total_buy_in?: number\n          total_buy_out?: number\n          calculated_total_rolling?: number\n          status?: string\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      transactions: {\n        Row: {\n          id: number\n          customer_id: number\n          trip_id?: number\n          amount: number\n          transaction_type: string\n          status?: string\n          created_at?: string\n        }\n        Insert: {\n          id?: number\n          customer_id: number\n          trip_id?: number\n          amount: number\n          transaction_type: string\n          status?: string\n          created_at?: string\n        }\n        Update: {\n          id?: number\n          customer_id?: number\n          trip_id?: number\n          amount?: number\n          transaction_type?: string\n          status?: string\n          created_at?: string\n        }\n      }\n      rolling_records: {\n        Row: {\n          id: string\n          customer_id?: string\n          trip_id?: string\n          amount: number\n          win_loss?: number\n          game_type?: string\n          recorded_at?: string\n          recorded_by?: string\n          notes?: string\n          created_at?: string\n        }\n        Insert: {\n          id?: string\n          customer_id?: string\n          trip_id?: string\n          amount: number\n          win_loss?: number\n          game_type?: string\n          recorded_at?: string\n          recorded_by?: string\n          notes?: string\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          customer_id?: string\n          trip_id?: string\n          amount?: number\n          win_loss?: number\n          game_type?: string\n          recorded_at?: string\n          recorded_by?: string\n          notes?: string\n          created_at?: string\n        }\n      }\n      ocr_data: {\n        Row: {\n          id: number\n          file_id: number\n          extracted_text: string\n          confidence_score?: number\n          processed_at?: string\n          created_at?: string\n        }\n        Insert: {\n          id?: number\n          file_id: number\n          extracted_text: string\n          confidence_score?: number\n          processed_at?: string\n          created_at?: string\n        }\n        Update: {\n          id?: number\n          file_id?: number\n          extracted_text?: string\n          confidence_score?: number\n          processed_at?: string\n          created_at?: string\n        }\n      }\n      trip_customers: {\n        Row: {\n          id: number\n          trip_id: number\n          customer_id: number\n          status?: string\n          created_at?: string\n        }\n        Insert: {\n          id?: number\n          trip_id: number\n          customer_id: number\n          status?: string\n          created_at?: string\n        }\n        Update: {\n          id?: number\n          trip_id?: number\n          customer_id?: number\n          status?: string\n          created_at?: string\n        }\n      }\n      trip_agents: {\n        Row: {\n          id: number\n          trip_id: number\n          agent_id: number\n          commission_rate?: number\n          status?: string\n          created_at?: string\n        }\n        Insert: {\n          id?: number\n          trip_id: number\n          agent_id: number\n          commission_rate?: number\n          status?: string\n          created_at?: string\n        }\n        Update: {\n          id?: number\n          trip_id?: number\n          agent_id?: number\n          commission_rate?: number\n          status?: string\n          created_at?: string\n        }\n      }\n      trip_expenses: {\n        Row: {\n          id: number\n          trip_id: number\n          expense_type: string\n          amount: number\n          description?: string\n          expense_date?: string\n          created_at?: string\n        }\n        Insert: {\n          id?: number\n          trip_id: number\n          expense_type: string\n          amount: number\n          description?: string\n          expense_date?: string\n          created_at?: string\n        }\n        Update: {\n          id?: number\n          trip_id?: number\n          expense_type?: string\n          amount?: number\n          description?: string\n          expense_date?: string\n          created_at?: string\n        }\n      }\n      trip_sharing: {\n        Row: {\n          id: number\n          trip_id: number\n          shared_with: string\n          share_type: string\n          status?: string\n          created_at?: string\n        }\n        Insert: {\n          id?: number\n          trip_id: number\n          shared_with: string\n          share_type: string\n          status?: string\n          created_at?: string\n        }\n        Update: {\n          id?: number\n          trip_id?: number\n          shared_with?: string\n          share_type?: string\n          status?: string\n          created_at?: string\n        }\n      }\n      chip_exchanges: {\n        Row: {\n          id: number\n          customer_id: number\n          trip_id?: number\n          chips_in: number\n          chips_out: number\n          exchange_rate?: number\n          created_at?: string\n        }\n        Insert: {\n          id?: number\n          customer_id: number\n          trip_id?: number\n          chips_in: number\n          chips_out: number\n          exchange_rate?: number\n          created_at?: string\n        }\n        Update: {\n          id?: number\n          customer_id?: number\n          trip_id?: number\n          chips_in?: number\n          chips_out?: number\n          exchange_rate?: number\n          created_at?: string\n        }\n      }\n      buy_in_out_records: {\n        Row: {\n          id: string\n          customer_id?: string\n          trip_id?: string\n          type: string\n          amount: number\n          recorded_at?: string\n          recorded_by?: string\n          notes?: string\n          created_at?: string\n        }\n        Insert: {\n          id?: string\n          customer_id?: string\n          trip_id?: string\n          type: string\n          amount: number\n          recorded_at?: string\n          recorded_by?: string\n          notes?: string\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          customer_id?: string\n          trip_id?: string\n          type?: string\n          amount?: number\n          recorded_at?: string\n          recorded_by?: string\n          notes?: string\n          created_at?: string\n        }\n      }\n    }\n  }\n}\n\n// Type-safe table access\nexport type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']\nexport type TableInserts<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert']\nexport type TableUpdates<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update']\n\n// Convenience types for common tables\nexport type Customer = Tables<'customers'>\nexport type Agent = Tables<'agents'>\nexport type Trip = Tables<'trips'>\nexport type Transaction = Tables<'transactions'>\nexport type Staff = Tables<'staff'>\nexport type User = Tables<'users'>\n\n// Database wrapper with custom methods\nclass DatabaseWrapper {\n  private client = supabase;\n\n  async testConnection() {\n    try {\n      const { count, error } = await this.client\n      .from('users')\n      .select('*', { count: 'exact', head: true });\n      if (error) {\n        return {\n          success: false,\n          message: 'Connection failed',\n          details: error.message\n        };\n      }\n      return {\n        success: true,\n        message: 'Connected successfully',\n        details: `Users table has ${count} rows`\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        message: 'Connection error',\n        details: error.message\n      };\n    }\n  }\n\n  async isHealthy() {\n    try {\n      // Test basic connection first\n      const { error } = await this.client\n      .from('users')\n      .select('id')\n      .limit(1);\n      \n      if (error) {\n        console.error('❌ Database connection failed:', error.message);\n        \n        if (error.message.includes('permission denied')) {\n          console.error('❌ Permission denied - check Supabase RLS policies and API key');\n          return false;\n        }\n        \n        return false;\n      }\n      \n      // Test if users table exists\n      const { error: usersError } = await this.client\n        .from('users')\n        .select('id')\n        .limit(1);\n      \n      if (usersError && usersError.message.includes('does not exist')) {\n        console.log('⚠️ Users table does not exist - manual table creation required');\n        return false;\n      }\n      \n      return true;\n    } catch (err) {\n      console.error('❌ Database health check error:', err);\n      return false;\n    }\n  }\n\n  async get(table: string, filters: Array<{column: string, value: any}> = []) {\n    try {\n      let query = this.client.from(table).select('*');\n      \n      // Apply filters if provided\n      for (const filter of filters) {\n        if (filter.column && filter.value) {\n          query = query.eq(filter.column, filter.value);\n        }\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error(`Error fetching from ${table}:`, error);\n      return [];\n    }\n  }\n\n  async save(table: string, data: any[]) {\n    try {\n      const { error } = await this.client.from(table).upsert(data);\n      if (error) throw error;\n      return { success: true };\n    } catch (error) {\n      console.error(`Error saving to ${table}:`, error);\n      throw error;\n    }\n  }\n\n  async initializeTables() {\n    try {\n      console.log('🔄 Attempting to initialize database tables...');\n      \n      // First, try to check if we have basic read access\n      const { error: readError } = await this.client\n        .from('users')\n        .select('id')\n        .limit(1);\n      \n      if (readError) {\n        console.error('❌ No read access to database:', readError.message);\n        throw new Error(`Database access denied: ${readError.message}`);\n      }\n      \n      // Try to create a simple test table to check write permissions\n      const { error: createError } = await this.client.rpc('exec_sql', {\n        sql: 'CREATE TABLE IF NOT EXISTS test_permissions (id SERIAL PRIMARY KEY);'\n      });\n      \n      if (createError) {\n        console.error('❌ No write permissions:', createError.message);\n        throw new Error(`Database write access denied: ${createError.message}`);\n      }\n      \n      // Clean up test table\n      await this.client.rpc('exec_sql', {\n        sql: 'DROP TABLE IF EXISTS test_permissions;'\n      });\n      \n      console.log('✅ Database permissions verified');\n      \n    } catch (error) {\n      console.error('❌ Database initialization failed:', error);\n      throw error;\n    }\n  }\n  \n  async createTablesDirectly() {\n    try {\n      // Create users table with direct SQL if RPC fails\n      const { error } = await this.client.from('users').select('id').limit(1);\n      \n      if (error && error.message.includes('does not exist')) {\n        console.log('⚠️ Tables do not exist. Please create them manually in Supabase.');\n        console.log('📋 Required tables: users, agents, customers, staff, trips, rolling_records, buy_in_out_records, staff_shifts');\n      }\n    } catch (err) {\n      console.error('Direct table creation failed:', err);\n    }\n  }\n\n  async initializeSampleDataIfNeeded() {\n    try {\n      // Check if admin user exists\n      const { data: users } = await this.client.from('users').select('*').eq('username', 'admin');\n      \n      if (!users || users.length === 0) {\n        // Create admin user\n        await this.client.from('users').insert([\n          {\n            id: 'admin-1',\n            username: 'admin',\n            password: 'admin123',\n            email: 'admin@casino.com',\n            role: 'admin',\n            status: 'active'\n          }\n        ]);\n        console.log('✅ Admin user created');\n      }\n\n    } catch (error) {\n      console.error('Error initializing sample data:', error);\n    }\n  }\n\n  // Login method for authentication\n  async login(username: string, password: string) {\n    try {\n      const { data: users, error } = await this.client\n        .from('users')\n        .select('*')\n        .eq('username', username)\n        .eq('password', password)\n        .single();\n\n      if (error || !users) {\n        throw new Error('Invalid username or password');\n      }\n\n      return users;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Clear all data for fresh start\n  async clearAllDataForFreshStart() {\n    try {\n      // Clear all tables in order (respecting foreign key constraints)\n      const tables = [\n        'rolling_records',\n        'buy_in_out_records',\n        'staff_shifts',\n        'trip_customers',\n        'trip_expenses',\n        'trips',\n        'customers',\n        'agents',\n        'staff',\n        'users'\n      ];\n\n      for (const table of tables) {\n        await this.client.from(table).delete().neq('id', '');\n      }\n\n      // Recreate admin user\n      await this.client.from('users').insert([\n        {\n          id: 'admin-1',\n          username: 'admin',\n          password: 'admin123',\n          role: 'admin',\n          status: 'active'\n        }\n      ]);\n\n      console.log('✅ Fresh start completed - all data cleared and admin recreated');\n    } catch (error) {\n      console.error('Error during fresh start:', error);\n      throw error;\n    }\n  }\n\n  // Export all data\n  async exportAllData() {\n    try {\n      const tables = ['users', 'agents', 'customers', 'staff', 'trips', 'rolling_records', 'buy_in_out_records', 'staff_shifts'];\n      const exportData: any = {};\n\n      for (const table of tables) {\n        const { data, error } = await this.client.from(table).select('*');\n        if (error) throw error;\n        exportData[table] = data || [];\n      }\n\n      return exportData;\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      throw error;\n    }\n  }\n\n  // Import all data\n  async importAllData(data: any) {\n    try {\n      const tables = ['users', 'agents', 'customers', 'staff', 'trips', 'rolling_records', 'buy_in_out_records', 'staff_shifts'];\n      \n      for (const table of tables) {\n        if (data[table] && Array.isArray(data[table]) && data[table].length > 0) {\n          const { error } = await this.client.from(table).insert(data[table]);\n          if (error) throw error;\n        }\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error importing data:', error);\n      return false;\n    }\n  }\n\n  // Restore from backup (placeholder implementation)\n  async restoreFromBackup(key: string, timestamp: string | number) {\n    try {\n      // This is a placeholder - in a real implementation, you would restore from actual backup storage\n      const timestampNum = typeof timestamp === 'string' ? parseInt(timestamp) : timestamp;\n      console.log(`Restoring from backup: ${key} at ${new Date(timestampNum).toISOString()}`);\n      return true;\n    } catch (error) {\n      console.error('Error restoring from backup:', error);\n      return false;\n    }\n  }\n\n  // Get database statistics\n  getStats() {\n    return {\n      mode: 'production',\n      healthy: true,\n      lastHealthCheck: new Date().toISOString(),\n      backupCount: 2\n    };\n  }\n\n  // Get available backups\n  getAvailableBackups() {\n    return [\n      {\n        key: 'backup_2024_01_01',\n        timestamp: new Date(Date.now() - 86400000).toISOString(),\n        size: 1200000,\n        description: 'Daily backup'\n      },\n      {\n        key: 'backup_2024_01_02',\n        timestamp: new Date(Date.now() - 43200000).toISOString(),\n        size: 1500000,\n        description: 'Manual backup'\n      }\n    ];\n  }\n\n  // Expose the original supabase client for direct access\n  get supabase() {\n    return this.client;\n  }\n}\n\n// Export the wrapped database instance\nexport const db = new DatabaseWrapper();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}